\input texinfo
@setfilename mercury_user_guide.info
@settitle The Mercury User's Guide

@dircategory The Mercury Programming Language
@direntry
* Mercury User's Guide: (mercury_user_guide).  The Mercury User's Guide.
@end direntry

@c @smallbook
@c @cropmarks
@finalout
@setchapternewpage off

@c ----------------------------------------------------------------------------

@c We use the following indices in this document:
@c
@c	The "@cindex" / "cp" (concept) index:
@c		for general concepts (e.g. "Determinism", "Debugging", etc.)
@c	The "@pindex" / "pg" (program) index:
@c		for programs or shell scripts (mmc, mgnuc, etc.).
@c	The "@findex" / "fn" (function) index:
@c		for command-line options.
@c	The "@kindex" / "ky" (keystroke) index:
@c		for mdb commands.
@c	The "@vindex" / "vr" (variable) index:
@c		for environment variables and Mmake variables.
@c
@c That is in case we ever want to produce separate indices for the
@c different categories.  Currently, however, we merge them all into
@c a single index, via the commands below.

@syncodeindex fn cp
@syncodeindex ky cp
@syncodeindex vr cp
@syncodeindex pg cp

@c ----------------------------------------------------------------------------

@ifnottex
This file documents the Mercury implementation, version <VERSION>.

Copyright @copyright{} 1995--2012 The University of Melbourne.@*
Copyright @copyright{} 2013--2025 The Mercury team.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through Tex and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end ifnottex

@titlepage
@title The Mercury User's Guide
@subtitle Version <VERSION>
@author Fergus Henderson
@author Thomas Conway
@author Zoltan Somogyi
@author Peter Ross
@author Tyson Dowd
@author Mark Brown
@author Ian MacLarty
@author Paul Bone
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1995--2012 The University of Melbourne.@*
Copyright @copyright{} 2013--2025 The Mercury team.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage

@c ----------------------------------------------------------------------------

@contents
@page

@c ----------------------------------------------------------------------------

@ifnottex
@node Top,,, (mercury)
@top The Mercury User's Guide, version <VERSION>

This guide describes the compilation environment of Mercury ---
how to build and debug Mercury programs.

@menu
* Introduction::    General overview.
* Filenames::       File naming conventions.
* Using mmc::       Compiling and linking programs with the Mercury compiler.
* Running::         Execution of programs built with the Mercury compiler.
* Using Mmake::     ``Mercury Make'', a tool for building Mercury programs.
* Libraries::       Creating and using libraries of Mercury modules.
* Debugging::       The Mercury debugger @samp{mdb}.
* Profiling::       Analyzing the performance of Mercury programs.
* Invocation::      List of options for the Mercury compiler.
* Environment::     Environment variables used by the compiler and utilities.
* Diagnostic output:: Controlling some aspects of compiler diagnostics.
* C compilers::     How to use a C compiler other than GNU C.
* Foreign language interface:: Interfacing to other programming
		    languages from Mercury.
* Stand-alone interfaces:: Calling procedures in Mercury libraries from
                           programs written in other languages.
* Index::
@end menu
@end ifnottex

@c ----------------------------------------------------------------------------

@node Introduction
@chapter Introduction

This document describes the compilation environment of Mercury.
It describes
@itemize
@item
how to use @samp{mmc}, the Mercury compiler;
@item
how to use @samp{mmc --make}, a build tool integrated into @samp{mmc};
@item
how to use an older build tool, @samp{mmake}, built on top of GNU make;
@item
how to use @samp{mdb}, the Mercury debugger;
@item
how to use @samp{mprof}, a @samp{gprof}-style profiler for Mercury; and
@item
how to use @samp{mdprof}, a more detailed profiler for Mercury
that uses a web interface.
@end itemize

Mercury programs can be compiled to executables
via any one of three target languages: C, Java and C#.
The most frequently used target language is C, for two main reasons.
The first is that several important parts of the Mercury system,
such as @samp{mdb}, @samp{mprof} and @samp{mdprof},
are implemented only when targeting C.
The second is that targeting C yields the fastest executables.

@c ----------------------------------------------------------------------------

@node Filenames
@chapter File naming conventions
@cindex File extensions
@cindex File names

Mercury source files must be named @file{*.m}.
Each Mercury source file should contain a single Mercury module
whose module name should be (although it does not have to be)
the same as the filename without the @samp{.m} extension.

The Mercury implementation uses a variety of intermediate files,
which are described below.
But all you really need to know is how to name source files.
For historical reasons, the default behaviour
is for intermediate files to be created in the current directory,
but if you use the @samp{--use-subdirs} option to @samp{mmc} or @samp{mmake},
@findex --use-subdirs
all these intermediate files will be created in a @file{Mercury} subdirectory,
where you can happily ignore them.
Thus you may wish to skip the rest of this chapter.

In cases where the source file name and module name don't match,
the names for intermediate files are based on the name of the
module from which they are derived, not on the source file name.

Files whose names end in
@file{.int}, @file{.int2}, @file{.int0} and @file{.int3}
are interface files; these are generated automatically by the compiler,
using the @samp{--make-interface} (or @samp{--make-int}),
@samp{--make-private-interface} (or @samp{--make-priv-int}),
@samp{--make-short-interface} (or @samp{--make-short-int}) options.
(Invoking the compiler with @samp{--make-interface}
generates both @file{.int} and @file{.int2} files.)
@findex --make-int
@findex --make-interface
@findex --make-short-int
@findex --make-short-interface
@findex --make-priv-interface
@findex --make-private-interface
@findex --make-optimization-interface
@findex --make-transitive-optimization-interface
@findex --make-trans-opt
Files whose names end in @file{.opt} are used for inter-module optimization,
and are created using the @samp{--make-optimization-interface}
(or @samp{--make-opt-int}) option.
Similarly, files whose name ends in @file{.trans_opt}
are used for transitive inter-module optimization,
and are created using the @samp{--make-transitive-optimization-interface}
(or @samp{--make-trans-opt}) option.

Since the interface of a module changes less often than its implementation,
the @file{.int}, @file{.int0}, @file{.int2}, @file{.int3}, @file{.opt},
and @file{.trans_opt} files will often remain unchanged when they are rebuilt.
To avoid unnecessary recompilations of the clients of the module,
the timestamps on these files are updated only if their contents change.
Files with the suffixes @file{.date}, @file{.date0}, @file{.date3},
@file{.optdate}, and @file{.trans_opt_date} serve as timestamp files,
to be used when deciding whether the interface files need to be regenerated:
they each record the last time when the file or files it represents
has last been checked for being up to date.

Files ending in @file{.d} are automatically generated Makefile fragments
which contain the dependencies for a module.
Files ending in @file{.dep} are automatically generated Makefile fragments
which contain the rules for an entire program.
Files ending in @file{.dv} are automatically generated Makefile fragments
which contain variable definitions for an entire program.

As usual, @file{.c} files are C source code,
and @file{.o} files are object code.
In addition, @file{.pic_o} files are object code files
that contain position-independent code (PIC).
@file{.lpic_o} files are object code files
that can be linked with shared libraries,
but don't necessarily contain position-independent code themselves.
@file{.mh} and @file{.mih} files are C header files
generated by the Mercury compiler.
Their non-standard extensions are necessary
to avoid conflicts with system header files.

@file{.java} files are Java source code,
@file{.class} files are Java bytecode, and
@file{.jar} files are Java archives.

@c when we support shared libraries on Windows .dll will also be used for them.
@file{.cs} files are C# source code,
@file{.dll} files are library assemblies and,
when compiling to C#, @file{.exe} files are process assemblies.

@c When smart recompilation (@pxref{Auxiliary output options}) is enabled,
@c @file{.c_date}, @file{.cs_date} and @file{.java_date} files
@c perform the same function for
@c @file{.c}, @file{.cs} and @file{.java} files respectively
@c as e.g. @file{.date3} files do for @file{.int3} files:
@c when smart recompilation works out
@c that a module does not need to be recompiled,
@c it updates the timestamp of the @emph{timestamp file} for the target file,
@c but leaves the timestamp of the target file itself unchanged.
@c @findex --smart-recompilation

@c @file{.used} files contain dependency information for smart recompilation
@c (@pxref{Auxiliary output options}).
@c @findex --smart-recompilation

@c ----------------------------------------------------------------------------

@node Using mmc
@chapter Using the Mercury compiler
@cindex Microsoft Management Console

The Mercury compiler is called @samp{mmc}
(for ``Melbourne Mercury Compiler'').
@pindex mmc
Some of its options (e.g.@: @samp{-c}, @samp{-o}, and @samp{-I})
have a similar meaning to that in other compilers.

(Note that on Microsoft Windows systems,
the name @samp{mmc} is also used by the executable
for the Microsoft Management Console.
To avoid the name clash on these systems,
you can either invoke the Mercury compiler
by the alternative name @samp{mercury},
or adjust your @env{PATH} to ensure that
the Mercury @file{bin} directory precedes the Windows system directory.)

Arguments to @samp{mmc} may be either file names (ending in @samp{.m}),
or module names, with @samp{.} (rather than @samp{__})
as the module qualifier.  For a module name such as @samp{foo.bar.baz},
the compiler will look for the source in the file named @file{foo.bar.baz.m}.
To make the compiler look for a module in another file,
use @samp{mmc -f @var{sources-files}} to generate
a mapping from module name to file name,
where @var{sources-files} is the list of source files in the directory
(@pxref{Options that give the compiler its overall task}).

Arguments to @samp{mmc} may also be in @samp{@@file}.
The @samp{@@file} argument is replaced with arguments
representing the contents of the file.
This argument processing is done recursively.
The contents of the @samp{@@file} is split into arguments
one per line in the file.

There are two ways to compile a program that consists of a single source file.
The first way, which works only when targeting C,
is to issue the command

@example
mmc @var{filename}.m
@end example

The second way, which works regardless of target language,
is to issue the command

@example
mmc --make @var{filename}
@end example

There are also two ways to build programs
that consist of more than one source file:
using Mmake (@pxref{Using Mmake}), which only works when targeting C,
or using @samp{mmc --make}.

We strongly recommend that programmers use @samp{mmc --make}
rather than invoking @samp{mmc} directly,
because @samp{mmc --make} is generally easier to use
and avoids unnecessary recompilation.

When targeting C on systems that do not require an executable file extension,
@samp{mmc} will put the executable into a file called @file{@var{filename}};
on systems (such as Windows)
that use @file{.exe} as the file extension for executables,
@samp{mmc} will put the executable
into a file called @file{@var{filename}.exe}.

When targeting C#,
@samp{mmc} will generate a process assembly called @file{@var{filename}.exe}.
On Windows, this process assembly can be run directly.
On non-Windows systems,
@samp{mmc} will also generate a shell script called @file{@var{filename}}
that invokes the CLI execution environment on the process assembly.
(See the file @file{README.CSharp.md} included in the Mercury distribution
for further details.)

When targeting Java,
@samp{mmc} will package up all of the class files for the executable
into a Java archive (JAR) named @file{@var{filename}.jar}.
It will also generate a launcher that invokes the program using the Java
interpreter.
If you are using the Windows command line interpreter @samp{cmd.exe}, this
launcher will be a batch file called @file{@var{filename}.bat}.
Otherwise, the launcher will be a shell script called @file{@var{filename}}.
Java runtime flags can be set using @samp{mmc}'s @samp{--java-runtime-flags} or
@samp{--java-runtime-flag} options.
Such Java runtime flags will be included in the generated launcher shell script
or batch file.
You may override any runtime flags set at (Mercury) compile time by setting the
variable @var{MERCURY_JAVA_OPTIONS} in the environment.
Classpath settings made using @samp{mmc}'s @samp{--java-classpath} option will
also be included in the generated launcher shell script or batch file.

If you use Mmake or @samp{mmc --make},
then you do not need to understand the details
of how the Mercury implementation goes about building programs.
Thus you may wish to skip the rest of this chapter.

To compile a source file to object code via C without creating an executable,
use the command

@example
mmc -c @var{filename}.m
@end example

Since targeting C is the default,
this tells @samp{mmc} to generate C code,
and then invoke the configured C compiler to translate that to object code.
@samp{mmc} puts the generated C code into a file called @file{@var{module}.c}
and the generated object code into a file called @file{@var{module}.o},
where @var{module} is the name of the Mercury module
defined in @file{@var{filename}.m}.
If the source file contains nested modules,
then each submodule will get compiled to separate C and object files.

Before you can compile a module,
you must make the interface files
for the modules that it imports (directly or indirectly).
You can create the interface files for one or more source files
using the following commands:

@example
mmc --make-short-int @var{filename1}.m @var{filename2}.m @dots{}
mmc --make-priv-int @var{filename1}.m @var{filename2}.m @dots{}
mmc --make-int @var{filename1}.m @var{filename2}.m @dots{}
@end example
@findex --make-short-int
@findex --make-priv-int
@findex --make-int

The first command builds (or rebuilds)
the @samp{.int3} file of each module contained in the named source files.
The second command builds (or rebuilds)
the @samp{.int0} file of each module contained in the named source files.
(Note that only modules that have submodules need @samp{.int0} files.)
The third command builds (or rebuilds)
both the @samp{.int} and @samp{.int2} file
of each module contained in the named source files.

If you are going to compile with @samp{--intermodule-optimization} enabled,
then you also need to create the optimization interface files.

@example
mmc --make-opt-int @var{filename1}.m @var{filename2}.m @dots{}
@end example
@findex --make-opt-int

If you are going to compile with @samp{--transitive-intermodule-optimization}
enabled, then you also need to create the transitive optimization files.
@findex --transitive-intermodule-optimization

@example
mmc --make-trans-opt @var{filename1}.m @var{filename2}.m @dots{}
@end example
@findex --make-trans-opt

After you have made all the interface files,
one way to create an executable for a multi-module program
is to compile all the modules at the same time
using the command

@example
mmc @var{filename1}.m @var{filename2}.m @dots{}
@end example

This will by default put the resulting executable in @file{@var{filename1}},
though you can use the @samp{-o @var{filename}} option
to specify a different name for the output file, if you so desire.
@findex -o

The other way to create an executable for a multi-module program
is to compile each module separately using @samp{mmc -c},
@findex -c
and then link the resulting object files together.
The linking is a two stage process.

First, you must create and compile an @emph{initialization file},
which is a C source file
containing calls to automatically generated initialization functions
contained in the C code of the modules of the program:

@example
c2init @var{module1}.c @var{module2}.c @dots{} > @var{main-module}_init.c,
mgnuc -c @var{main-module}_init.c
@end example
@pindex c2init
@pindex mgnuc

The @samp{c2init} command line must contain
the name of the C file of every module in the program.
The order of the arguments is not important.
The @samp{mgnuc} command is the Mercury GNU C compiler;
it is a shell script that invokes the configured C compiler with the options
appropriate for compiling the C programs generated by Mercury.
(In the early days of the Mercury project, the configured C compiler
was almost always GCC, which is why the name of the script is what it is,
but the script itself will work with clang or MSVC as well.)

You then link the object code of each module
with the object code of the initialization file to yield the executable:

@example
ml -o @var{main-module} @var{module1}.o @var{module2}.o @dots{} @var{main_module}_init.o
@end example
@pindex ml

@samp{ml}, the Mercury linker,
is another shell script that invokes a C compiler
with options appropriate for Mercury, this time for linking.
@samp{ml} also pipes any error messages from the linker
through @samp{mdemangle}, the Mercury symbol demangler,
so that any error messages refer to
predicate and function names from the Mercury source code
rather than to the names used in the intermediate C code.

The above command puts the executable in the file @file{@var{main-module}}.
The same command line without the @samp{-o} option
would put the executable into the file @file{a.out}.

@samp{mmc} and @samp{ml} both accept a @samp{-v} (verbose) option.
You can use that option to see what is actually going on.
For the full set of options of @samp{mmc}, see @ref{Invocation}.

@c ----------------------------------------------------------------------------

@node Running
@chapter Running programs

Once you have created an executable for a Mercury program,
you can go ahead and execute it.
You may however wish to specify certain options to the Mercury runtime system.
The Mercury runtime accepts
options via the @env{MERCURY_OPTIONS} environment variable.
@vindex MERCURY_OPTIONS
The most useful of these are the options that set the size of the stacks.
(For the full list of available options, see @ref{Environment}.)

@c XXX FIXME This is wrong for the case when --high-level-code is enabled.
When targeting Java or C#,
and when targeting high level C (@samp{mmc --high-level-code}),
stack management is the responsibility of the target language's compiler.
When targeting low level C (@samp{mmc} without --high-level code),
stack management is the responsibility of @samp{mmc}
and of the C runtime system.
This backend uses two stacks, the det stack and the nondet stack.
With @samp{mmc --stack-segments},
both of these stacks will grow and shrink automatically as needed.
Without @samp{--stack-segments},
their size is fixed at program start-up.
@c Note: The definitions for these defaults are in runtime/mercury_wrapper.c.
The default size is 4096k times the word size (in bytes) for the det stack
and 64k times the word size (in bytes) for the nondet stack,
but these can be overridden with the
@samp{--detstack-size} and @samp{--nondetstack-size} options,
@findex --detstack-size
@findex --nondetstack-size
whose arguments are the desired sizes of the det and nondet stacks
respectively, in units of kilobytes.
On operating systems that provide the appropriate support,
the Mercury runtime will ensure that stack overflow
is trapped by the virtual memory system.
@cindex Stack size
@cindex Stack overflow

With conservative garbage collection (the default),
the heap will start out with a zero size,
and will be dynamically expanded as needed,
When not using conservative garbage collection,
the heap has a fixed size like the stacks.
The default size is 8Mb times the word size (in bytes),
but this can be overridden with the @samp{--heap-size} option.
@cindex Heap size
@cindex Heap overflow

@c ----------------------------------------------------------------------------

@node Using Mmake
@chapter Using Mmake
@pindex mmake
@pindex make --- see Mmake
@cindex Building programs
@cindex Recompiling

Mmake, short for ``Mercury Make'',
is a tool for building Mercury programs.
The same functionality is now provided in @samp{mmc} directly by using the
@samp{--make} option:

@example
mmc --make @var{main-module}
@end example

@noindent
The usage of Mmake is discouraged,
not least because it works only when targeting C.

Mmake is built on top of GNU Make.
With Mmake, building even a complicated Mercury program
consisting of a number of modules is as simple as

@example
mmc -f @var{source-files}
mmake @var{main-module}.depend
mmake @var{main-module}
@end example

Mmake only recompiles those files that need to be recompiled,
based on automatically generated dependency information.
Most of the dependencies are stored in @file{.d} files that are
automatically recomputed every time you recompile,
so they are never out-of-date.
A little bit of the dependency information
is stored in @file{.dep} and @file{.dv} files
which are more expensive to recompute.
The @samp{mmake @var{main-module}.depend} command which recreates
the @file{@var{main-module}.dep} and @file{@var{main-module}.dv} files
needs to be repeated only when you either
add a module to your program or remove a module from it.
There is no danger of getting an inconsistent executable
if you forget this step ---
instead you will get a compile or link error.

The @samp{mmc -f} step above is only required if there are any source files
for which the file name does not match the module name.
@samp{mmc -f} generates a file named @file{Mercury.modules}
containing a mapping from module name to source file.
The @file{Mercury.modules} file must be updated
when a source file for which the file name does not match the module name
is added to or removed from the directory.

@samp{mmake} allows you to build more than one program in the same directory.
Each program must have its own @file{.dep} and @file{.dv} files,
and therefore you must run @samp{mmake @var{program}.depend} for each program.
The @samp{Mercury.modules} file is used for all programs in the directory.

If there is a file called @file{Mmake} or @file{Mmakefile}
in the current directory,
Mmake will include that file in its automatically generated Makefile.
The @samp{Mmake} file can override
the default values of various variables used by Mmake's builtin rules,
or it can add additional rules, dependencies, and actions.

Mmake's builtin rules are defined by the file
@file{@var{prefix}/lib/mercury/mmake/Mmake.rules}
(where @var{prefix} is @file{/usr/local/mercury-@var{version}} by default,
and @var{version} is the version number, e.g.@: @samp{0.6}),
as well as the rules and variables in the automatically generated
@file{.dep} and @file{.dv} files.
These rules define the following targets:

@table @file
@item @var{main-module}.depend
Creates the files @file{@var{main-module}.dep} and
@file{@var{main-module}.dv} from @file{@var{main-module}.m}
and the modules it imports.
This step must be performed first.
It is also required whenever you wish to change
the level of inter-module optimization performed
(@pxref{Overall control of optimizations}).

@item @var{main-module}.all_ints
Ensure that the interface files for @var{main-module}
and its imported modules are up-to-date.
(If the underlying @samp{make} program does not handle transitive dependencies,
this step may be necessary before
attempting to make @file{@var{main-module}} or @file{@var{main-module}.check};
if the underlying @samp{make} is GNU Make, this step should not be necessary.)

@item @var{main-module}.check
Perform semantic checking on @var{main-module} and its imported modules.
Error messages are placed in @file{.err} files.

@item @var{main-module}
Compiles and links @var{main-module} using the Mercury compiler.
Error messages are placed in @file{.err} files.

@c XXX mention .dlls and .exe targets?

@item lib@var{main-module}
Builds a library whose top-level module is @var{main-module}.
This will build a static object library, a shared object library
(for platforms that support it), and the necessary interface files.
For more information, see @ref{Libraries}.

@item lib@var{main-module}.install
Builds and installs a library whose top-level module is @var{main-module}.
This target will build and install a static object library and
(for platforms that support it) a shared object library,
for the default grade and also for the additional grades specified
in the @code{LIBGRADES} variable.  It will also build and install the
necessary interface files. The variable @code{INSTALL} specifies
the name of the command to use to install each file, by default
@samp{cp}. The variable @code{INSTALL_MKDIR} specifies the command to use
to create directories, by default @samp{mkdir -p}.
@vindex LIBGRADES
@vindex LIB_LINKAGES
@vindex INSTALL
@vindex INSTALL_MKDIR

@item @var{main-module}.clean
Removes the automatically generated files
that contain the compiled code of the program
and the error messages produced by the compiler.
Specifically, this will remove all the @samp{.c}, @samp{.o},
@samp{.pic_o}, @samp{.prof}, @samp{.used}, @samp{.mih},
and @samp{.err} files
belonging to the named @var{main-module} or its imported modules.
Use this target whenever you wish to change compilation model
(@pxref{Grade options}).
This target is also recommended whenever you wish to change
the level of inter-module optimization performed
(@pxref{Overall control of optimizations})
in addition to the mandatory @var{main-module}.depend.

@item @var{main-module}.realclean
Removes all the automatically generated files.
In addition to the files removed by @var{main-module}.clean, this
removes the @samp{.int}, @samp{.int0}, @samp{.int2},
@samp{.int3}, @samp{.opt}, @samp{.trans_opt},
@samp{.date}, @samp{.date0}, @samp{.date3}, @samp{.optdate},
@samp{.trans_opt_date},
@samp{.mh} and @samp{.d} files
belonging to one of the modules of the program,
and also the various possible executables, libraries and dependency files
for the program as a whole ---
@samp{@var{main-module}},
@samp{lib@var{main-module}.a},
@samp{lib@var{main-module}.so},
@samp{lib@var{main-module}.dylib},
@samp{@var{main-module}.init},
@samp{@var{main-module}.dep}
and
@samp{@var{main-module}.dv}.

@item clean
This makes @samp{@var{main-module}.clean} for every @var{main-module}
for which there is a @file{@var{main-module}.dep} file in the current
directory, as well as deleting the profiling files
@samp{Prof.CallPair},
@samp{Prof.Counts},
@samp{Prof.Decl},
@samp{Prof.MemWords}
and
@samp{Prof.MemCells}.

@item realclean
This makes @samp{@var{main-module}.realclean} for every @var{main-module}
for which there is a @file{@var{main-module}.dep} file in the current
directory, as well as deleting the profiling files as per the @samp{clean}
target.

@end table

@cindex Variables, Mmake
@cindex Mmake variables
The variables used by the builtin rules (and their default values) are
defined in the file @file{@var{prefix}/lib/mercury/mmake/Mmake.vars}, however
these may be overridden by user @samp{Mmake} files.  Some of the more
useful variables are:

@table @code

@item MAIN_TARGET
@vindex MAIN_TARGET
The name of the default target to create if @samp{mmake} is invoked with
any target explicitly named on the command line.

@item MC
@vindex MC
The executable that invokes the Mercury compiler.

@item GRADEFLAGS and EXTRA_GRADEFLAGS
@vindex GRADEFLAGS
@vindex EXTRA_GRADEFLAGS
Compilation model options (@pxref{Grade options})
to pass to the Mercury compiler, linker, and other tools
(in particular @code{mmc}, @code{mgnuc}, @code{ml}, and @code{c2init}).

@item MCFLAGS and EXTRA_MCFLAGS
@vindex MCFLAGS
@vindex EXTRA_MCFLAGS
Options to pass to the Mercury compiler.
(Note that compilation model options should be
specified in @code{GRADEFLAGS}, not in @code{MCFLAGS}.)

@item MGNUC
@vindex MGNUC
The executable that invokes the C compiler.

@item MGNUCFLAGS and EXTRA_MGNUCFLAGS
@vindex MGNUCFLAGS
@vindex EXTRA_MGNUCFLAGS
Options to pass to the mgnuc script.

@item CFLAGS and EXTRA_CFLAGS
@vindex CFLAGS
@vindex EXTRA_CFLAGS
Options to pass to the C compiler.

@item JAVACFLAGS and EXTRA_JAVACFLAGS
@vindex JAVACFLAGS
@vindex EXTRA_JAVACFLAGS
Options to pass to the Java compiler (if you are using it).

@item ML
@vindex ML
The executable that invokes the linker.

@item LINKAGE
@vindex LINKAGE
Can be set to either @samp{shared} to link with shared libraries,
or @samp{static} to always link statically.  The default is @samp{shared}.
This variable only has an effect with @samp{mmc --make}.

@item MERCURY_LINKAGE
@vindex MERCURY_LINKAGE
Can be set to either @samp{shared} to link with shared Mercury libraries,
or @samp{static} to always link with the static versions of Mercury libraries.
The default is system dependent.
This variable only has an effect with @samp{mmc --make}.
@xref{Using installed libraries with mmc --make}.

@item MLFLAGS and EXTRA_MLFLAGS
@vindex MLFLAGS
@vindex EXTRA_MLFLAGS
Options to pass to the ml and c2init scripts.
(Note that compilation model options should be
specified in @code{GRADEFLAGS}, not in @code{MLFLAGS}.)
These variables have no effect with @samp{mmc --make}.

@item LDFLAGS and EXTRA_LDFLAGS
@vindex LDFLAGS
@vindex EXTRA_LDFLAGS
Options to pass to the command used by the ml script to link
executables (use @code{ml --print-link-command} to find out
what command is used, usually the C compiler).

@item LD_LIBFLAGS and EXTRA_LD_LIBFLAGS
@vindex LD_LIBFLAGS
@vindex EXTRA_LD_LIBFLAGS
Options to pass to the command used to by the ml script to link
shared libraries (use @code{ml --print-shared-lib-link-command}
to find out what command is used, usually the C compiler
or the system linker, depending on the platform).

@item MLLIBS and EXTRA_MLLIBS
@vindex MLLIBS
@vindex EXTRA_MLLIBS
A list of @samp{-l} options specifying libraries used by the program
(or library) that you are building.  @xref{Using libraries with Mmake}.
@xref{Using installed libraries with mmc --make}.

@item MLOBJS and EXTRA_MLOBJS
@vindex MLOBJS
@vindex EXTRA_MLOBJS
A list of extra object files or archives to link into the program or library
that you are building.

@item C2INITFLAGS and EXTRA_C2INITFLAGS
@vindex C2INITFLAGS
@vindex EXTRA_C2INITFLAGS
Options to pass to the linker and the c2init program.
@code{C2INITFLAGS} and @code{EXTRA_C2INITFLAGS} are obsolete synonyms
for @code{MLFLAGS} and @code{EXTRA_MLFLAGS} (@code{ml} and @code{c2init}
take the same set of options).
(Note that compilation model options and extra files to be processed by
c2init should not be specified in @code{C2INITFLAGS} --- they should be
specified in @code{GRADEFLAGS} and @code{C2INITARGS}, respectively.)

@item C2INITARGS and EXTRA_C2INITARGS
@vindex C2INITARGS
@vindex EXTRA_C2INITARGS
Extra files to be processed by c2init.  These variables should not be
used for specifying flags to c2init (those should be specified in
@code{MLFLAGS}) since they are also used to derive extra dependency
information.

@item EXTRA_LIBRARIES
@vindex EXTRA_LIBRARIES
A list of extra Mercury libraries to link into any programs or libraries
that you are building.
Libraries should be specified using their base name; that is, without any
@samp{lib} prefix or extension.
For example, the library including the files @file{libfoo.a} and
@file{foo.init} would be referred to as just @samp{foo}.
@xref{Using libraries with Mmake}.
@xref{Using installed libraries with mmc --make}.

@item EXTRA_LIB_DIRS
@vindex EXTRA_LIB_DIRS
A list of extra Mercury library directory hierarchies to search when
looking for extra libraries.  @xref{Using libraries with Mmake}.
@xref{Using installed libraries with mmc --make}.

@item INSTALL_PREFIX
@vindex INSTALL_PREFIX
The path to the root of the directory hierarchy where the libraries,
etc.@: you are building should be installed.  The default is to install in
the same location as the Mercury compiler being used to do the install.

@item INSTALL
@vindex INSTALL
The command used to install each file in a library. The command should
take a list of files to install and the location to install them.
The default command is @samp{cp}.

@item INSTALL_MKDIR
@vindex INSTALL_MKDIR
The command used to create each directory in the directory hierarchy
where the libraries are to be installed. The default command is
@samp{mkdir -p}.

@item LIBGRADES
@vindex LIBGRADES
A list of additional grades which should be built when installing libraries.
The default is to install the Mercury compiler's default set of grades.
Note that this may not be the set of grades in which the standard libraries
were actually installed.
@vindex GRADEFLAGS
Note also that any @code{GRADEFLAGS} settings will also be applied when
the library is built in each of the listed grades, so you may not get what
you expect if those options are not subsumed by each of the grades listed.

@item LIB_LINKAGES
@vindex LIB_LINKAGES
A list of linkage styles (@samp{shared} or @samp{static}) for which libraries
should be built and installed.  The default is to install libraries for both
static and shared linking.  This variable only has an effect with
@samp{mmc --make}.
@end table

Other variables also exist --- see
@file{@var{prefix}/lib/mercury/mmake/Mmake.vars} for a complete list.

If you wish to temporarily change the flags passed to an executable,
rather than setting the various @samp{FLAGS} variables directly, you can
set an @samp{EXTRA_} variable.  This is particularly intended for
use where a shell script needs to call mmake and add an extra parameter,
without interfering with the flag settings in the @samp{Mmakefile}.

For each of the variables for which there is version with an @samp{EXTRA_}
prefix, there is also a version with an @samp{ALL_} prefix that
is defined to include both the ordinary and the @samp{EXTRA_} version.
If you wish to @emph{use} the values any of these variables
in your Mmakefile (as opposed to @emph{setting} the values),
then you should use the @samp{ALL_} version.

It is also possible to override these variables on a per-file basis.
For example, if you have a module called say @file{bad_style.m}
which triggers lots of compiler warnings, and you want to disable
the warnings just for that file, but keep them for all the other modules,
then you can override @code{MCFLAGS} just for that file.  This is done by
setting the variable @samp{MCFLAGS-bad_style}, as shown here:

@example
MCFLAGS-bad_style = --inhibit-warnings
@end example

Mmake has a few options, including @samp{--use-subdirs}, @samp{--use-mmc-make},
@samp{--save-makefile}, @samp{--verbose}, and @samp{--no-warn-undefined-vars}.
For details about these options, see the man page or type @samp{mmake --help}.

Finally, since Mmake is built on top of GNU Make, you can also
make use of the features and options supported by the underlying Make.
In particular, GNU Make has support for running jobs in parallel, which
is very useful if you have a machine with more than one CPU.

As an alternative to Mmake, the Mercury compiler now contains a
significant part of the functionality of Mmake, using @samp{mmc}'s
@samp{--make} option.
@findex --make

The advantages of the @samp{mmc --make} over Mmake are that there
is no @samp{mmake depend} step and the dependencies are more accurate.

Note that @samp{--use-subdirs} is automatically enabled if you specify
@samp{mmc --make}.

@cindex Options files
@cindex Mercury.options
The Mmake variables above can be used by @samp{mmc --make} if they
are set in a file called @file{Mercury.options}. The @file{Mercury.options}
file has the same syntax as an Mmakefile, but only variable assignments and
@samp{include} directives are allowed.
All variables in @file{Mercury.options} are treated as if they are
assigned using @samp{:=}.
Variables may also be set in the environment, overriding settings in
options files.

@samp{mmc --make} can be used in conjunction with Mmake. This is useful
for projects which include source code written in languages other than
Mercury.  The @samp{--use-mmc-make} Mmake option disables Mmake's
Mercury-specific rules. Mmake will then process source files written in
other languages, but all Mercury compilation will be done by
@samp{mmc --make}.  The following variables can be set in the Mmakefile
to control the use of @samp{mmc --make}.

@table @code

@item MERCURY_MAIN_MODULES
@vindex MERCURY_MAIN_MODULES
The top-level modules of the programs or libraries being built in
the directory.  This must be set to tell Mmake to use @samp{mmc --make}
to rebuild the targets for the main modules even if those files already
exist.

@item MC_BUILD_FILES
@vindex MC_BUILD_FILES
Other files which should be built with @samp{mmc --make}.
This should only be necessary for header files generated by the
Mercury compiler which are included by the user's C source files.

@item MC_MAKE_FLAGS and EXTRA_MC_MAKE_FLAGS
@vindex MC_MAKE_FLAGS
@vindex EXTRA_MC_MAKE_FLAGS
Options to pass to the Mercury compiler only when using @samp{mmc --make}.

@end table

The following variables can also appear in options files but are
@emph{only} supported by @w{@samp{mmc --make}}.

@table @code

@item GCC_FLAGS
@vindex GCC_FLAGS
Options to pass to the C compiler, but only if the C compiler is GCC.
If the C compiler is not GCC then this variable is ignored.
These options will be passed @emph{after} any options given by the
@samp{CFLAGS} variable.

@item CLANG_FLAGS
@vindex CLANG_FLAGS
Options to pass to the C compiler, but only if the C compiler is clang.
If the C compiler is not clang then this variable is ignored.
These options will be passed @emph{after} any options given by the
@samp{CFLAGS} variable.

@item MSVC_FLAGS
@vindex MSVC_FLAGS
Options to pass to the C compiler,
but only if the C compiler is Microsoft Visual C.
If the C compiler is not Visual C then this variable is ignored.
These options will be passed @emph{after} any options given by the
@samp{CFLAGS} variable.

@end table

@c ----------------------------------------------------------------------------

@node Libraries
@chapter Libraries
@cindex Libraries

Often you will want to use a particular set of Mercury modules
in more than one program.  The Mercury implementation
includes support for developing libraries, i.e.@: sets of Mercury modules
intended for reuse.  It allows separate compilation of libraries
and, on many platforms, it supports shared object libraries.

@menu
* Writing libraries::
* Building with mmc --make::
* Building with Mmake::
* Libraries and the Java grade::
* Libraries and the C# grade::
@end menu

@node Writing libraries
@section Writing libraries

A Mercury library is identified by a top-level module,
which should contain all of the modules in that library as submodules.
It may be as simple as this @file{mypackage.m} file:

@example
:- module mypackage.
:- interface.
:- include_module foo.
:- include_module bar.
:- include_module baz.
@end example

@noindent
This defines a module @samp{mypackage} containing submodules
@samp{mypackage.foo}, @samp{mypackage.bar}, and @samp{mypackage.baz}.

It is also possible to build libraries of unrelated modules,
so long as the top-level module imports all the necessary modules.
For example:

@example
:- module blah.
:- implementation.
:- import_module fee.
:- import_module fie.
:- import_module foe.
:- import_module fum.
@end example

@noindent
This example defines a module @samp{blah},
which has no functionality of its own,
and which is just used for grouping the unrelated modules
@samp{fee}, @samp{fie}, @samp{foe}, and @samp{fum}.
To avoid a warning about the interface of this module being empty,
this module would have to be compiled with @samp{--no-warn-nothing-exported}.
Alternatively, the library could of course just export something,
such as a predicate that returns its version number.

Generally it is better style for each library
to consist of a single module which encapsulates its submodules,
as in the first example,
rather than just a group of unrelated modules,
as in the second example.

@node Building with mmc --make
@section Building with mmc --make

@menu
* Building and installing libraries with mmc --make::
* Using installed libraries with mmc --make::
* Using non-installed libraries with mmc --make::
@end menu

@node Building and installing libraries with mmc --make
@subsection Building and installing libraries with mmc --make

To build a library from the source @samp{mypackage.m}
(and other included modules),
run @samp{mmc} with the following arguments:

@example
mmc --make libmypackage
@end example

@noindent
@samp{mmc} will create static (non-shared) object libraries
and, on most platforms, shared object libraries;
however, we do not yet support the creation of dynamic link
libraries (DLLs) on Windows.
Use the @samp{mmc} option @samp{--lib-linkage} to specify which versions of the
library should be created: @samp{shared} or @samp{static}. The
@samp{--lib-linkage} option can be specified multiple times.
In our example, the files @samp{libmypackage.a} and @samp{libmypackage.so}
should appear in the current directory.
(On macOS @samp{libmypackage.dylib} will appear instead of
@samp{libmypackage.so}.)

Other programs can more easily use a library that is installed.
To install the library, issue the following command:

@example
mmc --make --install-prefix <dir> libmypackage.install
@end example

@noindent
@samp{mmc} will create the directory @samp{<dir>/lib/mercury} and install the
library there.
The library will be compiled in all valid grades and with all interface files.
Because several grades are usually compiled, installing the library can be a lengthy
process.
You can specify the set of installed grades using the option
@samp{--no-libgrade} followed by @samp{--libgrade <grade>} for all grades you
wish to install.

If no @samp{--install-prefix <dir>} is specified, the library will be installed
in the standard location, next to the Mercury standard library.

@node Using installed libraries with mmc --make
@subsection Using installed libraries with mmc --make
@cindex Libraries, linking with
@findex --mld
@findex --mercury-library-directory
@findex --ml
@findex --mercury-library

Once a library is installed, it can be used by running @samp{mmc} with the
following options:

@example
mmc @dots{} --ml mypackage @dots{} --ml myotherlib @dots{} --ml my_yet_another_lib @dots{}
@end example

@noindent
If a library was installed in a different place (using @samp{--install-prefix
<dir>}), you will also need to add this option:

@example
mmc @dots{} --mld <dir>/lib/mercury @dots{}
@end example

@noindent
Note that @samp{/lib/mercury} has to be added to the searched path. The
@samp{--mld} option can be used several times to add more directories to the
library search path.

You can also specify whether to link executables with the shared or static
versions of Mercury libraries using @samp{--mercury-linkage shared} or
@samp{--mercury-linkage static}.

@node Using non-installed libraries with mmc --make
@subsection Using non-installed libraries with mmc --make
@cindex Libraries, linking with
@findex --search-lib-files-dir
@findex --init-file
@findex --link-object

Suppose the user wants to link against library @samp{mypackage} without
installing the library. The source of the library is stored in the directory
@samp{<dir>} and that the library has been properly built using @samp{mmc
--make libmypackage}. To link against the library, the following options have
to be added to @samp{mmc}:

@example
mmc @dots{} --search-lib-files-dir <dir> \
        --init-file <dir>/mypackage.init \
        --link-object <dir>/libmypackage.a \
    @dots{}
@end example

@noindent
Note that the option @samp{--ml} is not used.

You need to make sure the library @samp{libmypackage.a} and the main program
were compiled in the same grade.

If you need to experiment with more grades, be sure to build the library in all
the grades (building several times using @samp{mmc --grade <grade> --make
libmypackage}) and use the @samp{libmypackage.a} that is compatible with your
main program's grade:

@example
mmc @dots{} --use-grade-subdirs \
        --grade <grade> \
        --search-lib-files-dir <dir> \
        --init-file <dir>/mypackage.init \
        --link-object <dir>/Mercury/<grade>/*/Mercury/lib/libmypackage.a \
    @dots{}
@end example

@node Building with Mmake
@section Building with Mmake

@menu
* Building libraries with Mmake::
* Installing libraries with Mmake::
* Using libraries with Mmake::
@end menu

@node Building libraries with Mmake
@subsection Building libraries with Mmake
@cindex Shared objects
@cindex Shared libraries
@cindex Static libraries
@cindex Position independent code
@cindex PIC (position independent code)

Generally Mmake will do most of the work of building
libraries automatically.
Here is a sample @code{Mmakefile} for creating a library.

@example
MAIN_TARGET = libmypackage
depend: mypackage.depend
@end example

The Mmake target @samp{lib@var{foo}} is a builtin target for
creating a library whose top-level module is @samp{@var{foo}.m}.
The automatically generated Mmake rules for the target @samp{lib@var{foo}}
will create all the files needed to use the library.
(You will need to run @samp{mmake @var{foo}.depend} first
to generate the module dependency information.)

Mmake will create static (non-shared) object libraries
and, on most platforms, shared object libraries;
however, we do not yet support the creation of dynamic link
libraries (DLLs) on Windows.
Static libraries are created using the standard tools @command{ar} and
@command{ranlib}.
Shared libraries are created using the @samp{--make-shared-lib}
option to @samp{ml}.
The automatically generated Make rules for @samp{libmypackage}
will look something like this:

@example
libmypackage: libmypackage.a libmypackage.so \
                $(mypackage.ints) $(mypackage.int3s) \
                $(mypackage.opts) $(mypackage.trans_opts) mypackage.init

libmypackage.a: $(mypackage.os)
        rm -f libmypackage.a
        $(AR) $(ARFLAGS) libmypackage.a $(mypackage.os) $(MLOBJS)
        $(RANLIB) $(RANLIBFLAGS) mypackage.a

libmypackage.so: $(mypackage.pic_os)
        $(ML) $(MLFLAGS) --make-shared-lib -o libmypackage.so \
                $(mypackage.pic_os) $(MLPICOBJS) $(MLLIBS)

libmypackage.init:
        @dots{}

clean:
        rm -f libmypackage.a libmypackage.so
@end example
@vindex AR
@vindex ARFLAGS
@vindex MLOBJS
@vindex RANLIB
@vindex RANLIBFLAGS
@vindex ML
@vindex MLFLAGS
@vindex MLPICOBJS
@vindex MLLIBS

If necessary, you can override the default definitions of the variables
such as @samp{ML}, @samp{MLFLAGS}, @samp{MLPICOBJS}, and @samp{MLLIBS}
to customize the way shared libraries are built.  Similarly @samp{AR},
@samp{ARFLAGS}, @samp{MLOBJS}, @samp{RANLIB}, and @samp{RANLIBFLAGS}
control the way static libraries are built.  (The @samp{MLOBJS} variable
is supposed to contain a list of additional object files to link into
the library, while the @samp{MLLIBS} variable should contain a list of
@samp{-l} options naming other libraries used by this library.
@samp{MLPICOBJS} is described below.)

Note that to use a library, as well as the shared or static object library,
you also need the interface files.  That is why the
@samp{libmypackage} target builds @samp{$(mypackage.ints)} and
@samp{$(mypackage.int3s)}.
If the people using the library are going to use intermodule
optimization, you will also need the intermodule optimization interfaces.
The @samp{libmypackage} target will build @samp{$(mypackage.opts)} if
@samp{--intermodule-optimization} is specified in your @samp{MCFLAGS}
variable (this is recommended).
@findex --intermodule-optimization
Similarly, if the people using the library are going to use transitive
intermodule optimization, you will also need the transitive intermodule
optimization interfaces (@samp{$(mypackage.trans_opt)}).
These will be built if @samp{--trans-intermod-opt} is specified in your
@samp{MCFLAGS} variable.
@findex --trans-intermod-opt

In addition, with certain compilation grades, programs will need to
execute some startup code to initialize the library; the
@samp{mypackage.init} file contains information about initialization
code for the library.  The @samp{libmypackage} target will build this file.

On some platforms, shared objects must be created using position independent
code (PIC), which requires passing some special options to the C compiler.
On these platforms, @code{Mmake} will create @file{.pic_o} files,
and @samp{$(mypackage.pic_os)} will contain a list of the @file{.pic_o} files
for the library whose top-level module is @samp{mypackage}.
In addition, @samp{$(MLPICOBJS)} will be set to @samp{$MLOBJS} with
all occurrences of @samp{.o} replaced with @samp{.pic_o}.
On other platforms, position independent code is the default,
so @samp{$(mypackage.pic_os)} will just be the same as @samp{$(mypackage.os)},
which contains a list of the @file{.o} files for that module,
and @samp{$(MLPICOBJS)} will be the same as @samp{$(MLOBJS)}.

@node Installing libraries with Mmake
@subsection Installing libraries with Mmake

@samp{mmake} has support for alternative library directory hierarchies.
These have the same structure as the @file{@var{prefix}/lib/mercury} tree,
including the different subdirectories for different grades and different
machine architectures.

In order to support the installation of a library into such a tree, you
simply need to specify (e.g.@: in your @file{Mmakefile}) the path prefix
and the list of grades to install:

@example
INSTALL_PREFIX = /my/install/dir
LIBGRADES = asm_fast asm_fast.gc.tr.debug
@end example
@vindex INSTALL_PREFIX
@vindex LIBGRADES

This specifies that libraries should be installed in
@file{/my/install/dir/lib/mercury}, in the default grade plus
@samp{asm_fast} and @samp{asm_fast.gc.tr.debug}.
If @samp{INSTALL_PREFIX} is not specified, @samp{mmake} will attempt to
install the library in the same place as the standard Mercury libraries.
If @samp{LIBGRADES} is not specified, @samp{mmake} will use the Mercury
compiler's default set of grades, which may or may not correspond to the
actual set of grades in which the standard Mercury libraries were installed.

To actually install a library @samp{lib@var{foo}}, use the @samp{mmake}
target @samp{lib@var{foo}.install}.
This also installs all the needed interface files, and (if intermodule
optimisation is enabled) the relevant intermodule optimisation files.

One can override the list of grades to install for a given library
@samp{lib@var{foo}} by setting the @samp{LIBGRADES-@var{foo}} variable,
or add to it by setting @samp{EXTRA_LIBGRADES-@var{foo}}.

The command used to install each file is specified by @samp{INSTALL}.
If @samp{INSTALL} is not specified, @samp{cp} will be used.
@vindex INSTALL

The command used to create directories is specified by @samp{INSTALL_MKDIR}.
If @samp{INSTALL_MKDIR} is not specified, @samp{mkdir -p} will be used.
@vindex INSTALL_MKDIR

Note that currently it is not possible to set the installation prefix
on a library-by-library basis.

@node Using libraries with Mmake
@subsection Using libraries with Mmake
@cindex Libraries, linking with

Once a library is installed, using it is easy.
Suppose the user wishes to use the library @samp{mypackage} (installed
in the tree rooted at @samp{/some/directory/mypackage}) and the library
@samp{myotherlib} (installed in the tree rooted at
@samp{/some/directory/myotherlib}).
The user need only set the following Mmake variables:

@example
EXTRA_LIB_DIRS = /some/directory/mypackage/lib/mercury \
                /some/directory/myotherlib/lib/mercury
EXTRA_LIBRARIES = mypackage myotherlib
@end example
@vindex EXTRA_LIBRARIES
@vindex EXTRA_LIB_DIRS

@findex --intermodule-optimization
When using @samp{--intermodule-optimization} with a library which
uses the C interface, it may be necessary to add @samp{-I} options to
@samp{MGNUCFLAGS} so that the C compiler can find any header files
used by the library's C code.

Mmake will ensure that the appropriate directories are searched for
the relevant interface files, module initialisation files, compiled
libraries, etc.

Beware that the directory name that you must use in @samp{EXTRA_LIB_DIRS}
or as the argument of the @samp{--mld} option is not quite the same as
the name that was specified in the @samp{INSTALL_PREFIX} when the library
was installed --- the name needs to have @samp{/lib/mercury} appended.

One can specify extra libraries to be used on a program-by-program
basis.  For instance, if the program @samp{foo} also uses the library
@samp{mylib4foo}, but the other programs governed by the Mmakefile don't,
then one can declare:

@example
EXTRA_LIBRARIES-foo = mylib4foo
@end example

@node Libraries and the Java grade
@section Libraries and the Java grade
@cindex jar files
@cindex Java libraries

To create or install a library in the Java grade, specify that you want to
use the Java grade and use @samp{mmc --make}.
Mmake does @emph{not} support Java targets.

Libraries are compiled to class files that are added to a Java archive (JAR)
file whose name has the form @file{@var{library-name}.jar}.

@node Libraries and the C# grade
@section Libraries and the C# grade
@cindex C# libraries

To create or install a library in the C# grade, specify that you want to use the
C# grade and use @samp{mmc --make}.
Mmake does @emph{not} support C# targets.

Libraries are complied to a dynamic link library assembly whose name has the
form @file{@var{library-name}.dll}.

@c ----------------------------------------------------------------------------

@node Debugging
@chapter Debugging
@cindex Debugging
@cindex Tracing
@pindex mdb

@menu
* Quick overview::
* GNU Emacs interface::
* Tracing of Mercury programs::
* Preparing a program for debugging::
* Tracing optimized code::
* Mercury debugger invocation::
* Mercury debugger concepts::
* User defined events::
* I/O tabling::
* Debugger commands::
* Declarative debugging::
* Trace counts::
@end menu

@node Quick overview
@section Quick overview

This section gives a quick and simple guide to getting
started with the debugger.  The remainder of this chapter
contains more detailed documentation.

To use the debugger, you must
first compile your program with debugging enabled.
You can do this by using
one of the @samp{--debug} or @samp{--decl-debug} options
when invoking @samp{mmc},
or by including @samp{GRADEFLAGS = --debug}
or @samp{GRADEFLAGS = --decl-debug}
in your @file{Mmakefile}.

@findex --debug
@example
bash$ mmc --debug hello.m
@end example

Once you have compiled with debugging enabled, you can use the @samp{mdb}
command to invoke your program under the debugger:

@pindex mdb
@example
bash$ mdb ./hello arg1 arg2 @dots{}
@end example

Any arguments (such as @samp{arg1 arg2 @dots{}} in this example)
that you pass after the program name will be given as arguments
to the program.

The debugger will print a start-up message
and will then show you the first trace event,
namely the call to @code{main/2}:

@example
       1:      1  1 CALL pred hello:main/2-0 (det)
                         hello.m:13
mdb>
@end example

By hitting enter at the @samp{mdb>} prompt, you can step through
the execution of your program to the next trace event:

@example
       2:      2  2 CALL pred io:write_string/3-0 (det)
                         io.m:2837 (hello.m:14)
mdb>
Hello, world
       3:      2  2 EXIT pred io:write_string/3-0 (det)
                         io.m:2837 (hello.m:14)
mdb>

@end example

For each trace event, the debugger prints out several pieces of information.
The three numbers at the start of the display are
the event number, the call sequence number, and the call depth.
(You don't really need to pay too much attention to those.)
They are followed by the event type (e.g.@: @samp{CALL} or @samp{EXIT}).
After that comes the identification of the procedure
in which the event occurred, consisting of the module-qualified name
of the predicate or function to which the procedure belongs,
followed by its arity, mode number and determinism.
This may sometimes be followed by a ``path''
(@pxref{Tracing of Mercury programs}).
At the end is the file name and line number of the
called procedure and (if available) also the file name
and line number of the call.

The most useful @code{mdb} commands have single-letter abbreviations.
The @samp{alias} command will show these abbreviations:

@example
mdb> alias
?      =>    help
EMPTY  =>    step
NUMBER =>    step
P      =>    print *
b      =>    break
c      =>    continue
d      =>    stack
f      =>    finish
g      =>    goto
h      =>    help
p      =>    print
r      =>    retry
s      =>    step
v      =>    vars
@end example

The @samp{P} or @samp{print *} command will display the values
of any live variables in scope.
The @samp{f} or @samp{finish} command can be used if you want
to skip over a call.
The @samp{b} or @samp{break} command can be used to set breakpoints.
The @samp{d} or @samp{stack} command will display the call stack.
The @samp{quit} command will exit the debugger.

That should be enough to get you started.
But if you are a GNU Emacs user,
you should strongly consider using the Emacs interface to @samp{mdb} ---
see the following section.

For more information about the available commands,
use the @samp{?} or @samp{help} command, or see @ref{Debugger commands}.

@node GNU Emacs interface
@section GNU Emacs interface
@cindex GNU Emacs
@cindex Emacs

As well as the command-line debugger, mdb,
there is also an Emacs interface to this debugger.
Note that the Emacs interface only works with GNU Emacs, not with XEmacs.

With the Emacs interface,
the debugger will display your source code as you trace through it,
marking the line that is currently being executed,
and allowing you to easily set breakpoints
on particular lines in your source code.
You can have separate windows for the debugger prompt,
the source code being executed,
and for the output of the program being executed.
In addition, most of the mdb commands are accessible via menus.

To start the Emacs interface,
you first need to put the following text
in the @file{.emacs} file in your home directory,
replacing ``/usr/local/mercury-1.0''
with the directory that your Mercury implementation was installed in:

@example
(setq load-path (cons (expand-file-name
  "/usr/local/mercury-1.0/lib/mercury/elisp")
  load-path))
(autoload 'mdb "gud" "Invoke the Mercury debugger" t)
@end example

Build your program with debugging enabled, as described
in @ref{Quick overview} or @ref{Preparing a program for debugging}.
Then start up Emacs, e.g.@: using the command @samp{emacs},
and type @kbd{M-x mdb @key{RET}}.
Emacs will then prompt you for the mdb command to invoke

@example
Run mdb (like this): mdb
@end example

@noindent
and you should type in the name of the program that you want to debug
and any arguments that you want to pass to it:

@example
Run mdb (like this): mdb ./hello arg1 arg2 @dots{}
@end example

Emacs will then create several ``buffers'': one for the debugger prompt,
one for the input and output of the program being executed,
and one or more for the source files.
By default, Emacs will split the display into two parts, called ``windows'',
so that two of these buffers will be visible.
You can use the command @kbd{C-x o} to switch between windows,
and you can use the command @kbd{C-x 2} to split a window into two windows.
You can use the ``Buffers'' menu
to select which buffer is displayed in each window.

If you are using X-Windows, then it is a good idea
to set the Emacs variable @samp{pop-up-frames} to @samp{t} before starting mdb,
since this will cause each buffer
to be displayed in a new ``frame'' (i.e.@: a new X window).
You can set this variable interactively
using the @samp{set-variable} command,
i.e.@: @kbd{M-x set-variable @key{RET} pop-up-frames @key{RET} t @key{RET}}.
Or you can put @samp{(setq pop-up-frames t)}
in the @file{.emacs} file in your home directory.

For more information on buffers, windows, and frames,
see the Emacs documentation.

Another useful Emacs variable is @samp{gud-mdb-directories}.
This specifies the list of directories to search for source files.
You can use a command such as

@example
M-x set-variable @key{RET}
gud-mdb-directories @key{RET}
(list "/foo/bar" "../other" "/home/guest") @key{RET}
@end example

@noindent
to set it interactively, or you can put a command like

@example
(setq gud-mdb-directories
  (list "/foo/bar" "../other" "/home/guest"))
@end example

@noindent
in your @file{.emacs} file.

At each trace event,
the debugger will search for the source file corresponding to that event,
first in the same directory as the program,
and then in the directories specified
by the @samp{gud-mdb-directories} variable.
It will display the source file,
with the line number corresponding to that trace event
marked by an arrow (@samp{=>}) at the start of the line.

Several of the debugger features can be accessed
by moving the cursor to the relevant part of the source code
and then selecting a command from the menu.
You can set a break point on a line
by moving the cursor to the appropriate line in your source code
(e.g.@: with the arrow keys,
or by clicking the mouse there), and then
selecting the ``Set breakpoint on line'' command
from the ``Breakpoints'' sub-menu of the ``MDB'' menu.
You can set a breakpoint on a procedure
by moving the cursor over the procedure name and then
selecting the ``Set breakpoint on procedure'' command from the same menu.
And you can display the value of a variable
by moving the cursor over the variable name and then
selecting the ``Print variable'' command
from the ``Data browsing'' sub-menu of the ``MDB'' menu.
Most of the menu commands also have keyboard short-cuts,
which are displayed on the menu.

Note that @samp{mdb}'s @samp{context} and @samp{user_event_context} commands
should not be used if you are using the Emacs interface,
otherwise the Emacs interface
won't be able to parse the file names and line numbers that @samp{mdb} outputs,
and so it won't be able to highlight the correct location in the source code.

@node Tracing of Mercury programs
@section Tracing of Mercury programs
@cindex Tracing

The Mercury debugger is based on a modified version of the box model
on which the four-port debuggers of most Prolog systems are based.
Such debuggers abstract the execution of a program into a sequence,
also called a @dfn{trace}, of execution events of various kinds.
The four kinds of events supported by most Prolog systems (their @emph{ports})
are

@cindex debugger trace events
@cindex trace events
@cindex call (trace event)
@cindex exit (trace event)
@cindex redo (trace event)
@cindex fail (trace event)
@table @emph
@item call
A call event occurs just after a procedure has been called,
and control has just reached the start of the body of the procedure.
@item exit
An exit event occurs when a procedure call has succeeded,
and control is about to return to its caller.
@item redo
A redo event occurs when all computations
to the right of a procedure call have failed,
and control is about to return to this call
to try to find alternative solutions.
@item fail
A fail event occurs when a procedure call has run out of alternatives,
and control is about to return to the rightmost computation to its left
that still has possibly successful alternatives left.
@end table

Mercury also supports these four kinds of events,
but not all events can occur for every procedure call.
Which events can occur for a procedure call, and in what order,
depend on the determinism of the procedure.
The possible event sequences for procedures of the various determinisms
are as follows.

@table @emph
@item nondet procedures
a call event, zero or more repeats of (exit event, redo event), and a fail event
@item multi procedures
a call event, one or more repeats of (exit event, redo event), and a fail event
@item semidet and cc_nondet procedures
a call event, and either an exit event or a fail event
@item det and cc_multi procedures
a call event and an exit event
@item failure procedures
a call event and a fail event
@item erroneous procedures
a call event
@end table

In addition to these four event types,
Mercury supports @emph{exception} events.
An exception event occurs
when an exception has been thrown inside a procedure,
and control is about to propagate this exception to the caller.
An exception event can replace the final exit or fail event
in the event sequences above
or, in the case of erroneous procedures,
can come after the call event.

Besides the event types call, exit, redo, fail and exception,
which describe the @emph{interface} of a call,
Mercury also supports several types of events
that report on what is happening @emph{internal} to a call.
Each of these internal event types has an associated parameter called a path.
The internal event types are:

@cindex cond (trace event)
@cindex then (trace event)
@cindex else (trace event)
@cindex disj (trace event)
@cindex switch (trace event)
@cindex neg_enter (trace event)
@cindex neg_fail (trace event)
@cindex neg_success (trace event)
@table @emph
@item cond
A cond event occurs when execution reaches
the start of the condition of an if-then-else.
The path associated with the event specifies which if-then-else this is.
@item then
A then event occurs when execution reaches
the start of the then part of an if-then-else.
The path associated with the event specifies which if-then-else this is.
@item else
An else event occurs when execution reaches
the start of the else part of an if-then-else.
The path associated with the event specifies which if-then-else this is.
@item disj
A disj event occurs when execution reaches
the start of a disjunct in a disjunction.
The path associated with the event specifies
which disjunct of which disjunction this is.
@item switch
A switch event occurs when execution reaches
the start of one arm of a switch
(a disjunction in which each disjunct unifies a bound variable
with different function symbol).
The path associated with the event specifies
which arm of which switch this is.
@item neg_enter
A neg_enter event occurs when execution reaches
the start of a negated goal.
The path associated with the event specifies which negation goal this is.
@item neg_fail
A neg_fail event occurs when
a goal inside a negation succeeds,
which means that its negation fails.
The path associated with the event specifies which negation goal this is.
@item neg_success
A neg_success event occurs when
a goal inside a negation fails,
which means that its negation succeeds.
The path associated with the event specifies which negation goal this is.
@c @item pragma_first
@c @item pragma_later
@end table

@cindex path
@cindex goal path
A goal path is a sequence of path components separated by semicolons.
Each path component is one of the following:

@table @code
@item c@var{num}
The @var{num}'th conjunct of a conjunction.
@item d@var{num}
The @var{num}'th disjunct of a disjunction.
@item s@var{num}
The @var{num}'th arm of a switch.
@item ?
The condition of an if-then-else.
@item t
The then part of an if-then-else.
@item e
The else part of an if-then-else.
@item ~
The goal inside a negation.
@item q!
The goal inside an existential quantification or other scope
that changes the determinism of the goal.
@item q
The goal inside an existential quantification or other scope
that doesn't change the determinism of the goal.
@end table

A goal path describes the position of a goal
inside the body of a procedure definition.
For example, if the procedure body is a disjunction
in which each disjunct is a conjunction,
then the goal path @samp{d2;c3;} denotes
the third conjunct within the second disjunct.
If the third conjunct within the second disjunct is an atomic goal
such as a call or a unification,
then this will be the only goal with whose path has @samp{d2;c3;} as a prefix.
If it is a compound goal,
then its components will all have paths that have @samp{d2;c3;} as a prefix,
e.g.@: if it is an if-then-else,
then its three components will have the paths
@samp{d2;c3;?;}, @samp{d2;c3;t;} and @samp{d2;c3;e;}.

Goal paths refer to the internal form of the procedure definition.
When debugging is enabled
(and the option @samp{--trace-optimized} is not given),
the compiler will try to keep this form
as close as possible to the source form of the procedure,
in order to make event paths as useful as possible to the programmer.
Due to the compiler's flattening of terms,
and its introduction of extra unifications to implement calls in implied modes,
the number of conjuncts in a conjunction will frequently differ
between the source and internal form of a procedure.
This is rarely a problem, however, as long as you know about it.
Mode reordering can be a bit more of a problem,
but it can be avoided by writing single-mode predicates and functions
so that producers come before consumers.
The compiler transformation that
potentially causes the most trouble in the interpretation of goal paths
is the conversion of disjunctions into switches.
In most cases, a disjunction is transformed into a single switch,
and it is usually easy to guess, just from the events within a switch arm,
just which disjunct the switch arm corresponds to.
Some cases are more complex;
for example, it is possible for a single disjunction
to be transformed into several switches,
possibly with other, smaller disjunctions inside them.
In such cases, making sense of goal paths
may require a look at the internal form of the procedure.
You can ask the compiler to generate a file
with the internal forms of the procedures in a given module
by including the options @samp{-dfinal -Dpaths} on the command line
when compiling that module.

@node Preparing a program for debugging
@section Preparing a program for debugging

When you compile a Mercury program, you can specify
whether you want to be able to run the Mercury debugger on the program or not.
If you do, the compiler embeds calls to the Mercury debugging system
into the executable code of the program,
at the execution points that represent trace events.
At each event, the debugging system decides
whether to give control back to the executable immediately,
or whether to first give control to you,
allowing you to examine the state of the computation and issue commands.

Mercury supports two broad ways of preparing a program for debugging.
The simpler way is to compile a program in a debugging grade,
which you can do directly by specifying a grade
that includes the word ``debug'' or ``decldebug''
(e.g.@: @samp{asm_fast.gc.debug}, or @samp{asm_fast.gc.decldebug}),
or indirectly by specifying one of the @samp{--debug} or @samp{--decl-debug}
grade options to the compiler, linker, and other tools
(in particular @code{mmc}, @code{mgnuc}, @code{ml}, and @code{c2init}).
If you follow this way,
and accept the default settings of the various compiler options
that control the selection of trace events (which are described below),
you will be assured of being able to get control
at every execution point that represents a potential trace event,
which is very convenient.

The ``decldebug'' grades improve declarative debugging by allowing the user
to track the source of subterms (see @ref{Improving the search}).
Doing this increases the size of executables,
so these grades should only be used when you need
the subterm dependency tracking feature of the declarative debugger.
Note that declarative debugging,
with the exception of the subterm dependency tracking features,
also works in the .debug grades.

@c XXX mention ssdebug grades when ready

The two drawbacks of using a debugging grade
are the large size of the resulting executables,
and the fact that often you discover that you need to debug a big program
only after having built it in a non-debugging grade.
This is why Mercury also supports another way
to prepare a program for debugging,
one that does not require the use of a debugging grade.
With this way, you can decide, individually for each module,
which of four trace levels,
@samp{none}, @samp{shallow}, @samp{deep}, and @samp{rep}
you want to compile them with:

@cindex debugger trace level
@cindex trace level
@cindex shallow tracing
@cindex deep tracing
@table @samp
@item none
A procedure compiled with trace level @samp{none}
will never generate any events.
@item deep
A procedure compiled with trace level @samp{deep}
will always generate all the events requested by the user.
By default, this is all possible events,
but you can tell the compiler that
you are not interested in some kinds of events
via compiler options (see below).
However, declarative debugging requires all events to be generated
if it is to operate properly,
so do not disable the generation of any event types
if you want to use declarative debugging.
For more details see @ref{Declarative debugging}.
@item rep
This trace level is the same as trace level @samp{deep},
except that a representation of the module is stored in the executable
along with the usual debugging information.
The declarative debugger can use this extra information
to help it avoid asking unnecessary questions,
so this trace level has the effect of better declarative debugging
at the cost of increased executable size.
For more details see @ref{Declarative debugging}.
@item shallow
A procedure compiled with trace level @samp{shallow}
will generate interface events
if it is called from a procedure compiled with trace level @samp{deep},
but it will never generate any internal events,
and it will not generate any interface events either
if it is called from a procedure compiled with trace level @samp{shallow}.
If it is called from a procedure compiled with trace level @samp{none},
the way it will behave is dictated by whether
its nearest ancestor whose trace level is not @samp{none}
has trace level @samp{deep} or @samp{shallow}.
@end table

The intended uses of these trace levels are as follows.

@table @samp
@item deep
You should compile a module with trace level @samp{deep}
if you suspect there may be a bug in the module,
or if you think that being able to examine what happens inside that module
can help you locate a bug.
@item rep
You should compile a module with trace level @samp{rep}
if you suspect there may be a bug in the module,
you wish to use the full power of the declarative debugger,
and you are not concerned about the size of the executable.
@item shallow
You should compile a module with trace level @samp{shallow}
if you believe the code of the module is reliable and unlikely to have bugs,
but you still want to be able to get control at calls to and returns from
any predicates and functions defined in the module,
and if you want to be able to see the arguments of those calls.
@item none
You should compile a module with trace level @samp{none}
only if you are reasonably confident that the module is reliable,
and if you believe that knowing what calls other modules make to this module
would not significantly benefit you in your debugging.
@end table

In general, it is a good idea for most or all modules
that can be called from modules compiled with trace level
@samp{deep} or @samp{rep}
to be compiled with at least trace level @samp{shallow}.

You can control what trace level a module is compiled with
by giving one of the following compiler options:

@table @samp
@item --trace shallow
This always sets the trace level to @samp{shallow}.
@item --trace deep
This always sets the trace level to @samp{deep}.
@item --trace rep
This always sets the trace level to @samp{rep}.
@item --trace minimum
In debugging grades, this sets the trace level to @samp{shallow};
in non-debugging grades, it sets the trace level to @samp{none}.
@item --trace default
In debugging grades, this sets the trace level to @samp{deep};
in non-debugging grades, it sets the trace level to @samp{none}.
@end table

As the name implies, the last alternative is the default,
which is why by default you get
no debugging capability in non-debugging grades
and full debugging capability in debugging grades.
The table also shows that in a debugging grade,
no module can be compiled with trace level @samp{none}.

@strong{Important note}:
If you are not using a debugging grade, but you compile some modules with
a trace level other than none,
then you must also pass the @samp{--trace} (or @samp{-t}) option
to c2init and to the Mercury linker.
If you are using Mmake, then you can do this by including @samp{--trace}
in the @samp{MLFLAGS} variable.

If you are using Mmake, then you can also set the compilation options
for a single module named @var{Module} by setting the Mmake variable
@samp{MCFLAGS-@var{Module}}.  For example, to compile the file
@file{foo.m} with deep tracing, @file{bar.m} with shallow tracing,
and everything else with no tracing, you could use the following:

@example
MLFLAGS     = --trace
MCFLAGS-foo = --trace deep
MCFLAGS-bar = --trace shallow
@end example

@node Tracing optimized code
@section Tracing optimized code

@c XXX we should consider where to document --suppress-trace
@c and --stack-trace-higher-order

By default, all trace levels other than @samp{none}
turn off all compiler optimizations
that can affect the sequence of trace events generated by the program,
such as inlining.
If you are specifically interested in
how the compiler's optimizations affect the trace event sequence,
you can specify the option @samp{--trace-optimized},
which tells the compiler that it does not have to disable those optimizations.
(A small number of low-level optimizations
have not yet been enhanced to work properly in the presence of tracing,
so the compiler disables these even if @samp{--trace-optimized} is given.)

@node Mercury debugger invocation
@section Mercury debugger invocation

The executables of Mercury programs
by default do not invoke the Mercury debugger
even if some or all of their modules were compiled with some form of tracing,
and even if the grade of the executable is a debugging grade.
This is similar to the behaviour of executables
created by the implementations of other languages;
for example the executable of a C program compiled with @samp{-g}
does not automatically invoke gdb or dbx etc when it is executed.

Unlike those other language implementations,
when you invoke the Mercury debugger @samp{mdb},
you invoke it not just with the name of an executable
but with the command line you want to debug.
If something goes wrong when you execute the command

@example
@var{prog} @var{arg1} @var{arg2} @dots{}
@end example

and you want to find the cause of the problem,
you must execute the command

@example
mdb [@var{mdb-options}] @var{prog} @var{arg1} @var{arg2} @dots{}
@end example

because you do not get a chance
to specify the command line of the program later.

When the debugger starts up, as part of its initialization
it executes commands from the following three sources, in order:
@enumerate
@item
@vindex MERCURY_DEBUGGER_INIT
The file named by the @env{MERCURY_DEBUGGER_INIT} environment variable.
Usually, @samp{mdb} sets this variable to point to a file
that provides documentation for all the debugger commands
and defines a small set of aliases.
However, if @env{MERCURY_DEBUGGER_INIT} is already defined
when @samp{mdb} is invoked, it will leave its value unchanged.
You can use this override ability to provide alternate documentation.
If the file named by @env{MERCURY_DEBUGGER_INIT} cannot be read,
@samp{mdb} will print a warning,
since in that case, that usual online documentation will not be available.
@item
@cindex mdbrc
@cindex .mdbrc
The file named @file{.mdbrc} in your home directory.
You can put your usual aliases and settings here.
@item
The file named @file{.mdbrc} in the current working directory.
You can put program-specific aliases and settings here.
@end enumerate
mdb will ignore any lines starting with the character @samp{#}
in any of the above mentioned files.

mdb accepts the following options from the command line.  The options
should be given to mdb before the name of the executable to be debugged.

@table @code
@item -t @var{file-name}, --tty @var{file-name}
@findex --tty (mdb option)
Redirect all of the I/O for the debugger to the device
specified by @var{file-name}.
The I/O for the program being debugged will not be redirected.
This option allows the contents of a file to be piped to the program being
debugged and not to mdb.
For example, on Linux the command
@example
mdb -t /dev/tty ./myprog < myinput
@end example
will cause the contents of @file{myinput} to be piped to the program
@samp{myprog}, but mdb will read its input from the terminal.
@sp 1
@item -w, --window, --mdb-in-window
@findex --mdb-in-window (mdb option)
@findex --window (mdb option)
Run mdb in a new window, with mdb's I/O going to that
window, but with the program's I/O going to the current
terminal.  Note that this will not work on all systems.
@sp 1
@item --program-in-window
@findex --program-in-window (mdb option)
Run the program in a new window, with the program's I/O
going to that window, but with mdb's I/O going to the
current terminal.  Note that input and output redirection
will not work with the @samp{--program-in-window} option.
@samp{--program-in-window} will work on most Unix systems
running the X Window System, even those for which
@samp{--mdb-in-window} is not supported.
@sp 1
@item -c @var{window-command}, --window-command @var{window-command}
@findex --window-command (mdb option)
Specify the command used by the @samp{--program-in-window}
option for executing a command in a new window.
The default such command is @samp{xterm -e}.
@end table

@node Mercury debugger concepts
@section Mercury debugger concepts

The operation of the Mercury debugger @samp{mdb}
is based on the following concepts.

@table @emph
@item break points
@cindex debugger break points
@cindex break points
@cindex spy points
The user may associate a break point
with some events that occur inside a procedure;
the invocation condition of the break point says which events these are.
The four possible invocation conditions (also called scopes) are:
@sp 1
@itemize @bullet
@item
the call event,
@item
all interface events,
@item
all events, and
@item
the event at a specific point in the procedure.
@end itemize
@sp 1
The effect of a break point depends on the state of the break point.
@sp 1
@itemize @bullet
@item
If the state of the break point is @samp{stop},
execution will stop and user interaction will start
at any event within the procedure that matches the invocation conditions,
unless the current debugger command has specifically disabled this behaviour
(see the concept @samp{strict commands} below).
@sp 1
@item
If the state of the break point is @samp{print},
the debugger will print any event within the procedure
that matches the invocation conditions,
unless the current debugger command has specifically disabled this behaviour
(see the concept @samp{print level} below).
@end itemize
@sp 1
Neither of these will happen if the break point is disabled.
@sp 1
Every break point has a print list.
Every time execution stops at an event that matches the breakpoint,
mdb implicitly executes a print command for each element
in the breakpoint's print list.
A print list element can be the word @samp{goal},
which causes the goal to the printed as if by @samp{print goal};
it can be the word @samp{*},
which causes all the variables to the printed as if by @samp{print *};
or it can be the name or number of a variable,
possibly followed (without white space) by a term path,
which causes the specified variable or part thereof to the printed
as if the element were given as an argument to the @samp{print} command.
@sp 1
@item strict commands
@cindex strict debugger commands
When a debugger command steps over some events
without user interaction at those events,
the @emph{strictness} of the command controls whether
the debugger will stop execution and resume user interaction
at events to which a break point with state @samp{stop} applies.
By default, the debugger will stop at such events.
However, if the debugger is executing a strict command,
it will not stop at an event
just because a break point in the stop state applies to it.

@cindex debugger interrupt
@cindex interrupt, in debugger
@cindex control-C
If the debugger receives an interrupt (e.g.@: if the user presses control-C),
it will stop at the next event regardless of what command it is executing
at the time.
@sp 1
@item print level
@cindex print level
@cindex debugger print level
When a debugger command steps over some events
without user interaction at those events,
the @emph{print level} controls under what circumstances
the stepped over events will be printed.
@sp 1
@itemize @bullet
@item
When the print level is @samp{none},
none of the stepped over events will be printed.
@sp 1
@item
When the print level is @samp{all},
all the stepped over events will be printed.
@sp 1
@item
When the print level is @samp{some},
the debugger will print the event only if a break point applies to the event.
@end itemize
@sp 1
Regardless of the print level, the debugger will print
any event that causes execution to stop and user interaction to start.
@sp 1
@item default print level
The debugger maintains a default print level.
The initial value of this variable is @samp{some},
but this value can be overridden by the user.
@sp 1
@item current environment
Whenever execution stops at an event, the current environment
is reset to refer to the stack frame of the call specified by the event.
However, the @samp{up}, @samp{down} and @samp{level} commands
can set the current environment
to refer to one of the ancestors of the current call.
This will then be the current environment until another of these commands
changes the environment yet again or execution continues to another event.
@sp 1
@item paths in terms
@cindex paths in terms
@cindex term navigation
When browsing or printing a term,
you can use "^@samp{n}" to refer to the @var{n}th subterm of that term.
If the term's type has named fields,
you can use "^@samp{fname}" to refer to
the subterm of the field named @samp{fname}.
You can use several of these subterm specifications in a row
to refer to subterms deep within the original term.
For example, when applied to a list,
"^2" refers to the tail of the list
(the second argument of the list constructor),
"^2^2" refers to the tail of the tail of the list,
and "^2^2^1" refers to the head of the tail of the tail,
i.e. to the third element of the list.
You can think of terms as Unix directories,
with constants (function symbols of arity zero) being plain files
and function symbols of arity greater than zero being directories themselves.
Each subterm specification such as "^2" goes one level down in the hierarchy.
The exception is the subterm specification "^..",
which goes one level up, to the parent of the current directory.
@sp 1
@item held variables
@cindex held variables (in mdb)
Normally, the only variables from the program accessible in the debugger
are the variables in the current environment at the current program point.
However, the user can @emph{hold} variables,
causing their values -or selected parts of their values-
to stay available for the rest of the debugger session.
@c XXX Document the relationship of this command
@c to partially instantiated data structures and solver types
@c when the debugger is extended to handle these constructs.
All the commands that accept variable names
also accept the names of held variables;
users can ask for a held variable
by prefixing the name of the held variable with a dollar sign.
@sp 1
@item user defined events
@cindex user defined events (in mdb)
Besides the builtin set of events,
the Mercury debugger also supports events defined by the user.
Each event appears in the source code of the Mercury program
as a call prefixed by the keyword @samp{event},
with each argument of the call giving the value of an event @emph{attribute}.
Users can specify the set of user defined events that can appear in a program,
and the names, types and order of the attributes
of each kind of user defined event,
by giving the name of an event set specification file to the compiler
when compiling that program.
For more details, see @ref{User defined events}.
@sp 1
@item user defined event attributes
@cindex user defined event attributes (in mdb)
Normally, the only variables from the program accessible in the debugger
are the variables in the current environment at the current program point.
However, if the current event is a user defined event,
then the attributes of that event are also available.
All the commands that accept variable names
also accept the names of attributes;
users can ask for an attribute
by prefixing the name of the attribute with an exclamation point.
@sp 1
@item procedure specification
@cindex procedure specification (in mdb)
@cindex debugger procedure specification
Some debugger commands, e.g.@: @samp{break},
require a parameter that specifies a procedure.
The procedure may or may not be a compiler-generated
unify, compare or index procedure of a type constructor.
If it is, the procedure specification has
the following components in the following order:
@itemize @bullet
@item
An optional prefix of the form
@samp{unif*}, @samp{comp*}, @samp{indx*} or @samp{init*},
that specifies whether the procedure belongs
to a unify, compare, index or init predicate.
@item
An optional prefix of the form @samp{@var{module}.} or @samp{@var{module}__}
that specifies the name of the module that defines the predicate or function
to which the procedure belongs.
@item
The name of the type constructor.
@item
An optional suffix of the form @samp{/@var{arity}}
that specifies the arity of the type constructor.
@item
An optional suffix of the form @samp{-@var{modenum}}
that specifies the mode number of the procedure
within the predicate or function to which the procedure belongs.
@end itemize
For other procedures, the procedure specification has
the following components in the following order:
@itemize @bullet
@item
An optional prefix of the form @samp{pred*} or @samp{func*}
that specifies whether the procedure belongs to a predicate or a function.
@item
An optional prefix of the form @samp{@var{module}:}, @samp{@var{module}.}
or @samp{@var{module}__} that specifies the name of the module that defines
the predicate or function to which the procedure belongs.
@item
The name of the predicate or function to which the procedure belongs.
@item
An optional suffix of the form @samp{/@var{arity}}
that specifies the arity of the predicate or function
to which the procedure belongs.
@item
An optional suffix of the form @samp{-@var{modenum}}
that specifies the mode number of the procedure
within the predicate or function to which the procedure belongs.
@end itemize
@end table

@node User defined events
@section User defined events

Besides the builtin set of events,
the Mercury debugger also supports events defined by the user.
The intention is that users can define one kind of event
for each semantically important event in the program
that is not captured by the standard builtin events,
and can then generate those events at the appropriate point in the source code.
Each event appears in the source code
as a call prefixed by the keyword @samp{event},
with each argument of the call giving the value of an event @emph{attribute}.

Users can specify the set of user defined events that can appear in a program,
and the names, types and order of the attributes
of each kind of user defined event,
by giving the name of an event set specification file to the compiler
when compiling that program
as the argument of the @samp{event-set-file-name} option.
This file should contain a header giving the event set's name,
followed by a sequence of one or more event specifications,
like this:

@c XXX replace with more realistic example
@example
    event set queens

    event nodiag_fail(
        test_failed:    string,
        arg_b:          int,
        arg_d:          int,
        arg_list_len:   int synthesized by list_len_func(sorted_list),
        sorted_list:    list(int) synthesized by list_sort_func(arg_list),
        list_len_func:  function,
        list_sort_func: function,
        arg_list:       list(int)
    )

    event safe_test(
        test_list:      listint
    )

    event noargs
@end example

The header consists of the keywords @samp{event set}
and an identifier giving the event set name.
Each event specification consists of the keyword @samp{event},
the name of the event, and,
if the event has any attributes, a parenthesized list of those attributes.
Each attribute's specification consists of
a name, a colon and information about the attribute.

There are three kinds of attributes.
@itemize
@item
For ordinary attributes, like @samp{arg_b},
the information about the attribute is the Mercury type of that attribute.
@item
For function attributes, like @samp{list_sort_func},
the information about the attribute is just the keyword @samp{function}.
@item
For synthesized attributes, like @samp{sorted_list},
the information about the attribute is the type of the attribute,
the keywords @samp{synthesized by},
and a description of the Mercury function call
required to synthesize the value of the attribute.
The synthesis call consists of the name of a function attribute
and a list of the names of one or more argument attributes.
Argument attributes cannot be function attributes;
they may be either ordinary attributes, or previously synthesized attributes.
A synthesized attribute is not allowed
to depend on itself directly or indirectly,
but there are no restrictions on the positions of synthesized attributes
compared to the positions of the function attributes computing them
or of the argument attributes of the synthesis functions.
@end itemize

The result types of function attributes
are given by the types of the synthesized attributes they compute.
The argument types of function attributes (and the number of those arguments)
are given by the types of the arguments they are applied to.
Each function attribute must be used
to compute at least one synthesized attribute,
otherwise there would be no way to compute its type.
If it is used to compute more than one synthesized attribute,
the result and argument types must be consistent.

Each event goal in the program must use
the name of one of the events defined here as the predicate name of the call,
and the call's arguments must match
the types of that event's non-synthesized attributes.
Given that B and N are integers and L is a list of integers,
these event goals are fine,
@example
	event nodiag_fail("N - B", B, N, list.length, list.sort, [N | L]),
	event safe_test([1, 2, 3])
@end example
but these goals
@example
	event nodiag_fail("N - B", B, N, list.sort, list.length, [N | L]),
	event nodiag_fail("N - B", B, list.length, N, list.sort, [N | L]),
	event safe_test([1], [2])
	event safe_test(42)
	event nonexistent_event(42)
@end example
will all generate errors.

The attributes of event calls are always input,
and the event goal is always @samp{det}.

@node I/O tabling
@section I/O tabling

In Mercury, predicates that want to do I/O
must take a di/uo pair of I/O state arguments.
Some of these predicates call other predicates to do I/O for them,
but some are @emph{I/O primitives}, i.e. they perform the I/O themselves.
The Mercury standard library provides a large set of these primitives,
and programmers can write their own through the foreign language interface.
An I/O action is the execution of one call to an I/O primitive.

In debugging grades, the Mercury implementation has the ability
to automatically record, for every I/O action,
the identity of the I/O primitive involved in the action
and the values of all its arguments.
The size of the table storing this information
is proportional to the number of @emph{tabled} I/O actions,
which are the I/O actions whose details are entered into the table.
Therefore the tabling of I/O actions is never turned on automatically;
instead, users must ask for I/O tabling to start
with the @samp{table_io start} command in mdb.

The purpose of I/O tabling is to enable transparent retries across I/O actions.
(The mdb @samp{retry} command
restores the computation to a state it had earlier,
allowing the programmer to explore code that the program has already executed;
see its documentation in the @ref{Debugger commands} section below.)
In the absence of I/O tabling,
retries across I/O actions can have bad consequences.
Retry of a goal that reads some input requires that input to be provided twice;
retry of a goal that writes some output generates duplicate output.
Retry of a goal that opens a file leads to a file descriptor leak;
retry of a goal that closes a file can lead to errors
(duplicate closes, reads from and writes to closed files).

I/O tabling avoids these problems by making I/O primitives @emph{idempotent}.
This means that they will generate their desired effect
when they are first executed,
but reexecuting them after a retry won't have any further effect.
The Mercury implementation achieves this
by looking up the action (which is identified by a I/O action number)
in the table and returning the output arguments stored in the table
for the given action @emph{without} executing the code of the primitive.

Starting I/O tabling when the program starts execution
and leaving it enabled for the entire program run
will work well for program runs that don't do lots of I/O.
For program runs that @emph{do} lots of I/O,
the table can fill up all available memory.
In such cases, the programmer may enable I/O tabling with @samp{table_io start}
just before the program enters the part they wish to debug
and in which they wish to be able to perform
transparent retries across I/O actions,
and turn it off with @samp{table_io stop} after execution leaves that part.

The commands @samp{table_io start} and @samp{table_io stop}
can each be given only once during an mdb session.
They divide the execution of the program into three phases:
before @samp{table_io start},
between @samp{table_io start} and @samp{table_io stop},
and after @samp{table_io stop}.
Retries across I/O will be transparent only in the middle phase.

@node Debugger commands
@section Debugger commands

When the debugger (as opposed to the program being debugged) is interacting
with the user, the debugger prints a prompt and reads in a line of text,
which it will interpret as its next command line.
A command line consists of a single command,
or several commands separated by semicolons.
Each command consists of several words separated by white space.
The first word is the name of the command,
while any other words give options and/or parameters to the command.

A word may itself contain semicolons or whitespace if it is
enclosed in single quotes (@samp{'}).
This is useful for commands that have other commands as parameters,
for example @w{@samp{view -w 'xterm -e'}}.
Characters that have special meaning to @samp{mdb} will be treated like
ordinary characters if they are escaped with a backslash (@samp{\}).
It is possible to escape single quotes, whitespace, semicolons, newlines
and the escape character itself.

Some commands take a number as their first parameter.
For such commands, users can type `@var{number} @var{command}'
as well as `@var{command} @var{number}'.
The debugger will treat the former as the latter,
even if the number and the command are not separated by white space.

@menu
* Interactive query commands::
* Forward movement commands::
* Backward movement commands::
* Browsing commands::
* Breakpoint commands::
* I/O tabling commands::
* Parameter commands::
* Help commands::
* Declarative debugging mdb commands::
* Miscellaneous commands::
* Experimental commands::
* Developer commands::
@end menu

@node Interactive query commands
@subsection Interactive query commands

@table @code
@item query @var{module1} @var{module2} @dots{}
@itemx cc_query @var{module1} @var{module2} @dots{}
@itemx io_query @var{module1} @var{module2} @dots{}
@kindex query (mdb command)
@kindex cc_query (mdb command)
@kindex io_query (mdb command)

@c This documentation has been duplicated in
@c Opium-M/source/interactive_queries.op so please tell me (jahier@irisa.fr)
@c to update my documentation on interactive queries if you update this
@c subsection.

These commands allow you to type in queries (goals) interactively
in the debugger.  When you use one of these commands, the debugger
will respond with a query prompt (@samp{?-} or @samp{run <--}),
at which you can type in a goal; the debugger will then compile
and execute the goal and display the answer(s).
You can return from the query prompt to the @samp{mdb>} prompt
by typing the end-of-file indicator (typically control-D or control-Z),
or by typing @samp{quit.}.
@sp 1
The module names @var{module1}, @var{module2}, @dots{} specify
which modules will be imported.  Note that you can also
add new modules to the list of imports directly at the query prompt,
by using a command of the form @samp{[@var{module}]}, e.g.@: @samp{[int]}.
You need to import all the modules that define symbols used in your query.
Queries can only use symbols that are exported from a module;
entities which are declared in a module's implementation section
only cannot be used.
@sp 1
The three variants differ in what kind of goals they allow.
For goals which perform I/O, you need to use @samp{io_query};
this lets you type in the goal using DCG syntax.
For goals which don't do I/O, but which have determinism
@samp{cc_nondet} or @samp{cc_multi}, you need to use @samp{cc_query};
this finds only one solution to the specified goal.
For all other goals, you can use plain @samp{query}, which
finds all the solutions to the goal.
@sp 1
Goals can refer to variables in the current environment,
which will be treated as inputs to the query.
Any variables in the goal that do not exist in the current environment,
and that do not start with an underscore, will be treated as outputs.
For @samp{query} and @samp{cc_query}, the debugger will print
the bindings of output variables in the goal using @samp{io.write_cc}.
The goal must bind all of its output variables to ground terms,
otherwise you will get a mode error.
@sp 1
The current implementation works by compiling the queries on-the-fly
and then dynamically linking them into the program being debugged.
Thus it may take a little while for your query to be executed.
Each query will be written to a file named @file{mdb_query.m} in the current
directory, so make sure you don't name your source file @file{mdb_query.m}.
Note that dynamic linking may not be supported on some systems;
if you are using a system for which dynamic linking is not supported,
you will get an error message when you try to run these commands.
@sp 1
You may also need to build your program using shared libraries
for interactive queries to work.
See @ref{Libraries} for details of how to build with shared libraries.
@end table

@sp 1
@node Forward movement commands
@subsection Forward movement commands

@sp 1
@table @code
@item step [-NSans] [@var{num}]
@kindex step (mdb command)
Steps forward @var{num} events.
If this command is given at event @var{cur}, continues execution until
event @var{cur} + @var{num}. The default value of @var{num} is 1.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is not strict, and it uses the default print level.
@sp 1
A command line containing only a number @var{num} is interpreted as
if it were `step @var{num}'.
@sp 1
An empty command line is interpreted as `step 1'.
@sp 1
@item goto [-NSans] @var{num}
@c The @var{generatorname} option is enabled
@c only in own stack minimal model grades.
@c @item goto [-NSans] @var{num} [@var{generatorname}]
@kindex goto (mdb command)
Continues execution until the program reaches event number @var{num}.
If the current event number is larger than @var{num}, it reports an error.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@c @sp 1
@c If given, @var{generatorname} specifies
@c the generator in which to reach the given event number.
@c In this case, the command does not check
@c whether the event has already passed.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item next [-NSans] [@var{num}]
@kindex next (mdb command)
Continues execution until it reaches the next event of
the @var{num}'th ancestor of the call to which the current event refers.
The default value of @var{num} is zero,
which means skipping to the next event of the current call.
Reports an error if execution is already at the end of the specified call.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item finish [-NSans]
@item finish [-NSans] @var{num}
@item finish [-NSans] (@samp{clentry}|@samp{clique})
@item finish [-NSans] @samp{clparent}
@kindex finish (mdb command)
If invoked without arguments,
continues execution until it reaches a final (EXIT, FAIL or EXCP) port
of the current call.
If invoked with the number @var{num} as argument,
continues execution until it reaches a final port
of the @var{num}'th ancestor of the call to which the current event refers.
If invoked with the argument @samp{clentry} or @samp{clique},
continues execution until it reaches a final port of the call
that first entered into the clique of recursive calls
of which the current call is a part.
(If the current call is not recursive or mutually recursive
with any other currently active call,
it will skip to the end of the current call.)
If the command is given the argument @samp{clparent},
it skips to the end of the first call outside the current call's clique.
This will be the parent of the call that @samp{finish clentry} would finish.
@sp 1
If invoked as
@samp{finish clentry}, @samp{finish clique} or @samp{finish clparent},
this command will report an error
unless we have stack trace information
about all of the current call's ancestors.
@sp 1
Also reports an error if execution is already at the desired port.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@c The documentation of fail is commented out, because the implementation does
@c not yet do this right thing when the procedure call we want to get to the
@c FAIL port of is inside a commit.
@c @sp 1
@c @item fail [-NSans] [@var{num}]
@c Continues execution until it reaches a FAIL or EXCP port
@c of the @var{num}'th ancestor of the call to which the current event refers.
@c The default value of @var{num} is zero,
@c which means skipping to the end of the current call.
@c Reports an error if execution is already at the desired port,
@c or if the determinism of the selected call
@c does not guarantee that it will eventually fail.
@c @sp 1
@c The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@c @samp{-a} or @samp{--all} specify the print level to use
@c for the duration of the command,
@c while the options @samp{-S} or @samp{--strict}
@c and @samp{-N} or @samp{--nostrict} specify
@c the strictness of the command.
@c @sp 1
@c By default, this command is strict, and it uses the default print level.
@sp 1
@item exception [-NSans]
@kindex exception (mdb command)
Continues the program until execution reaches an exception event.
Reports an error if the current event is already an exception event.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item return [-NSans]
@kindex return (mdb command)
Continues the program until the program finished returning,
i.e.@: until it reaches a port other than EXIT.
Reports an error if the current event already refers to such a port.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item user [-NSans]
@kindex return (mdb command)
Continues the program until the next user defined event.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item forward [-NSans]
@kindex forward (mdb command)
Continues the program until the program resumes forward execution,
i.e.@: until it reaches a port other than REDO or FAIL.
Reports an error if the current event already refers to such a port.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item mindepth [-NSans] @var{depth}
@kindex mindepth (mdb command)
Continues the program until the program reaches an event
whose depth is at least @var{depth}.
Reports an error if the current event already refers to such a port.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item maxdepth [-NSans] @var{depth}
@kindex maxdepth (mdb command)
Continues the program until the program reaches an event
whose depth is at most @var{depth}.
Reports an error if the current event already refers to such a port.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is strict, and it uses the default print level.
@sp 1
@item continue [-NSans]
@kindex continue (mdb command)
Continues execution until it reaches the end of the program.
@sp 1
The options @samp{-n} or @samp{--none}, @samp{-s} or @samp{--some},
@samp{-a} or @samp{--all} specify the print level to use
for the duration of the command,
while the options @samp{-S} or @samp{--strict}
and @samp{-N} or @samp{--nostrict} specify
the strictness of the command.
@sp 1
By default, this command is not strict. The print level used
by the command by default depends on the final strictness level:
if the command is strict, it is @samp{none}, otherwise it is @samp{some}.
@end table

@sp 1
@node Backward movement commands
@subsection Backward movement commands

@sp 1
@table @code
@item retry [-fio]
@item retry [-fio] @var{num}
@item retry [-fio] (@samp{clentry}|@samp{clique})
@item retry [-fio] @samp{clparent}
@c @item retry [-afio] [@var{num}]
@kindex retry (mdb command)
If the command is given no arguments,
restarts execution at the call port
of the call corresponding to the current event.
If the command is given the number @var{num} as argument,
restarts execution at the call port of the call corresponding to
the @var{num}'th ancestor of the call to which the current event belongs.
For example, if @var{num} is 1, it restarts the parent of the current call.
If the command is given the argument @samp{clentry} or @samp{clique},
restarts execution at the call port of the call
that first entered into the clique of recursive calls
of which the current call is a part.
(If the current call is not (mutually) recursive
with any other currently active call,
the restarted call will be the current call.)
If the command is given the argument @samp{clparent},
restarts execution at the call port
of the first call outside the current call's clique.
This will be the parent of the call that @samp{retry clentry} would restart.
@sp 1
If invoked as
@samp{retry clentry}, @samp{retry clique} or @samp{retry clparent},
this command will report an error
unless we have stack trace information
about all of the current call's ancestors.
@sp 1
The command will also report an error unless
the values of all the input arguments of the selected call are available
at the return site at which control would reenter the selected call.
(The compiler will keep the values
of the input arguments of traced predicates as long as possible,
but it cannot keep them beyond the point where they are destructively updated.)
The exception is values of type `io.state';
the debugger can perform a retry if the only missing value is of
type `io.state' (there can be only one io.state at any given time).
@sp 1
Retries over I/O actions are guaranteed to be safe
only if the events at which the retry starts and ends
are both within the I/O tabled region of the program's execution.
If the retry is not guaranteed to be safe,
the debugger will normally ask the user if they really want to do this.
The option @samp{-f} or @samp{--force} suppresses the question,
telling the debugger that retrying over I/O is OK;
the option @samp{-o} or @samp{--only-if-safe} suppresses the question,
telling the debugger that retrying over I/O is not OK;
the option @samp{-i} or @samp{--interactive} restores the question
if a previous option suppressed it.
@c The --assume-all-io-is-tabled option is for developers only. Specifying it
@c makes an assertion, and if the assertion is incorrect, the resulting
@c behaviour would be hard for non-developers to understand. The option is
@c therefore deliberately not documented.
@c
@c @sp 1
@c A retry in which the values of all input arguments are available
@c works fine, provided that the predicates defined in C code that are
@c called inside the repeated computation do not pose any problems.
@c A retry in which a value of type `io.state' is missing has the
@c following effects:
@c @sp 1
@c @itemize @bullet
@c @item
@c Any input and/or output actions in the repeated code will be repeated.
@c @item
@c Any file close actions in the repeated code
@c for which the corresponding file open action is not also in the repeated code
@c may cause later I/O actions referring to the file to fail.
@c @item
@c Any file open actions in the repeated code
@c for which the corresponding file close action
@c is not also in the repeated code
@c may cause later file open actions to fail due to file descriptor leak.
@c @end itemize
@c @sp 1
@c XXX the following limitation applies only in minimal model grades,
@c which are not officially supported:
@c The debugger can perform a retry only from an exit or fail port;
@c only at these ports does the debugger have enough information
@c to figure out how to reset the stacks.
@c If the debugger is not at such a port when a retry command is given,
@c the debugger will continue forward execution
@c until it reaches an exit or fail port of the call to be retried
@c before it performs the retry.
@c This may require a noticeable amount of time,
@c and may result in the execution of I/O and/or other side-effects.
@c If the predicate being retried does I/O, the indirect retry will fail.
@end table

@sp 1
@table @code
@item track @var{num} [@var{termpath}]
@kindex track (mdb command)
Goto the EXIT event of the procedure in which the subterm in argument
@var{num} at term path @var{termpath} was bound,
and display information about where the term was bound.
@sp 1
Note that this command just invokes a script that is equivalent to running
the following sequence of commands:
@example
	dd
	browse @var{num}
	cd @var{termpath}
	track
	info
	pd
@end example
@end table

@sp 1
@node Browsing commands
@subsection Browsing commands

@sp 1
@table @code
@item vars
@kindex vars (mdb command)
Prints the names of all the known variables in the current environment,
together with an ordinal number for each variable.
@item held_vars
@kindex held_vars (mdb command)
Prints the names of all the held variables.
@sp 1
@item print [-fpv] @var{name}[@var{termpath}]
@itemx print [-fpv] @var{num}[@var{termpath}]
@kindex print (mdb command)
Prints the value of the variable in the current environment
with the given name, or with the given ordinal number.
If the name or number is followed by a term path such as "^2",
then only the specified subterm of the given variable is printed.
This is a non-interactive version of the @samp{browse} command (see below).
Various settings which affect the way that terms are printed out
(including e.g.@: the maximum term depth)
can be set using the @samp{format_param} command.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print [-fpv] *
Prints the values of all the known variables in the current environment.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print [-fpv]
@item print [-fpv] goal
Prints the goal of the current call in its present state of instantiation.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print [-fpv] exception
Prints the value of the exception at an EXCP port.
Reports an error if the current event does not refer to such a port.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print io limits
@itemx print action limits
Prints the numbers of the lowest and highest numbered
I/O actions executed and recorded by the program, if any.
@sp 1
@item print [-fpv] io @var{num}
@itemx print [-fpv] action @var{num}
Prints a representation
of the @var{num}'th I/O action executed by the program,
if there was such an action and if it was recorded.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print [-fpv] io @var{min}-@var{max}
@itemx print [-fpv] action @var{min}-@var{max}
Prints a representation of the I/O actions executed by the program
from the @var{min}'th to the @var{min}'th,
if there were such actions and if they were recorded.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print [-fpv] [-m @var{max}] io
@itemx print [-fpv] [-m @var{max}] action
If no I/O actions have been printed yet,
or if the last mdb command to print I/O actions was not successful,
prints a representation of the first @var{max} I/O actions
executed and recorded by the program.
If there was an mdb command to print I/O actions and it was successful,
prints a representation of the next @var{max} I/O actions
executed and recorded by the program.
@sp 1
The value of @var{max} is given by the @samp{-m} option.
If the option is not specified, the default is 20.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item print [-fpv] [-m @var{max}] io *
@itemx print [-fpv] [-m @var{max}] action *
Prints a representation of the first @var{max} I/O actions
executed and recorded by the program.
@sp 1
The value of @var{max} is given by the @samp{-m} option.
If the option is not specified, the default is 500.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@c @sp 1
@c @item print [-fpv] proc_body
@c Prints a representation of the body of the current procedure,
@c if it is available.
@c @sp 1
@c The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
@c and @samp{-v} or @samp{--verbose} specify the format to use for printing.
@sp 1
@item browse [-fpvw] @var{name}[@var{termpath}]
@itemx browse [-fpvw] @var{num}[@var{termpath}]
@kindex browse (mdb command)
Invokes an interactive term browser to browse
the value of the variable in the current environment
with the given ordinal number or with the given name.
If the name or number is followed by a term path such as "^2",
then only the specified subterm of the given variable is given to the browser.
@sp 1
The interactive term browser allows you
to selectively examine particular subterms.
The depth and size of printed terms may be controlled.
The displayed terms may also be clipped to fit within a single screen.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for browsing.
The @samp{-w} or @samp{--web} option tells mdb to dump the value of the
variable to an HTML file and then invoke a web browser on that file.
@sp 1
For further documentation on the interactive term browser,
invoke the @samp{browse} command from within @samp{mdb} and then
type @samp{help} at the @samp{browser>} prompt.
@sp 1
@item browse [-fpvw]
@itemx browse [-fpvw] goal
Invokes the interactive term browser to browse
the goal of the current call in its present state of instantiation.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for browsing.
The @samp{-w} or @samp{--web} option tells mdb
to dump the goal to an HTML file and then invoke a web browser on that file.
@sp 1
@item browse [-fpvw] exception
Invokes the interactive term browser to browse
the value of the exception at an EXCP port.
Reports an error if the current event does not refer to such a port.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for browsing.
The @samp{-w} or @samp{--web} option tells mdb
to dump the exception to an HTML file
and then invoke a web browser on that file.
@sp 1
@item browse [-fpvw] io @var{num}
@itemx browse [-fpvw] action @var{num}
Invokes an interactive term browser to browse a representation
of the @var{num}'th I/O action executed by the program,
if there was such an action and if it was recorded.
@sp 1
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose} specify the format to use for browsing.
The @samp{-w} or @samp{--web} option tells mdb
to dump the I/O action representation to an HTML file,
and then invoke a web browser on that file.
@c @sp 1
@c @item browse [-fpv] proc_body
@c Invokes an interactive term browser to browse a representation
@c of the body of the current procedure, if it is available.
@c @sp 1
@c The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
@c and @samp{-v} or @samp{--verbose} specify the format to use for browsing.
@sp 1

@item stack [-a] [-d] [-c@var{cliquelines}] [-f@var{numframes}] [@var{numlines}]
@kindex stack (mdb command)
Prints the names of the ancestors of the call
specified by the current event.
If two or more consecutive ancestor calls are for the same procedure,
the procedure identification will be printed once
with the appropriate multiplicity annotation.
@sp 1
The option @samp{-d} or @samp{--detailed}
specifies that for each ancestor call,
the call's event number, sequence number and depth should also be printed
if the call is to a procedure that is being execution traced.
@sp 1
If the @samp{-f} option, if present, specifies that
only the topmost @var{numframes} stack frames should be printed.
@sp 1
The optional number @var{numlines}, if present,
specifies that only the topmost @var{numlines} lines should be printed.
The default value is 100;
the special value 0 asks for all the lines to be printed.
@sp 1
By default, this command will look for cliques of mutually recursive ancestors.
It will draw boxes next to them to identify them as such in the output,
and it will print at most 10 lines from any clique.
The @samp{-c} option can be used to specify
the maximum number of lines to print for a clique,
with the special value 0 asking for all of them to be printed.
The option @samp{-a} asks for all lines to be printed
@emph{without} cliques being detected or marked.
@sp 1
This command will report an error if there is no stack trace
information available about any ancestor.
@sp 1
@item up [-d] [@var{num}]
@kindex up (mdb command)
Sets the current environment to the stack frame
of the @var{num}'th level ancestor of the current environment
(the immediate caller is the first-level ancestor).
@sp 1
If @var{num} is not specified, the default value is one.
@sp 1
This command will report an error
if the current environment doesn't have the required number of ancestors,
or if there is no execution trace information about the requested ancestor,
or if there is no stack trace information about any of the ancestors
between the current environment and the requested ancestor.
@sp 1
The option @samp{-d} or @samp{--detailed}
specifies that for each ancestor call,
the call's event number, sequence number and depth should also be printed
if the call is to a procedure that is being execution traced.
@sp 1
@item down [-d] [@var{num}]
@kindex down (mdb command)
Sets the current environment to the stack frame
of the @var{num}'th level descendant of the current environment
(the procedure called by the current environment
is the first-level descendant).
@sp 1
If @var{num} is not specified, the default value is one.
@sp 1
This command will report an error
if there is no execution trace information about the requested descendant.
@sp 1
The option @samp{-d} or @samp{--detailed}
specifies that for each ancestor call,
the call's event number, sequence number and depth should also be printed
if the call is to a procedure that is being execution traced.
@sp 1
@item level [-d]
@item level [-d] @var{num}
@item level [-d] (@samp{clentry}|@samp{clique})
@item level [-d] @samp{clparent}
@kindex level (mdb command)
If the command is given no arguments,
it sets the current environment
to the stack frame that belongs to the current event.
If invoked with the number @var{num} as argument,
it sets the current environment
to the stack frame of the @var{num}'th level ancestor
of the call to which the current event belongs.
If invoked with the argument @samp{clentry} or @samp{clique},
it sets the current environment to the stack frame of the call
that first entered into the clique of recursive calls
of which the current call is a part.
(If the current call is not (mutually) recursive
with any other currently active call,
it sets the current environment to the stack frame of the current event.)
If the command is given the argument @samp{clparent},
it sets the current environment to the stack frame of the first call
outside the current call's clique.
This will be the parent of the stack frame
that @samp{level clentry} would set the current environment to.
@sp 1
This command will report an error
if the current environment doesn't have the required number of ancestors,
or if there is no execution trace information about the requested ancestor,
or if there is no stack trace information about any of the ancestors
between the current environment and the requested ancestor.
@sp 1
The option @samp{-d} or @samp{--detailed}
specifies that for each ancestor call,
the call's event number, sequence number and depth should also be printed
if the call is to a procedure that is being execution traced.
@sp 1
@item current
@kindex current (mdb command)
Prints the current event.
This is useful if the details of the event,
which were printed when control arrived at the event,
have since scrolled off the screen.
@sp 1
@item view [-vf2] [-w @var{window-cmd}] [-s @var{server-cmd}] [-n @var{server-name}] [-t @var{timeout}]
@itemx view -c [-v] [-s @var{server-cmd}] [-n @var{server-name}]
@kindex view (mdb command)
Opens a new window displaying the source code,
at the location of the current event.
As mdb stops at new events,
the window is updated to track through the source code.
This requires X11 and a version of @samp{vim}
compiled with the client/server option enabled.
@sp 1
The debugger only updates one window at a time.
If you try to open a new source window when there is already one open,
this command aborts with an error message.
@sp 1
The variant with @samp{-c} (or @samp{--close})
does not open a new window but instead
attempts to close a currently open source window.
The attempt may fail if, for example,
the user has modified the source file without saving.
@sp 1
The option @samp{-v} (or @samp{--verbose})
prints the underlying system calls before running them,
and prints any output the calls produced.
This is useful to find out what is wrong if the server does not start.
@sp 1
The option @samp{-f} (or @samp{--force})
stops the command from aborting if there is already a window open.
Instead it attempts to close that window first.
@sp 1
The option @samp{-2} (or @samp{--split-screen})
starts the vim server with two windows,
which allows both the callee as well as the caller
to be displayed at interface events.
The lower window shows what would normally be seen
if the split-screen option was not used,
which at interface events is the caller.
At these events,
the upper window shows the callee definition.
At internal events,
the lower window shows the associated source,
and the view in the upper window
(which is not interesting at these events)
remains unchanged.
@sp 1
The option @samp{-w} (or @samp{--window-command}) specifies
the command to open a new window.
The default is @samp{xterm -e}.
@sp 1
The option @samp{-s} (or @samp{--server-command}) specifies
the command to start the server.
The default is @samp{vim}.
@sp 1
The option @samp{-n} (or @samp{--server-name}) specifies
the name of an existing server.
Instead of starting up a new server,
mdb will attempt to connect to the existing one.
@sp 1
The option @samp{-t} (or @samp{--timeout}) specifies
the maximum number of seconds to wait for the server to start.
@sp 1
@item hold @var{name}[@var{termpath}] [@var{heldname}]
@kindex hold (mdb command)
Holds on to the variable @var{name} of the current event,
or the part of the specified by @var{termpath},
even after execution leaves the current event.
The held value will stay accessible via the name @var{$heldname}.
If @var{heldname} is not specified, it defaults to @var{name}.
There must not already be a held variable named @var{heldname}.
@sp 1
@item diff [-s @var{start}] [-m @var{max}] @var{name1}[@var{termpath1}] @var{name2}[@var{termpath2}]
@kindex diff (mdb command)
Prints a list of some of the term paths
at which the (specified parts of) the specified terms differ.
Normally this command prints the term paths of the first 20 differences.
@sp 1
The option @samp{-s} (or @samp{--start}), if present,
specifies how many of the initial differences to skip.
@sp 1
The option @samp{-m} (or @samp{--max}), if present,
specifies how many differences to print.
@sp 1
@item dump [-pqx] goal @var{filename}
@kindex dump (mdb command)
Writes the goal of the current call in its present state of instantiation
to the specified file,
and outputs a message announcing this fact
unless the option @samp{-q} (or @samp{--quiet}) was given.
The option @samp{-p} (or @samp{--prettyprint}) causes the goal to be output
in a pretty-printed form.
The option @samp{-x} (or @samp{--xml}) causes the goal to be output
in XML format.
@sp 1
@item dump [-pqx] exception @var{filename}
Writes the value of the exception at an EXCP port to the specified file,
and outputs a message announcing this fact
unless the option @samp{-q} (or @samp{--quiet}) was given.
Reports an error if the current event does not refer to such a port.
The option @samp{-p} (or @samp{--prettyprint}) causes the exception value
to be output in a pretty-printed form.
The option @samp{-x} (or @samp{--xml}) causes the output to be in XML.
@sp 1
@item dump [-pqx] @var{name} @var{filename}
@itemx dump [-pqx] @var{num} @var{filename}
Writes the value of the variable in the current environment
with the given ordinal number or with the given name to the specified file,
and outputs a message announcing this fact
unless the option @samp{-q} (or @samp{--quiet}) was given.
The option @samp{-p} (or @samp{--prettyprint}) causes the variable's value
to be output in a pretty-printed form.
The option @samp{-x} (or @samp{--xml}) causes the output to be in XML.
@sp 1
@item open @var{term}
Save @var{term} to a temporary file and open the file in an editor.
The name of the editor to be used is taken from
the environment variable @env{EDITOR} if this is set;
if it is not set, then the editor will be @samp{vi}.
@var{term} may be any term
that can be saved to a file with the @samp{save_to_file} command.
@sp 1
@item grep @var{pattern} @var{term}
Saves the given term to a temporary file
and invokes grep on the file using @var{pattern}.
@var{term} may be any term that can be saved to a file
with the @samp{save_to_file} command.
The Unix @samp{grep} command must be available from the shell
for this command to work.
@c @sp 1
@c @item dump [-qx] proc_body @var{filename}
@c Writes the representation of the body of the current procedure,
@c if it is available, to the specified file,
@c and outputs a message announcing this fact
@c unless the option @samp{-q} (or @samp{--quiet}) was given.
@c The option @samp{-x} (or @samp{--xml}) causes the output to be in XML.
@sp 1
@item list [@var{num}]
@kindex list (mdb command)
Lists the source code text for the current environment, including
@var{num} preceding and following lines.  If @var{num} is not provided then
the default of two is used.
@end table

@sp 1
@node Breakpoint commands
@subsection Breakpoint commands
@cindex Breakpoints

@sp 1
@table @code
@item break [-PS] [-E@var{ignore-count}] [-I@var{ignore-count}] [-n] [-p@var{print-spec}]* @var{filename}:@var{linenumber}
@kindex break (mdb command)
Puts a break point on the specified line of the specified source file,
if there is an event or a call at that position.
If the filename is omitted,
it defaults to the filename from the context of the current event.
@sp 1
The options @samp{-P} or @samp{--print}, and @samp{-S} or @samp{--stop}
specify the action to be taken at the break point.
@sp 1
The options @samp{-E@var{ignore-count}}
and @samp{--ignore-entry @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of a call event
that matches the breakpoint.
The options @samp{-I@var{ignore-count}}
and @samp{--ignore-interface @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of interface events
that match the breakpoint.
@sp 1
Each occurrence of the options
@samp{-p@var{printspec}} and @samp{--print-list @var{printspec}}
tells the debugger to include the specified entity
in the breakpoint's print list.
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
By default, the action of the break point is @samp{stop},
the ignore count is zero, and the print list is empty.
@item break [-AOPSaei] [-E@var{ignore-count}] [-I@var{ignore-count}] [-n] [-p@var{print-spec}]* @var{proc-spec}
@c <module name> <predicate name> [<arity> [<mode> [<predfunc>]]]
Puts a break point on the specified procedure.
@sp 1
The options @samp{-A} or @samp{--select-all},
and @samp{-O} or @samp{--select-one}
select the action to be taken
if the specification matches more than one procedure.
If you have specified option @samp{-A} or @samp{--select-all},
mdb will put a breakpoint on all matched procedures,
whereas if you have specified option @samp{-O} or @samp{--select-one},
mdb will report an error.
By default, mdb will ask you whether you want to put a breakpoint
on all matched procedures or just one, and if so, which one.
@sp 1
The options @samp{-P} or @samp{--print}, and @samp{-S} or @samp{--stop}
specify the action to be taken at the break point.
@sp 1
The options @samp{-a} or @samp{--all},
@samp{-e} or @samp{--entry}, and @samp{-i} or @samp{--interface}
specify the invocation conditions of the break point.
If none of these options are specified,
the default is the one indicated by the current scope
(see the @samp{scope} command below).
The initial scope is @samp{interface}.
@sp 1
The options @samp{-E@var{ignore-count}}
and @samp{--ignore-entry @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of a call event
that matches the breakpoint.
The options @samp{-I@var{ignore-count}}
and @samp{--ignore-interface @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of interface events
that match the breakpoint.
@sp 1
Each occurrence of the options
@samp{-p@var{printspec}} and @samp{--print-list @var{printspec}}
tells the debugger to include the specified entity
in the breakpoint's print list.
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
By default, the action of the break point is @samp{stop},
its invocation condition is @samp{interface},
the ignore count is zero, and the print list is empty.
@sp 1
@item break [-OPS] [-E@var{ignore-count}] [-I@var{ignore-count}] [-n] [-p@var{print-spec}]* @var{proc-spec} @var{portname}
Puts a break point on
one or more events of the specified type in the specified procedure.
Port names should be specified as they are printed at events,
e.g. @samp{CALL}, @samp{EXIT}, @samp{DISJ}, @samp{SWTC}, etc.
@sp 1
The option @samp{-O} or @samp{--select-one}
selects the action to be taken
if the specification matches more than one procedure.
If you have specified option @samp{-O} or @samp{--select-one},
mdb will report an error;
otherwise, mdb will ask you which of the matched procedures you want to select.
@sp 1
If there is only one event of the given type in the specified procedure,
mdb will put the breakpoint on it;
otherwise, it will ask you whether you want to put a breakpoint
on all matched events or just one, and if so, which one.
@sp 1
The options @samp{-P} or @samp{--print}, and @samp{-S} or @samp{--stop}
specify the action to be taken at the break point.
@sp 1
The options @samp{-E@var{ignore-count}}
and @samp{--ignore-entry @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of a call event
that matches the breakpoint.
The options @samp{-I@var{ignore-count}}
and @samp{--ignore-interface @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of interface events
that match the breakpoint.
@sp 1
Each occurrence of the options
@samp{-p@var{printspec}} and @samp{--print-list @var{printspec}}
tells the debugger to include the specified entity
in the breakpoint's print list.
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
By default, the action of the break point is @samp{stop},
the ignore count is zero, and the print list is empty.
@sp 1
@item break [-PS] [-E@var{ignore-count}] [-I@var{ignore-count}] [-n] [-p@var{print-spec}]* here
Puts a break point on the procedure referred to by the current event,
with the invocation condition being the event at the current location
in the procedure body.
@sp 1
The options @samp{-P} or @samp{--print}, and @samp{-S} or @samp{--stop}
specify the action to be taken at the break point.
@sp 1
The options @samp{-E@var{ignore-count}}
and @samp{--ignore-entry @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of a call event
that matches the breakpoint.
The options @samp{-I@var{ignore-count}}
and @samp{--ignore-interface @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of interface events
that match the breakpoint.
@sp 1
Each occurrence of the options
@samp{-p@var{printspec}} and @samp{--print-list @var{printspec}}
tells the debugger to include the specified entity
in the breakpoint's print list.
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
By default, the action of the break point is @samp{stop},
the ignore count is zero, and the print list is empty.
@sp 1
@item break [-PS] [-X@var{ignore-count}] [-n] [-p@var{print-spec}]* user_event [@var{user-event-set}] @var{user-event-name}
Puts a break point on all user events named @var{user-event-name},
or, if @var{user-event-set} is specified as well,
on the user event named @var{user-event-name} in that event set.
@sp 1
The options @samp{-P} or @samp{--print}, and @samp{-S} or @samp{--stop}
specify the action to be taken at the break point.
@sp 1
The options @samp{-X@var{ignore-count}}
and @samp{--ignore @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of an event
that matches the breakpoint.
@sp 1
Each occurrence of the options
@samp{-p@var{printspec}} and @samp{--print-list @var{printspec}}
tells the debugger to include the specified entity
in the breakpoint's print list.
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
By default, the action of the break point is @samp{stop},
the ignore count is zero, and the print list is empty.
@sp 1
@item break [-PS] [-X@var{ignore-count}] [-n] [-p@var{print-spec}]* user_event_set [@var{user-event-set}]
Puts a break point either on all user events in all event sets,
or, if @var{user-event-set} is specified,
on all user events in the event set of the given name.
@sp 1
The options @samp{-P} or @samp{--print}, and @samp{-S} or @samp{--stop}
specify the action to be taken at the break point.
@sp 1
The options @samp{-X@var{ignore-count}}
and @samp{--ignore @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of an event
that matches the breakpoint.
@sp 1
Each occurrence of the options
@samp{-p@var{printspec}} and @samp{--print-list @var{printspec}}
tells the debugger to include the specified entity
in the breakpoint's print list.
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
By default, the action of the break point is @samp{stop},
the ignore count is zero, and the print list is empty.
@sp 1
@item break info
Lists the details, status and print lists of all break points.
@sp 1
@item condition [-b@var{break-num}] [-p] [-v] @var{varname}[@var{pathspec}] @var{op} @var{term}
@kindex condition (mdb command)
Attaches a condition to the most recent breakpoint,
or, if the @samp{-b} or @samp{--break-num} is given,
to the breakpoint whose number is given as the argument.
Execution won't stop at the breakpoint if the condition is false.
@sp 1
The condition is a match between a variable live at the breakpoint,
or a part thereof, and @var{term}.
It is ok for @var{term} to contain spaces.
The term from the program to be matched
is specified by @var{varname};
if it is followed by @var{pathspec} (without a space),
it specifies that the match is to be
against the specified part of @var{varname}.
@sp 1
There are two kinds of values allowed for @var{op}.
If @var{op} is @samp{=} or @samp{==}, the condition is true
if the term specified by @var{varname} (and @var{pathspec}, if present)
matches @var{term}.
If @var{op} is @samp{!=} or @samp{\=}, the condition is true
if the term specified by @var{varname} (and @var{pathspec}, if present)
doesn't match @var{term}.
@var{term} may contain integers and strings
(as long as the strings don't contain double quotes),
but floats and characters are not supported (yet),
and neither is any special syntax for operators.
Operators can be specified in prefix form
by quoting them with escaped single quotes,
as in @samp{\'+\'(1, 2)}.
Lists can be specified using the usual syntax.
@var{term} also may not contain variables, with one exception:
any occurrence of @samp{_} in @var{term} matches any term.
@sp 1
If execution reaches a breakpoint and the condition cannot be evaluated,
execution will normally stop at that breakpoint with a message to that effect.
If the @samp{-p} or @samp{--dont-require-path} option is given,
execution won't stop at breakpoints at which
the specified part of the specified variable doesn't exist.
If the @samp{-v} or @samp{--dont-require-var} option is given,
execution won't stop at breakpoints at which
the specified variable itself doesn't exist.
The @samp{-v} or @samp{--dont-require-var} option is implicitly assumed
if the specified breakpoint is on all user events.
@sp 1
@item ignore [-E@var{ignore-count}] [-I@var{ignore-count}] @var{num}
@kindex ignore (mdb command)
The options @samp{-E@var{ignore-count}}
and @samp{--ignore-entry @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of a call event
that matches the breakpoint with the specified number.
The options @samp{-I@var{ignore-count}}
and @samp{--ignore-interface @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of interface events
that match the breakpoint with the specified number.
If neither option is given,
the default is to ignore one call event
that matches the breakpoint with the specified number.
Reports an error if there is no break point with the specified number.
@sp 1
@item ignore [-E@var{ignore-count}] [-I@var{ignore-count}]
The options @samp{-E@var{ignore-count}}
and @samp{--ignore-entry @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of a call event
that matches the most recently added breakpoint.
The options @samp{-I@var{ignore-count}}
and @samp{--ignore-interface @var{ignore-count}}
tell the debugger to ignore the breakpoint
until after @var{ignore-count} occurrences of interface events
that match the most recently added breakpoint.
If neither option is given,
the default is to ignore one call event
that matches the most recently added breakpoint.
Reports an error if the most recently added breakpoint has since been deleted.
@sp 1
@item break_print [-fpv] [-e] [-n] [-b @var{num}] @var{print-spec}*
@kindex break_print (mdb command)
Adds the specified print list elements (there may be more than one)
to the print list of the breakpoint numbered @var{num}
(if the @samp{-b} or @samp{--break-num} option is given),
or to the print list of the most recent breakpoint (if it is not given).
@sp 1
Normally, if a variable with the given name or number doesn't exist
when execution reaches the breakpoint, mdb will issue a warning.
The option @samp{-n} or @samp{--no-warn}, if present, suppresses this warning.
This can be useful if e.g. the name is the name of an output variable,
which of course won't be present at call events.
@sp 1
Normally, the specified elements will be added
at the start of the breakpoint's print list.
The option @samp{-e} or @samp{--end}, if present,
causes them to be added at the end.
@sp 1
By default, the specified elements will be printed with format "flat".
The options @samp{-f} or @samp{--flat}, @samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose}, if given,
explicitly specify the format to use.
@sp 1
@item break_print [-b @var{num}] none
@kindex break_print (mdb command)
Clears the print list of the breakpoint numbered @var{num}
(if the @samp{-b} or @samp{--break-num} option is given),
or the print list of the most recent breakpoint (if it is not given).
@sp 1
@item disable @var{num}
@kindex disable (mdb command)
Disables the break point with the given number.
Reports an error if there is no break point with that number.
@sp 1
@item disable *
Disables all break points.
@sp 1
@item disable
Disables the most recently added breakpoint.
Reports an error if the most recently added breakpoint has since been deleted.
@sp 1
@item enable @var{num}
Enables the break point with the given number.
Reports an error if there is no break point with that number.
@sp 1
@item enable *
@kindex enable (mdb command)
Enables all break points.
@sp 1
@item enable
Enables the most recently added breakpoint.
Reports an error if the most recently added breakpoint has since been deleted.
@sp 1
@item delete @var{num}
@kindex delete (mdb command)
Deletes the break point with the given number.
Reports an error if there is no break point with that number.
@sp 1
@item delete *
Deletes all break points.
@sp 1
@item delete
Deletes the most recently added breakpoint.
Reports an error if the most recently added breakpoint
has already been deleted.
@sp 1
@item modules
@kindex modules (mdb command)
Lists all the debuggable modules
(i.e.@: modules that have debugging information).
@sp 1
@item procedures @var{module}
@kindex procedures (mdb command)
Lists all the procedures in the debuggable module @var{module}.
@sp 1
@item register [-q]
@kindex register (mdb command)
Registers all debuggable modules with the debugger.
Has no effect if this registration has already been done.
The debugger will perform this registration when creating breakpoints
and when listing debuggable modules and/or procedures.
The command will print a message to this effect
unless the @samp{-q} or @samp{--quiet} option is given.
@end table

@sp 1
@node I/O tabling commands
@subsection I/O tabling commands

@sp 1
@table @code
@item table_io
@kindex table_io (mdb command)
Reports which phase of I/O tabling we are in at the moment.
@sp 1
@item table_io start
Tells the debugger to start tabling I/O actions.
@sp 1
@item table_io stop
Tells the debugger to stop tabling I/O actions.
@sp 1
@item table_io stats
Reports statistics about I/O tabling.
@c "table_io allow" is not documented because its use by a non-expert
@c can yield weird results.
@c @sp 1
@c @item table_io allow
@c Allow I/O tabling to be started, even in grades in which
@c not all I/O primitives are guaranteed to be tabled.
@end table

@sp 1
@node Parameter commands
@subsection Parameter commands

@sp 1
@table @code
@item mmc_options @var{option1} @var{option2} @dots{}
@kindex mmc_options (mdb command)
This command sets the options that will be passed to @samp{mmc}
to compile your query when you use one of the query commands:
@samp{query}, @samp{cc_query}, or @samp{io_query}.
For example, if a query results in a compile error,
it may sometimes be helpful to use @samp{mmc_options --verbose-error-messages}.
@sp 1
@item printlevel none
@kindex printlevel (mdb command)
Sets the default print level to @samp{none}.
@sp 1
@item printlevel some
Sets the default print level to @samp{some}.
@sp 1
@item printlevel all
Sets the default print level to @samp{all}.
@sp 1
@item printlevel
Reports the current default print level.
@sp 1
@item scroll on
@kindex scroll (mdb command)
Turns on user control over the scrolling of sequences of event reports.
This means that every screenful of event reports
will be followed by a @samp{--more--} prompt.
You may type an empty line, which allows the debugger
to continue to print the next screenful of event reports.
By typing a line that starts with @samp{a}, @samp{s} or @samp{n},
you can override the print level of the current command,
setting it to @samp{all}, @samp{some} or @samp{none} respectively.
By typing a line that starts with @samp{q},
you can abort the current debugger command
and get back control at the next event.
@sp 1
@item scroll off
Turns off user control over the scrolling of sequences of event reports.
@sp 1
@item scroll @var{size}
Sets the scroll window size to @var{size},
which tells scroll control to stop and print a @samp{--more--} prompt
after every @var{size} @minus{} 1 events.
The default value of @var{size}
is the value of the @env{LINES} environment variable,
which should correspond to the number of lines available on the terminal.
@sp 1
@item scroll
Reports whether user scroll control is enabled and what the window size is.
@sp 1
@item stack_default_limit @var{size}
@kindex stack_default_limit (mdb command)
Set the default number of lines printed by
the @samp{stack} and @samp{nondet_stack} commands to @var{size}.
If @var{size} is zero, the limit is disabled.
@sp 1
@item goal_paths on
@kindex goal_path (mdb command)
Turns on printing of goal paths at events.
@sp 1
@item goal_paths off
Turns off printing of goal paths at events.
@sp 1
@item goal_paths
Reports whether goal paths are printed at events.
@sp 1
@item scope all
@kindex scope (mdb command)
Sets the default scope of new breakpoints to ``all'',
i.e.@: by default, new breakpoints on procedures
will stop at all events in the procedure.
@sp 1
@item scope interface
Sets the default scope of new breakpoints to ``interface'',
i.e.@: by default, new breakpoints on procedures
will stop at all interface events in the procedure.
@sp 1
@item scope entry
Sets the default scope of new breakpoints to ``entry'',
i.e.@: by default, new breakpoints on procedures
will stop only at events representing calls to the procedure.
@sp 1
@item scope
Reports the current default scope of new breakpoints.
@sp 1
@item echo on
@kindex echo (mdb command)
Turns on the echoing of commands.
@sp 1
@item echo off
Turns off the echoing of commands.
@sp 1
@item echo
Reports whether commands are being echoed or not.
@sp 1
@item context none
@kindex context (mdb command)
@cindex line numbers
@cindex file names
When reporting events or ancestor levels,
does not print contexts (filename/line number pairs).
@sp 1
@item context before
When reporting events or ancestor levels,
prints contexts (filename/line number pairs)
before the identification of the event or call to which they refer,
on the same line.
With long fully qualified predicate and function names,
this may make the line wrap around.
@sp 1
@item context after
When reporting events or ancestor levels,
prints contexts (filename/line number pairs)
after the identification of the event or call to which they refer,
on the same line.
With long fully qualified predicate and function names,
this may make the line wrap around.
@sp 1
@item context prevline
When reporting events or ancestor levels,
prints contexts (filename/line number pairs) on a separate line
before the identification of the event or call to which they refer.
@sp 1
@item context nextline
When reporting events or ancestor levels,
prints contexts (filename/line number pairs) on a separate line
after the identification of the event or call to which they refer.
@sp 1
@item context
Reports where contexts are being printed.
@sp 1
@item user_event_context none
@kindex user_event_context (mdb command)
When reporting user-defined events,
does not print either filename/line number pairs or procedure ids.
@sp 1
@item user_event_context file
When reporting user-defined events,
prints only filename/line number pairs, not procedure ids.
@sp 1
@item user_event_context proc
When reporting user-defined events,
prints only procedure ids, not filename/line number pairs.
@sp 1
@item user_event_context full
When reporting user-defined events,
prints both filename/line number pairs and procedure ids.
@sp 1
@item user_event_context
Reports what parts of the context are being printed at user events.
@sp 1
@item list_context_lines @var{num}
@kindex list_context_lines (mdb command)
Sets the number of lines to be printed by the @samp{list} command
printed before and after the target context.
@sp 1
@item list_context_lines
Prints the number of lines to be printed by the @samp{list} command
printed before and after the target context.
@sp 1
@item list_path @var{dir1} @var{dir2} @dots{}
@kindex list_path (mdb command)
The @samp{list} command searches a list of directories
when looking for a source code file.
The @samp{list_path} command sets the search path
to the given list of directories.
@sp 1
@item list_path
When invoked without arguments, the @samp{list_path} command
prints the search path consulted by the @samp{list} command.
@sp 1
@item push_list_dir @var{dir1} @var{dir2} @dots{}
@kindex push_list_dir (mdb command)
Pushes the given directories
on to the search path consulted by the @samp{list} command.
@sp 1
@item pop_list_dir
@kindex pop_list_dir (mdb command)
Pops the leftmost (most recently pushed) directory
from the search path consulted by the @samp{list} command.
@sp 1
@item list_cmd @var{ExternalCommand}
@kindex list_cmd (mdb command)
Tells mdb that all future @samp{list} commands should be handled by
@var{ExternalCommand}.
The command will be called with four arguments:
the source file name,
the first line number (counting from 1),
the last line number,
the current line number.
The command should print all the lines from the first to the last,
both inclusive, with the current line marked (or highlighted) in some fashion
to standard output, and report any errors to standard error.
@sp 1
If @var{ExternalCommand} is @samp{none} then the @samp{list} command
will revert to printing source listings internally.
@sp 1
@item list_cmd
When invoked without arguments, the @samp{list_cmd} command
prints the last value set by the @samp{list_cmd} command.
@sp 1
@item fail_trace_counts @var{filename}
@kindex fail_trace_counts (mdb command)
The declarative debugger can exploit information
about the failing and passing test cases to ask better questions.
This command tells the @samp{dice} command
that @var{filename} contains execution trace counts from failing test cases.
The @samp{dice} command will use this file
unless this is overridden with its @samp{--fail-trace-counts} option.
@sp 1
@item fail_trace_counts
Prints the name of the file containing
execution trace counts from failing test cases,
if this has already been set.
@sp 1
@item pass_trace_counts @var{filename}
@kindex pass_trace_counts (mdb command)
The declarative debugger can exploit information
about the failing and passing test cases to ask better questions.
This command tells the @samp{dice} command
that @var{filename} contains execution trace counts from passing test cases.
The @samp{dice} command will use this file
unless this is overridden with its @samp{--pass-trace-counts} option.
@sp 1
@item pass_trace_counts
Prints the name of the file containing
execution trace counts from passing test cases,
if this has already been set.
@sp 1
@item max_io_actions @var{num}
@kindex max_io_actions (mdb command)
Set the maximum number of I/O actions to print
in questions from the declarative debugger to @var{num}.
@sp 1
@item max_io_actions
Prints the maximum number of I/O actions to print
in questions from the declarative debugger.
@sp 1
@item web_browser_cmd @var{command}
@kindex web_browser_cmd (mdb command)
Set the shell command used to launch a web browser to @var{command}.
@sp 1
@item web_browser_cmd
Prints the shell command used to launch a web browser,
if this has been set.
@sp 1
@item format [-APB] @var{format}
@kindex format (mdb command)
Sets the default format of the browser to @var{format},
which should be one of @samp{flat}, @samp{pretty} or @samp{verbose}.
@sp 1
The browser maintains separate configuration parameters
for the three commands @samp{print *}, @samp{print @var{var}},
and @samp{browse @var{var}}.
A @samp{format} command applies to all three,
unless it specifies one or more of the options
@samp{-A} or @samp{--print-all},
@samp{-P} or @samp{--print},
and @samp{-B} or @samp{--browse},
in which case it will set only the selected command's default format.
@sp 1
@item format_param [-APBfpv] @var{param} @var{value}
@kindex format_param (mdb command)
@kindex depth (mdb command)
@kindex size (mdb command)
@kindex width (mdb command)
@kindex lines (mdb command)
Sets one of the parameters of the browser to the given value.
The parameter @var{param} must be one of
@samp{depth}, @samp{size}, @samp{width} and @samp{lines}.
@sp 1
@itemize @bullet
@item
@samp{depth} is the maximum depth to which subterms will be displayed.
Subterms at the depth limit may be abbreviated as functor/arity,
or (in lists) may be replaced by an ellipsis (@samp{...}).
The principal functor of any term has depth zero.
For subterms which are not lists,
the depth of any argument of the functor is one greater than the
depth of the functor.
For subterms which are lists,
the depth of each element of the list
is one greater than the depth of the list.
@sp 1
@item
@samp{size} is the suggested maximum number of functors to display.
Beyond this limit, subterms may be abbreviated as functor/arity,
or (in lists) may be replaced by an ellipsis (@samp{...}).
For the purposes of this parameter,
the size of a list is one greater than
the sum of the sizes of the elements in the list.
@sp 1
@item
@samp{width} is the width of the screen in characters.
@sp 1
@item
@samp{lines} is the preferred maximum number of lines of one term to display.
@sp 1
@end itemize
@sp 1
The browser maintains separate configuration parameters
for the three commands @samp{print *}, @samp{print @var{var}},
and @samp{browse @var{var}}.
A @samp{format_param} command applies to all three,
unless it specifies one or more of the options
@samp{-A} or @samp{--print-all},
@samp{-P} or @samp{--print},
and @samp{-B} or @samp{--browse},
in which case it will set only the selected command's parameters.
@sp 1
The browser also maintains separate configuration parameters
for the different output formats: flat, pretty and verbose.
A @samp{format_param} command applies to all of these,
unless it specifies one or more of the options
@samp{-f} or @samp{--flat},
@samp{-p} or @samp{--pretty},
and @samp{-v} or @samp{--verbose},
in which case it will set only the selected format's parameter.
@sp 1
@item alias @var{name} @var{command} [@var{command-parameter} @dots{}]
@kindex alias (mdb command)
Introduces @var{name} as an alias
for the given command with the given parameters.
Whenever a command line has @var{name} as its first word,
the debugger will substitute the given command and parameters for this word
before executing the command line.
@sp 1
If @var{name} is the upper-case word @samp{EMPTY},
the debugger will substitute the given command and parameters
whenever the user types in an empty command line.
@sp 1
If @var{name} is the upper-case word @samp{NUMBER},
the debugger will insert the given command and parameters
before the command line
whenever the user types in a command line that consists of a single number.
@sp 1
@item unalias @var{name}
@kindex unalias (mdb command)
Removes any existing alias for @var{name}.
@end table

@sp 1
@node Help commands
@subsection Help commands

@sp 1
@table @code
@item document_category @var{slot} @var{category}
@kindex document_category (mdb command)
Create a new category of help items, named @var{category}.
The summary text for the category is given by the lines following this command,
up to but not including a line containing only the lower-case word @samp{end}.
The list of category summaries printed in response to the command @samp{help}
is ordered on the integer @var{slot} numbers of the categories involved.
@sp 1
@item document @var{category} @var{slot} @var{item}
@kindex document (mdb command)
Create a new help item named @var{item} in the help category @var{category}.
The text for the help item is given by the lines following this command,
up to but not including a line containing only the lower-case word @samp{end}.
The list of items printed in response to the command @samp{help @var{category}}
is ordered on the integer @var{slot} numbers of the items involved.
@sp 1
@item help @var{category} @var{item}
@kindex help (mdb command)
Prints help text about the item @var{item} in category @var{category}.
@sp 1
@item help @var{word}
Prints help text about @var{word},
which may be the name of a help category or a help item.
@sp 1
@item help
Prints summary information about all the available help categories.
@end table

@sp 1
@node Declarative debugging mdb commands
@subsection Declarative debugging mdb commands

@sp 1
The following commands relate to the declarative debugger.  See
@ref{Declarative debugging} for details.
@sp 1
@table @code
@item dd [-r] [-R] [-n@var{nodes}] [-s@var{search-mode}] [-p@var{passfile}] [-f@var{failfile}]
@c @item dd [--assume-all-io-is-tabled] [-d@var{depth}] [-t]
@c       [--debug [filename]]
@c The --assume-all-io-is-tabled option is for developers only. Specifying it
@c makes an assertion, and if the assertion is incorrect, the resulting
@c behaviour would be hard for non-developers to understand. The option is
@c therefore deliberately not documented.
@c @sp 1
@c The value of the @samp{-d} or @samp{--depth} option determines
@c how much of the annotated trace to build initially.  Subsequent runs
@c will try to add @var{nodes} events to the annotated trace, but initially
@c there is not enough information available to do this.  We do not document
@c this option since it requires an understanding of the internal workings of
@c the declarative debugger.
@c @sp 1
@c The @samp{-t} or @samp{--test} option causes the declarative debugger
@c to simulate a user who answers `no' to all questions, except for
@c `Is this a bug?' questions to which the simulated user answers `yes'.
@c This is useful for benchmarking the declarative debugger.
@c @sp 1
@c The @samp{--debug} option causes events generated by the declarative
@c debugger to become visible.  This allows the declarative debugger to be
@c debugged.
@c If a filename is provided, the front end of the debugger is not called
@c at all.  Instead a representation of the debugging tree is dumped to
@c the file.
@c @sp 1
Starts declarative debugging using the current event as the initial symptom.
@sp 1
When searching for bugs the declarative debugger needs to keep portions of the
execution trace in memory.  If it requires a new portion of the trace then it
needs to rerun the program.  The @samp{-n@var{nodes}} or
@samp{--nodes @var{nodes}} option tells the declarative debugger how
much of the execution trace to gather when it reruns the program.  A higher
value for @var{nodes} requires more memory, but improves the
performance of the declarative debugger for long running programs since it will
not have to rerun the program as often.
@sp 1
The @samp{-s@var{search-mode}} or @samp{--search-mode @var{search-mode}}
option tells the declarative debugger which
search mode to use.  Valid search modes are @samp{top_down} (or @samp{td}),
@samp{divide_and_query} (or @samp{dq}) and @samp{suspicion_divide_and_query}
(or @samp{sdq}).
@samp{top_down} is the default when this option is not given.
@sp 1
Use the @samp{-r} or @samp{--resume} option to continue your previous
declarative debugging session.  If the @samp{--resume} option is given and
there were no previous declarative debugging sessions then the option will be
ignored.  A @samp{dd --resume} command can be issued at any event.
The @samp{--search-mode} option may be used with the @samp{--resume} option
to change the search mode of a previously started declarative debugging
session.
@sp 1
Use the @samp{-R} or @samp{--reset-knowledge-base} option to reset the
declarative debugger's knowledge base.
The declarative debugger will forget any previous answers that
have been supplied.
It will ask previous questions again if it needs to.
This option does not affect what predicates or modules are trusted.
@sp 1
The arguments supplied to the @samp{--pass-trace-counts} (or @samp{-p}) and
@samp{--fail-trace-counts} (or @samp{-f}) options are either trace count
files or files containing a list of trace count files.
The supplied trace counts are used to assign
a suspicion to each event based on which parts of program were executed in
the failing test case(s), but not the passing test case(s).
This is used to guide the declarative debugger when
the suspicion-divide-and-query search mode is used.  If the
suspicion-divide-and-query search mode is specified then either both the
@samp{-p} and @samp{-f} options must be given, or the @samp{fail_trace_counts}
and @samp{pass_trace_counts} configuration parameters must be set (using
the @samp{set} command).
@item trust @var{module-name}|@var{proc-spec}
@kindex trust (mdb command)
Tells the declarative debugger to trust the given module, predicate or
function.
@sp 1
Individual predicates or functions can be trusted by just giving the
predicate or function name.  If there is more than one predicate or function
with the given name then a list of alternatives will be shown.
@sp 1
The entire Mercury standard library is trusted by default and can be
untrusted in the usual manner using the `untrust' command.  To restore trusted
status to the Mercury standard library issue the command
`trust standard library' or just `trust std lib'.
@sp 1
See also `trusted' and `untrust'.
@sp 1
@item trusted
@kindex trusted (mdb command)
Lists all the trusted modules, predicates and functions.  See also `trust'
and `untrust'.
@sp 1
@item untrust @var{num}
@kindex untrust (mdb command)
Removes the object from the list of trusted objects.  @var{num} should
correspond with the number shown in the list produced by issuing a `trusted'
command.  See also `trust' and `trusted'.
@end table

@sp 1
@node Miscellaneous commands
@subsection Miscellaneous commands

@sp 1
@table @code
@item source [-i] @var{filename} [@var{args}]
@kindex source (mdb command)
Executes the commands in the file named @var{filename}.
Optionally a list of at most nine arguments can be given.
Occurrences of the strings "$1" to "$9" in the sourced file
will be replaced by the corresponding arguments given in the source
command before the commands in the sourced file are executed.
@sp 1
Lines that start with a hash (#) character are ignored.
Hash characters can be used to place comments in your mdb scripts.
@sp 1
The option @samp{-i} or @samp{--ignore-errors} tells @samp{mdb}
not to complain if the named file does not exist or is not readable.
@sp 1
@item save @var{filename}
@kindex save (mdb command)
Saves the persistent state of the debugger
(aliases, print level, scroll controls,
set of breakpoints, browser parameters,
set of objects trusted by the declarative debugger, etc)
to the specified file.
The state is saved in the form of mdb commands,
so that sourcing the file will recreate the saved state.
Note that this command does not save transient state,
such as the current event.
There is also a small part of the persistent state
(breakpoints established with a @samp{break here} command)
that cannot be saved.
@sp 1
@item quit [-y]
@kindex quit (mdb command)
Quits the debugger and aborts the execution of the program.
If the option @samp{-y} is not present, asks for confirmation first.
Any answer starting with @samp{y}, or end-of-file, is considered confirmation.
@sp 1
End-of-file on the debugger's input is considered a quit command.
@end table

@sp 1
@node Experimental commands
@subsection Experimental commands

@sp 1
@table @code
@item histogram_all @var{filename}
@kindex histogram_all (mdb command)
Prints (to file @var{filename})
a histogram that counts all events at various depths
since the start of the program.
This histogram is available
only in some experimental versions of the Mercury runtime system.
@sp 1
@item histogram_exp @var{filename}
@kindex histogram_exp (mdb command)
Prints (to file @var{filename})
a histogram that counts all events at various depths
since the start of the program or since the histogram was last cleared.
This histogram is available
only in some experimental versions of the Mercury runtime system.
@sp 1
@item clear_histogram
@kindex clear_histogram (mdb command)
Clears the histogram printed by @samp{histogram_exp},
i.e.@: sets the counts for all depths to zero.
@sp 1
@item dice [-p@var{filename}] [-f@var{filename}] [-n@var{num}] [-s[pPfFsS]+] [-o @var{filename}] [-m @var{module}]
@kindex dice (mdb command)
Display a program dice on the screen.
@sp 1
A dice is a comparison between
some successful test runs of the program and a failing test run.
Before using the @samp{dice} command one or more passing execution summaries
and one failing execution summary need to be generated.
This can be done by compiling the program with deep tracing enabled
(either by compiling in a .debug or .decldebug grade
or with the @samp{--trace deep} or @samp{--trace rep} compiler options)
and then running the program under @samp{mtc}.
This will generate a file with the prefix
@samp{.mercury_trace_counts} and a unique suffix,
that contains a summary of the program's execution
This summary is called a slice.
Copy the generated slice to a new file for each test case,
to end up with a failing slice, say @samp{fail},
and some passing slices, say @samp{pass1}, @samp{pass2}, @samp{pass3}, etc.
Union the passing slices with a command such as
@samp{mtc_union -p passes pass1 pass2 pass3}.
@sp 1
The @samp{dice} command can use these files to display a table of statistics
comparing the passing test runs to the failing run.
Here is an example of a dice displayed in an mdb session:
@sp 1
@example
mdb> dice -f fail -p passes -s S -n 4
Procedure        Path/Port  File:Line Pass (3) Fail Suspicion
pred s.mrg/3-0   <s2;c2;e;> s.m:74       0 (0)    1      1.00
pred s.mrg/3-0   <s2;c2;t;> s.m:67      10 (3)    4      0.29
pred s.mrg/3-0   CALL       s.m:64      18 (3)    7      0.28
pred s.mrg/3-0   EXIT       s.m:64      18 (3)    7      0.28
@end example
@sp 1
This example tells us that the @samp{else} in @samp{s.m} on line 74
was executed once in the failing test run,
but never in the passing test runs,
so this would be a good place to start looking for a bug.
@sp 1
Each row in the table contains statistics
about the execution of a separate goal in the program.
Six columns are displayed:
@sp 1
@itemize @bullet
@item @samp{Procedure}:
The procedure in which the goal appears.
@item @samp{Path/Port}:
The goal path and/or port of the goal.  For atomic goals, statistics about the
CALL event and the corresponding EXIT, FAIL or EXCP event are displayed on
separate rows.  For other types of goals the goal path is displayed, except for
NEGE, NEGS and NEGF events where the goal path and port are displayed.
@item @samp{File:Line}:
The file name and line number of the goal.  This can be used to set a
breakpoint on the goal.
@item @samp{Pass (total passing test runs)}:
The total number of times the goal was executed in all the passing test runs.
This is followed by a number in parentheses which indicates the number of test
runs the goal was executed in.  The heading of this column also has a number in
parentheses which is the total number of passing test cases.  In the example
above we can see that 3 passing tests were run.
@item @samp{Fail}:
The number of times the goal was executed in the failing test run.
@item @samp{Suspicion}:
A number between 0 and 1 which gives an indication of how likely a
particular goal is to be buggy.  The is calculated as
Suspicion = F / (P + F) where F is the number of times the goal
was executed in the failing test run and P is the number of times the goal
was executed in passing test runs.
@end itemize
@sp 1
The name of the file containing the failing slice can be specified with the
@samp{-f} or @samp{--fail-trace-counts} option or with a separate
@samp{set fail_trace_count @var{filename}} command.
@sp 1
The name of the file containing the union of the passing slices
can be given with the @samp{-p} or @samp{--pass-trace-counts} option.
Alternatively a separate @samp{set pass_trace_counts @var{filename}} command
can be given.  See @ref{Trace counts} for more information about trace counts.
@sp 1
The table can be sorted on the Pass, Fail or Suspicion columns, or a
combination of these.  This can be done with the @samp{-s} or @samp{--sort}
option.  The argument of this option is a string made up of any combination of
the letters @samp{pPfFsS}.  The letters in the string indicate how the table
should be sorted:
@sp 1
@itemize @bullet
@item @samp{p}: Pass ascending
@item @samp{P}: Pass descending
@item @samp{f}: Fail ascending
@item @samp{F}: Fail descending
@item @samp{s}: Suspicion ascending
@item @samp{S}: Suspicion descending
@end itemize
@sp 1
For example, the string "SF" means sort the table by suspicion, descending, and
if any two suspicions are the same, then by number of executions in the failing
test case, descending.
@sp 1
The option @samp{-n} or @samp{--top} can be used to limit the number lines
displayed.  Only the top @var{num} lines, with respect to
the ordering specified by the @samp{-s} option, will be displayed.
By default the table is limited to 50 lines.
@sp 1
If the @samp{-o} or @samp{--output-to-file} option is given then the output
will be written to the specified file instead of being displayed on the
screen.  Note that the file will be overwritten without warning if it
already exists.
@sp 1
The @samp{-m} or @samp{--module} option limits the output to the given module
and its submodules, if any.
@end table

@sp 1
@node Developer commands
@subsection Developer commands

@sp 1
The following commands are intended for use by the developers
of the Mercury implementation.
@sp 1
@table @code
@item var_details
@kindex var_details (mdb command)
Prints all the information the debugger has
about all the variables at the current program point.
@c @item term_size @var{name}
@c @itemx term_size @var{num}
@c @itemx term_size *
@c @kindex term_size (mdb command)
@c In term size profiling grades, prints the size of the term
@c bound to the specified variable(s).
@c In other grades, reports an error.
@c @sp 1
@item flag
@kindex flag (mdb command)
Prints the values of all the runtime low-level debugging flags.
@sp 1
@item flag @var{flagname}
Prints the value of the specified runtime low-level debugging flag.
@sp 1
@item flag @var{flagname} on
Sets the specified runtime low-level debugging flag to true.
@sp 1
@item flag @var{flagname} off
Sets the specified runtime low-level debugging flag to false.
@sp 1
@item subgoal @var{n}
@kindex subgoal (mdb command)
In minimal model grades,
prints the details of the specified subgoal.
In other grades, it reports an error.
@sp 1
@item consumer @var{n}
@kindex consumer (mdb command)
In minimal model grades,
prints the details of the specified consumer.
In other grades, it reports an error.
@sp 1
@item gen_stack
@kindex gen_stack (mdb command)
In minimal model grades,
prints the contents of the frames on the generator stack.
In other grades, it reports an error.
@sp 1
@item cut_stack
@kindex cut_stack (mdb command)
In minimal model grades,
prints the contents of the frames on the cut stack.
In other grades, it reports an error.
@sp 1
@item pneg_stack
@kindex pneg_stack (mdb command)
In minimal model grades,
prints the contents of the frames on the possible negated context stack.
In other grades, it reports an error.
@sp 1
@item mm_stacks
@kindex mm_stacks (mdb command)
In minimal model grades,
prints the contents of the frames on the generator stack,
the cut stack and the possible negated context stack.
In other grades, it reports an error.
@sp 1
@item nondet_stack [-d] [-f@var{numframes}] [@var{numlines}]
@kindex nondet_stack (mdb command)
Prints the contents of the frames on the nondet stack.
By default, it prints only the fixed slots in each nondet stack frame,
but if the @samp{-d} or @samp{--detailed} option is given,
it will also print the names and values of the live variables in them.
@sp 1
The @samp{-f} option, if present, specifies that
only the topmost @var{numframes} stack frames should be printed.
@sp 1
The optional number @var{numlines}, if present,
specifies that only the topmost @var{numlines} lines should be printed.
@sp 1
@item stack_regs
@kindex stack_regs (mdb command)
Prints the contents of the virtual machine registers
that point to the det and nondet stacks.
@sp 1
@item all_regs
@kindex all_regs (mdb command)
Prints the contents of all the virtual machine registers.
@sp 1
@item debug_vars
@kindex debug_vars (mdb command)
Prints the values of the variables used by the debugger
to record event numbers, call sequence numbers and call depths.
@sp 1
@item stats [-f @var{filename}] @var{subject}
@kindex stats (mdb command)
Prints statistics about the given subject to standard output,
unless the @samp{-f} or @samp{--filename} option is given,
in which case it prints the statistic to @var{filename}.
@sp 1
@var{subject} can be @samp{procs},
which asks for statistics about proc layout structures in the program.
@sp 1
@var{subject} can be @samp{labels},
which asks for statistics about label layout structures in the program.
@sp 1
@var{subject} can be @samp{var_names},
which asks for statistics about the space occupied by variable names
in the layout structures in the program.
@sp 1
@var{subject} can be @samp{io_tabling},
which asks for statistics about the number of times
each predicate appears in the I/O action table.
@sp 1
@item print_optionals
@kindex print_optionals (mdb command)
Reports whether optionally-printed values such as typeinfos
that are usually of interest only to implementors are being printed or not.
@sp 1
@item print_optionals on
Tells the debugger to print optionally-printed values.
@sp 1
@item print_optionals off
Tells the debugger not to print optionally-printed values.
@sp 1
@item unhide_events
@kindex unhide_events (mdb command)
Reports whether events that are normally hidden
(that are usually of interest only to implementors)
are being exposed or not.
@sp 1
@item unhide_events on
Tells the debugger to expose events that are normally hidden.
@sp 1
@item unhide_events off
Tells the debugger to hide events that are normally hidden.
@sp 1
@item table @var{proc} [@var{num1} @dots{}]
@kindex table (mdb command)
Tells the debugger to print the call table of the named procedure,
together with the saved answer (if any) for each call.
Reports an error if the named procedure isn't tabled.
@sp 1
For now, this command is supported only for procedures
whose arguments are all either integers, floats or strings.
@sp 1
If the user specifies one or more integers on the command line,
the output is restricted to the entries in the call table in which
the @var{n}th argument is equal to the @var{n}th number on the command line.
@sp 1
@item type_ctor [-fr] @var{modulename} @var{typectorname} @var{arity}
@kindex type_ctor (mdb command)
Tests whether there is a type constructor defined in the given module,
with the given name, and with the given arity.
If there isn't, it prints a message to that effect.
If there is, it echoes the identity of the type constructor.
@sp 1
If the option @samp{-r} or @samp{--print-rep} option is given,
it also prints the name of the type representation scheme
used by the type constructor
(known as its `type_ctor_rep' in the implementation).
@sp 1
If the option @samp{-f} or @samp{--print-functors} option is given,
it also prints the names and arities
of function symbols defined by type constructor.
@sp 1
@item all_type_ctors [-fr] [@var{modulename}]
@kindex all_type_ctors (mdb command)
If the user specifies a module name,
lists all the type constructors defined in the given module.
If the user doesn't specify a module name,
lists all the type constructors defined in the whole program.
@sp 1
If the option @samp{-r} or @samp{--print-rep} option is given,
it also prints the name of the type representation scheme
of each type constructor
(known as its `type_ctor_rep' in the implementation).
@sp 1
If the option @samp{-f} or @samp{--print-functors} option is given,
it also prints the names and arities
of function symbols defined by each type constructor.
@sp 1
@item class_decl [-im] @var{modulename} @var{typeclassname} @var{arity}
@kindex class_decl (mdb command)
Tests whether there is a type class defined in the given module,
with the given name, and with the given arity.
If there isn't, it prints a message to that effect.
If there is, it echoes the identity of the type class.
@sp 1
If the option @samp{-m} or @samp{--print-methods} option is given,
it also lists all the methods of the type class.
@sp 1
If the option @samp{-i} or @samp{--print-instance} option is given,
it also lists all the instances of the type class.
@sp 1
@item all_class_decls [-im] [@var{modulename}]
@kindex all_class_decls (mdb command)
If the user specifies a module name,
lists all the type classes defined in the given module.
If the user doesn't specify a module name,
lists all the type classes defined in the whole program.
@sp 1
If the option @samp{-m} or @samp{--print-methods} option is given,
it also lists all the methods of each type class.
@sp 1
If the option @samp{-i} or @samp{--print-instance} option is given,
it also lists all the instances of each type class.
@sp 1
@item all_procedures [-su] [-m @var{modulename}] @var{filename}
@kindex all_procedures (mdb command)
In the absence of the @samp{-m} or @samp{--module} option,
puts a list of all the debuggable procedures in the program
into the named file.
In the presence of the @samp{-m} or @samp{--module} option,
puts a list of all the debuggable procedures in the names module
into the named file.
@sp 1
If the @samp{-s} or @samp{--separate} option is given,
the various components of procedure names are separated by spaces.
@sp 1
If the @samp{-u} or @samp{--uci} option is given,
the list will include the procedures of
compiler generated unify, compare, index and initialization predicates.
Normally, the list includes the procedures of only user defined predicates.
@sp 1
@item ambiguity [-o @var{filename}] [-ptfbs] [@var{modulename} @dots{}]
@kindex ambiguity (mdb command)
Print ambiguous procedure, type constructor and/or function symbol names.
A procedure name is ambiguous
if a predicate or function is defined with that name
in more than one module or with more than one arity.
A type constructor name is ambiguous
if a type constructor is defined with that name
in more than one module or with more than one arity.
A function symbol name is ambiguous
if a function symbol is defined with that name
in more than one module or with more than one arity.
@sp 1
If any module names are given, then only those modules are consulted,
(any ambiguities involving predicates, functions and type constructors
in non-listed modules are ignored).
The module names have to be fully qualified,
if a module @var{child} is a submodule of module @var{parent},
the module name list must include @var{parent.child};
listing just @var{child} won't work,
since that is not a fully qualified module name.
@sp 1
If the @samp{-o} or @samp{--outputfile} option is given,
the output goes to the file named as the argument of the option;
otherwise, it goes to standard output.
@sp 1
If given one or more of the @samp{-p}, @samp{-t} and @samp{-f} options,
or their long equivalents
@samp{--procedures}, @samp{--types}, and @samp{--functors},
this command prints ambiguities only for the indicated kinds of constructs.
The default is to print ambiguities for all these three kinds of constructs.
@sp 1
This command does not normally report
two kinds of ambiguities among procedures.
@sp 1
First, this command does not usually report
operations that have both function and predicate forms,
with the predicate version having a (usually output) argument
in place of the function's return value.
An example is @code{list.length} being both a function with arity one
and a predicate with arity two.
The reason for not reporting this by default is that
this is usually an @emph{intended} ambiguity,
and this command is usually used to find @emph{unintended} ambiguities,
so that they can be eliminated by renaming.
However, users can ask for these ambiguities to be printed
by specifying either the option @samp{-b},
or its long form @samp{--both-pred-and-func}.
@sp 1
Second, this command does not usually report
ambiguities involving procedures that were created by the compiler
as a type specialized version of another procedure.
The reason for not reporting this by default is that
ambiguities among the names of type specialized procedures
cannot arise without ambiguities among
the names of the original, not-yet-type-specialized procedures,
and eliminating the ambiguities among the original names
will perforce eliminate the ambiguities among the specialized names as well.
However, users can ask for these ambiguities to be printed
by specifying either the option @samp{-s},
or its long form @samp{--typespec}.
@sp 1
@item trail_details
@kindex trail_details (mdb command)
In grades that specify trailing,
prints out low-level details of the state of the trail.
In other grades, it reports an error.
@end table

@node Declarative debugging
@section Declarative debugging

The debugger incorporates a declarative debugger
which can be accessed from its command line.
Starting from an event that exhibits a bug,
e.g.@: an event giving a wrong answer,
the declarative debugger can find a bug which explains that behaviour
using knowledge of the intended interpretation of the program only.

Note that this is a work in progress,
so there are some limitations in the implementation.

@menu
* Declarative debugging overview::
* Declarative debugging concepts::
* Oracle questions::
* Declarative debugging commands::
* Diagnoses::
* Search modes::
* Improving the search::
@end menu

@node Declarative debugging overview
@subsection Overview

The declarative debugger tries to find a bug in your program by asking
questions about the correctness of calls executed in your program.

Because pure Mercury code does not have any side effects, the declarative
debugger can make inferences such as ``if a call produces incorrect output
from correct input, then there must be a bug in the code executed by one of
the descendants of the call''.

The declarative debugger is therefore able to automate much of the
`detective work' that must be done manually when using the
procedural debugger.

@node Declarative debugging concepts
@subsection Concepts

Every CALL event corresponds to an atomic goal,
the one printed by the "print" command at that event.
This atom has the actual arguments in the input argument positions
and distinct free variables in the output argument positions
(including the return value for functions).
We refer to this as the @emph{call atom} of the event.

The same view can be taken of EXIT events,
although in this case the outputs as well as the inputs will be bound.
We refer to this as the @emph{exit atom} of the event.
The exit atom is always an instance of
the call atom for the corresponding CALL event.

Using these concepts, it is possible to interpret
the events at which control leaves a procedure
as assertions about the semantics of the program.
These assertions may be true or false, depending on whether or not
the program's actual semantics are consistent with its intended semantics.

@sp 1
@table @asis
@item EXIT
The assertion corresponding to an EXIT event is that
the exit atom is valid in the intended interpretation.
In other words, the procedure generates correct outputs
for the given inputs.
@sp 1
@item FAIL
Every FAIL event has a matching CALL event,
and a (possibly empty) set of matching EXIT events
between the call and fail.
The assertion corresponding to a FAIL event is that
every instance of the call atom which is true in the intended interpretation
is an instance of one of the exit atoms.
In other words, the procedure generates the complete set of answers
for the given inputs.
(Note that this does not imply that all exit atoms represent correct answers;
some exit atoms may in fact be wrong,
but the truth of the assertion is not affected by this.)
@sp 1
@item EXCP
Every EXCP event is associated with an exception term,
and has a matching CALL event.
The assertion corresponding to an EXCP event is that
the call atom can abnormally terminate with the given exception.
In other words, the thrown exception was expected for that call.
@end table

If one of these assertions is wrong,
then we consider the event to represent incorrect behaviour of the program.
If the user encounters an event for which the assertion is wrong,
then they can request the declarative debugger to
diagnose the incorrect behaviour by giving the @samp{dd} command
to the procedural debugger at that event.

@node Oracle questions
@subsection Oracle questions

Once the @samp{dd} command has been given,
the declarative debugger asks the user
a series of questions about the truth of various assertions
in the intended interpretation.
The first question in this series will be about
the validity of the event for which the @samp{dd} command was given.
The answer to this question will nearly always be ``no'',
since the user has just implied the assertion is false
by giving the @samp{dd} command.
Later questions will be about other events
in the execution of the program,
not all of them necessarily of the same kind as the first.

The user is expected to act as an ``oracle''
and provide answers to these questions
based on their knowledge of the intended interpretation.
The debugger provides some help here:
previous answers are remembered and used where possible,
so questions are not repeated unnecessarily.
Commands are available to provide answers,
as well as to browse the arguments more closely
or to change the order in which the questions are asked.
See the next section for details of the commands that are available.

When seeking to determine the validity of
the assertion corresponding to an EXIT event,
the declarative debugger prints the exit atom
followed by the question @samp{Valid?} for the user to answer.
The atom is printed using
the same mechanism that the debugger uses to print values,
which means some arguments may be abbreviated if they are too large.

When seeking to determine the validity of
the assertion corresponding to a FAIL event,
the declarative debugger prints the call atom, prefixed by @samp{Call},
followed by each of the exit atoms
(indented, and on multiple lines if need be),
and prints the question @samp{Complete?} (or @samp{Unsatisfiable?} if there
are no solutions) for the user to answer.
Note that the user is not required to provide any missing instance
in the case that the answer is no.
(A limitation of the current implementation is that
it is difficult to browse a specific exit atom.
This will hopefully be addressed in the near future.)

When seeking to determine the validity of
the assertion corresponding to an EXCP event,
the declarative debugger prints the call atom
followed by the exception that was thrown,
and prints the question @samp{Expected?} for the user to answer.

In addition to asserting whether a call behaved correctly or not
the user may also assert that a call should never have occurred in the first
place, because its inputs violated some precondition of the call.  For example
if an unsorted list is passed to a predicate that is only designed to work with
sorted lists.  Such calls should be deemed @emph{inadmissible} by the user.
This tells the declarative debugger that either the call was given the wrong
input by its caller or whatever generated the input is incorrect.

In some circumstances
the declarative debugger provides a default answer to the question.
If this is the case, the default answer will be shown in square brackets
immediately after the question,
and simply pressing @key{RET} is equivalent to giving that answer.

@node Declarative debugging commands
@subsection Commands

At the above mentioned prompts, the following commands may be given.
Most commands can be abbreviated by their first letter.

It is also legal to press @key{RET} without specifying a command.
If there is a default answer (@pxref{Oracle questions}),
pressing @key{RET} is equivalent to giving that answer.
If there is no default answer,
pressing @key{RET} is equivalent to the skip command.

@table @code
@item yes
Answer `yes' to the current question.
@sp 1
@item no
Answer `no' to the current question.
@sp 1
@item inadmissible
Answer that the call is inadmissible.
@sp 1
@item trust
Answer that the predicate or function the question is about does not contain
any bugs.  However predicates or functions called by this predicate/function
may contain bugs.  The debugger will not ask you further questions about the
predicate or function in the current question.
@sp 1
@item trust module
Answer that the module the current question relates to does not contain any
bugs.  No more questions about any predicates or functions from this module
will be asked.
@item skip
Skip this question and ask a different one if possible.
@sp 1
@item undo
Undo the most recent answer or mode change.
@sp 1
@item mode [ top-down | divide-and-query | binary ]
Change the current search mode.  The search modes may be abbreviated to
@samp{td}, @samp{dq} and @samp{b} respectively.
@sp 1
@item browse [--web] [@var{n}]
Start the interactive term browser and browse the @var{n}th argument
before answering.  If the argument number
is omitted then browse the whole call as if it were a data term.
While browsing a @samp{track} command may be issued to find the point at
which the current subterm was bound (see @ref{Improving the search}).
To return to the declarative debugger question issue a @samp{quit}
command from within the interactive term browser.  For more information
on the use of the interactive term browser see the @samp{browse} command
in @ref{Browsing commands} or type @samp{help} from within the
interactive query browser.
@sp 1
Giving the @samp{--web} or @samp{-w} option causes the term to be displayed
in a web browser.
@sp 1
@item browse io [--web] @var{n}
Browse the @var{n}'th I/O action.
@sp 1
@item print [@var{n}]
Print the @var{n}'th argument of the current question.
If no argument is given, then display the current question.
@sp 1
@item print io @var{n}
Print the @var{n}'th I/O action.
@sp 1
@item print io @var{n}-@var{m}
Print the @var{n}'th to @var{m}'th I/O actions (inclusive).
@sp 1
@item print io limits
Print the values for which @samp{print @var{n}} makes sense.
@sp 1
@item print io
Print some I/O actions,
starting just after the last action printed (if there was one)
or at the first available action (if there was not).
@sp 1
@item format @var{format}
Set the default format to @var{format},
which should be one of @samp{flat}, @samp{verbose} or @samp{pretty}.
@sp 1
@item depth @var{num}
Set the maximum depth to which terms are printed to @var{num}.
@sp 1
@item depth io @var{num}
Set the maximum depth to which I/O actions are printed to @var{num}.
I/O actions are printed using the browser's @samp{print *} command so the
@samp{depth io} command updates the configuration parameters for the
browser's @samp{print *} command.
@sp 1
@item size @var{num}
Set the maximum number of function symbols
to be printed in terms to @var{num}.
@sp 1
@item size io @var{num}
Set the maximum number of function symbols
to be printed in I/O actions to @var{num}.
I/O actions are printed using the browser's @samp{print *} command so the
@samp{size io} command updates the configuration parameters for the
browser's @samp{print *} command.
@sp 1
@item width @var{num}
Set the number of columns in which terms are to be printed to @var{num}.
@sp 1
@item width io @var{num}
Set the number of columns in which I/O actions are to be printed to @var{num}.
I/O actions are printed using the browser's @samp{print *} command so the
@w{@samp{width io}} command updates the configuration parameters for the
browser's @samp{print *} command.
@sp 1
@item lines @var{num}
Set the maximum number of lines in terms to be printed to @var{num}.
@sp 1
@item lines io @var{num}
Set the maximum number of lines in I/O actions to be printed to @var{num}.
I/O actions are printed using the browser's @samp{print *} command so the
@samp{lines io} command updates the configuration parameters for the
browser's @samp{print *} command.
@sp 1
@item actions @var{num}
Set the maximum number of I/O actions to be printed in questions to @var{num}.
@sp 1
@item params
Print the current values of browser parameters.
@sp 1
@item track [-a] [@var{term-path}]
The @samp{track} command can only be given from within the interactive
term browser and tells the declarative debugger to find the point at which
the current subterm was bound.
If no argument is given the current subterm is taken to be incorrect.
If a @var{term-path} is given then the subterm at @var{term-path} relative to
the current subterm will be considered incorrect.
The declarative debugger will ask about the call that bound the given subterm
next.
To find out the location of the unification that bound the subterm,
issue an @samp{info} command when asked about the call that bound the subterm.
The declarative debugger can use one of two algorithms to find the
point at which the subterm was bound.
The first algorithm uses some heuristics
to find the subterm more quickly than the second algorithm.
It is possible, though unlikely,
for the first algorithm to find the wrong call.
The first algorithm is the default.
To tell the declarative debugger to
use the second, more accurate but slower algorithm,
give the @samp{-a} or @samp{--accurate} option to the @samp{track} command.
@item mark [-a] [@var{term-path}]
The @samp{mark} command has the same effect as the @samp{track} command
except that it also asserts that the atom is inadmissible or erroneous,
depending on whether the subterm is input or output respectively.
@sp 1
@item pd
Commence procedural debugging from the current point.
This command is notionally the inverse of the @samp{dd} command
in the procedural debugger.
The session can be resumed with a @samp{dd --resume} command.
@item quit
End the declarative debugging session and return to
the event at which the @samp{dd} command was given.
The session can be resumed with a @samp{dd --resume} command.
@sp 1
@item info
List the filename and line number of the predicate the current question
is about as well as the filename and line number where the predicate
was called (if this information is available).  Also print some information
about the state of the bug search, such as the current search mode,
how many events are yet to be eliminated and the reason for asking
the current question.
@sp 1
@item help [@var{command}]
Summarize the list of available commands or give help on a specific
command.
@end table

@node Diagnoses
@subsection Diagnoses

If the oracle keeps providing answers to the asked questions,
then the declarative debugger will eventually locate a bug.
A ``bug'', for our purposes,
is an assertion about some call which is false,
but for which the assertions about every child of that call are not false
(i.e. they are either correct or inadmissible).
There are four different classes of bugs that this debugger can diagnose,
one associated with each kind of assertion.

Assertions about EXIT events
lead to a kind of bug we call an ``incorrect contour''.
This is a contour (an execution path through the body of a clause)
which results in a wrong answer for that clause.
When the debugger diagnoses a bug of this kind, it displays the exit atoms in
the contour.  The resulting incorrect exit atom is displayed last.  The program
event associated with this bug, which we call the ``bug event'', is the exit
event at the end of the contour.

Assertions about FAIL events lead to a kind of bug we call
a ``partially uncovered atom''.
This is a call atom which has some instance which is valid,
but which is not covered by any of the applicable clauses.
When the debugger diagnoses a bug of this kind,
it displays the call atom;
it does not, however,
provide an actual instance that satisfies the above condition.
The bug event in this case is the fail event
reached after all the solutions were exhausted.

Assertions about EXCP events lead to a kind of bug we call
an ``unhandled exception''.
This is a contour which throws an exception
that needs to be handled but which is not handled.
When the debugger diagnoses a bug of this kind,
it displays the call atom
followed by the exception which was not handled.
The bug event in this case is the exception event
for the call in question.

If the assertion made by an EXIT, FAIL or EXCP event is false and one or
more of the children of the call that resulted in the incorrect EXIT, FAIL or
EXCP event is inadmissible, while all the other calls are correct, then an
``inadmissible call'' bug has been found.  This is a call that behaved
incorrectly (by producing the incorrect output, failing or throwing an
exception) because it passed unexpected input to one of its children.
The guilty call is displayed as well as the inadmissible child.

After the diagnosis is displayed, the user is asked to confirm
that the event located by the declarative debugger
does in fact represent a bug.
The user can answer @samp{yes} or @samp{y} to confirm the bug,
@samp{no} or @samp{n} to reject the bug,
or @samp{abort} or @samp{a} to abort the diagnosis.

If the user confirms the diagnosis,
they are returned to the procedural debugger
at the event which was found to be the bug event.
This gives the user an opportunity, if they need it,
to investigate (procedurally) the events in the neighbourhood of the bug.

If the user rejects the diagnosis,
which implies that some of their earlier answers may have been mistakes,
diagnosis is resumed from some earlier point determined by the debugger.
The user may now be asked questions they have already answered,
with the previous answer they gave being the default,
or they may be asked entirely new questions.

If the user aborts the diagnosis,
they are returned to the event at which the @samp{dd} command was given.

@node Search modes
@subsection Search modes

The declarative debugger can operate in one of several modes when
searching for a bug.
Different search modes will result in different sequences of questions
being asked by the declarative debugger.
The user can specify which mode to use by giving the
@samp{--search-mode} option to the @samp{dd} command (see
@ref{Declarative debugging mdb commands}) or with the @samp{mode} declarative
debugger command (see @ref{Declarative debugging commands}).

@subsubsection Top-down mode

Using this mode the declarative debugger will ask about the children of the
last question the user answered @samp{no} to.  The child calls will be asked
about in the order they were executed.  This makes the search more predictable
from the user's point of view as the questions will more or less follow the
program execution.  The drawback of top-down search is that it may require a
lot of questions to be answered before a bug is found, especially with deeply
recursive programs.

This search mode is used by default when no other mode is specified.

@subsubsection Divide and query mode

With this search mode the declarative debugger attempts to halve the size
of the search space with each question.  In many cases this will result in the
bug being found after O(log(N)) questions where N is the number of events
between the event where the @samp{dd} command was given and the corresponding
@samp{CALL} event.  This makes the search feasible for long running programs
where top-down search would require an unreasonably large number of questions
to be answered.  However, the questions may appear to come from unrelated parts
of the program which can make them harder to answer.

@subsubsection Suspicion divide and query mode

In this search mode the declarative debugger assigns a suspicion level to
each event based on which parts of the program were executed in failing
test cases, but not in passing test cases.  It then attempts to divide the
search space into two areas of equal suspicion with each question.  This tends
to result in questions about parts of the program executed in a failing test
case, but not in passing test cases.

@subsubsection Binary search mode

The user may ask the declarative debugger to do a binary search along the
path in the call tree between the current question and the question that the
user last answered @samp{no} to.  This is useful, for example, when a
recursive predicate is producing incorrect output, but the base case is
correct.

@node Improving the search
@subsection Improving the search

The number of questions asked by the declarative debugger before it pinpoints
the location of a bug can be reduced by giving it extra information.  The kind
of extra information that can be given and how to convey this information are
explained in this section.

@subsubsection Tracking suspicious subterms

An incorrect subterm can be tracked to the call that bound the subterm
from within the interactive term browser
(see @ref{Declarative debugging commands}).

After issuing a @samp{track} command,
the next question asked by the declarative debugger will
be about the call that bound the incorrect subterm,
unless that call was
eliminated as a possible bug because of an answer to a previous
question or the call that bound the subterm was not traced.

For example consider the following fragment of a program that calculates
payments for a loan:

@example
:- type payment
        --->   payment(
                       date    :: date,
                       amount  :: float
               ).

:- type date ---> date(int, int, int).  % date(day, month, year).

:- pred get_payment(loan::in, int::in, payment::out) is det.

get_payment(Loan, PaymentNo, Payment) :-
    get_payment_amount(Loan, PaymentNo, Amount),
    get_payment_date(Loan, PaymentNo, Date),
    Payment = payment(Date, Amount).
@end example

Suppose that @code{get_payment} produces an incorrect result and the
declarative debugger asks:

@noindent
@example
get_payment(loan(...), 10, payment(date(9, 10, 1977), 10.000000000000)).
Valid?
@end example

Then if we know that this is the right payment amount for the given loan,
but the date is incorrect, we can track the @code{date(...)} subterm and the
debugger will then ask us about @code{get_payment_date}:

@noindent
@example
get_payment(loan(...), 10, payment(date(9, 10, 1977), 10.000000000000)).
Valid? browse
browser> cd 3/1
browser> ls
date(9, 10, 1977)
browser> track
get_payment_date(loan(...), 10, date(9, 10, 1977)).
Valid?
@end example

Thus irrelevant questions about @code{get_payment_amount} are avoided.

@noindent
If, say, the date was only wrong in the year part, then we could also have
tracked the year subterm in which case the next question would have been about
the call that constructed the year part of the date.

This feature is also useful when using the procedural debugger.  For example,
suppose that you come across a @samp{CALL} event and you would like to know the
source of a particular input to the call.  To find out you could first go to
the final event by issuing a @samp{finish} command.  Invoke the declarative
debugger with a @samp{dd} command and then track the input term you are
interested in.  The next question will be about the call that bound the term.
Issue a @samp{pd} command at this point to return to the procedural debugger.
It will now show the final event of the call that bound the term.

Note that this feature is only available if the executable is compiled
in a .decldebug grade or with the @samp{--trace rep} option.  If a module
is compiled with the @samp{--trace rep} option but other modules in the
program are not then you will not be able to track subterms through those
other modules.

@subsubsection Trusting predicates, functions and modules

The declarative debugger can also be told to assume that certain predicates,
functions or entire modules do not contain any bugs.  The declarative
debugger will never ask questions about trusted predicates or functions.  It
is a good idea to trust standard library modules imported by a program being
debugged.

The declarative debugger can be told which predicates/functions it can trust
before the @samp{dd} command is given.  This is done using the @samp{trust},
@samp{trusted} and @samp{untrust} commands at the mdb prompt (see
@ref{Declarative debugging mdb commands} for details on how to use these
commands).

Trust commands may be placed in the @samp{.mdbrc} file which contains default
settings for mdb (see @ref{Mercury debugger invocation}).  Trusted
predicates will also be exported with a @samp{save} command (see
@ref{Miscellaneous commands}).

During the declarative debugging session the user may tell the declarative
debugger to trust the predicate or function in the current question.
Alternatively the user may tell the declarative debugger to trust all the
predicates and functions in the same module as the predicate or function in the
current question.  See the @samp{trust} command in
@ref{Declarative debugging commands}.

@subsubsection When different search modes are used

If a search mode is given when invoking the declarative debugger then that
search mode will be used, unless (a) a subterm is tracked during the session,
or (b) the user has not answered @samp{no} to any questions yet,
in which case top-down search is used until @samp{no} is answered to at least
one question.

If no search mode is specified with the @samp{dd} command then
the search mode depends on if the @samp{--resume} option is
given.
If it is then the previous search mode will be used,
otherwise top-down search will be used.

You can check the search mode used to find a particular question by issuing
an @samp{info} command at the question prompt in the declarative debugger.
You can also change the search mode from within the declarative debugger
with the @samp{mode} command.

@node Trace counts
@section Trace counts

A program with debugging enabled may be run in a special mode
that causes it to write out to a @emph{trace count file}
a record of how many times each @emph{debugger event} in the program
was executed during that run.

Trace counts are useful for determining
what parts of a failing program are being run
and possibly causing the failure;
this is called @emph{slicing}.
Slices from failing and passing runs can be compared
to see which parts of the program are being executed during failing runs,
but not during passing runs; this is called @emph{dicing}.

@menu
* Generating trace counts::
* Combining trace counts::
* Slicing::
* Dicing::
* Coverage testing::
@end menu

@node Generating trace counts
@subsection Generating trace counts

To generate a slice for a program run,
first compile the program with deep tracing enabled
(either by using the @samp{--trace deep} option
or by compiling the program in a debugging grade).
Then invoke the program with the @samp{mtc} script,
passing any required arguments after the program name.
@sp 1
For example:
@sp 1
@example
mtc ./myprog arg1 arg2
@end example
@sp 1
The program will run as usual, except that when it terminates
it will write the number of times each debugger event was executed
to a trace count file.
@sp 1
@samp{mtc} accepts an @samp{-o} or @samp{--output-file} option.
The argument to this option is the filename to use
for the generated trace count file.
If this option is not given,
then the trace count will be written to a file
with the prefix @samp{.mercury_trace_counts} and a unique suffix.
@sp 1
Ordinarily, the generated trace count file will list
only the debugger events that were actually executed during this run.
However, it will list all debugger events, even unexecuted ones,
if @samp{mtc} is given the @samp{-c} or @samp{--coverage-test} option.
@sp 1
@samp{mtc} also supports two more options intended for coverage testing:
@samp{-s} or @samp{--summary-file}, and @samp{--summary-count}.
These each set an option in the @env{MERCURY_OPTIONS} environment variable,
@samp{--trace-count-summary-file} and @samp{--trace-count-summary-max}
respectively.
For the documentation of these @samp{mtc} options,
see the documentation of @env{MERCURY_OPTIONS} environment variable.

@sp 1

Trace count files
can be manipulated with the @samp{mtc_union} and @samp{mtc_diff} tools,
and they can be analysed by the @samp{mslice} and @samp{mdice} tools.
They can also be used to help direct a declarative debugging search
(see @ref{Search modes}).

@sp 1

@node Combining trace counts
@subsection Combining trace counts

The @samp{mtc_union} tool can be used
to combine several trace count files into one trace count file.
You need to use this when you have
many trace count files you wish to analyse with @samp{mslice} or @samp{mdice}.

@samp{mtc_union} is invoked by issuing a command of the form:
@sp 1
@example
mtc_union [-v] -o output_file file1 file2 @dots{}
@end example
@sp 1
@samp{file1}, @samp{file2}, etc.
are the trace count files that should be combined.
The new trace count file will be written to @samp{output_file}.
This file will preserve
the count of the test cases that contributed to its contents,
even if some of @samp{file1}, @samp{file2}, etc themselves
were created by @samp{mtc_union}.
If the @samp{-v} or @samp{--verbose} option is specified
then a progress message will be displayed
as each file is read and its contents merged into the union.

The @samp{mtc_diff} tool can be used
to subtract one trace count file from another.

@samp{mtc_diff} is invoked by issuing a command of the form:
@sp 1
@example
mtc_diff -o output_file file1 file2
@end example
@sp 1
@samp{file1} and @samp{file2} must both be trace counts files.
The output, written to @samp{output_file}, will contain
the difference between the trace counts in @samp{file1} and @samp{file2}
for every event that occurs in @samp{file1}.
Unlike @samp{mtc_union}, @samp{mtc_diff} does not preserve
the count of the test cases that contributed to its contents in any useful way.

@sp 1

@node Slicing
@subsection Slicing

Once a slice has been generated
it can be viewed in various ways using the mslice tool.
The output of the mslice tool will look something like the following:
@sp 1
@example
Procedure            Path/Port File:Line Count (1)
pred mrg.merge/3-0   CALL      mrg.m:60     14 (1)
pred mrg.merge/3-0   EXIT      mrg.m:60     14 (1)
pred mrg.msort_n/4-0 CALL      mrg.m:33     12 (1)
pred mrg.msort_n/4-0 EXIT      mrg.m:33     12 (1)
pred mrg.msort_n/4-0 <?;>      mrg.m:35     12 (1)
@end example
@sp 1
Each row corresponds to a label in the program.
The meanings of the columns are as follows:
@itemize @bullet
@item @samp{Procedure}:
This column displays the procedure that the label relates to.
@item @samp{Path/Port}:
For interface events this column displays the event port,
while for internal events it displays the goal path.
(See @ref{Tracing of Mercury programs}
for an explanation of interface and internal events.)
@item @samp{File:Line}:
This column displays the context of the event.
@item @samp{Count}:
This column displays how many times the event was executed.
The number in parentheses for each event row
says in how many runs the event was executed.
The number in parentheses in the heading row (after the word "Count")
indicates how many runs were represented
in the trace counts file analysed by the mslice tool.
@end itemize

@sp 1

The mslice tool is invoked using a command of the form:
@example
mslice [-s sortspec] [-l N] [-m module] [-n N] [-p N] [-f N] file
@end example
@sp 1
where @samp{file} is a trace count file,
generated either directly by a program run
or indirectly by the @samp{mtc_union} or @samp{mtc_diff} tools.
@sp 1
The @samp{-s} or @samp{--sort} option
specifies how the output should be sorted.
@samp{sortspec} should be a string made up of
any combination of the letters @samp{cCtT}.
Each letter specifies a column and direction to sort on:
@itemize @bullet
@item @samp{c}: Count ascending
@item @samp{C}: Count descending
@item @samp{t}: Number of runs ascending
@item @samp{T}: Number of runs descending
@end itemize
@sp 1
For example, the option @samp{-s cT} will sort the output table
by the Count column in ascending order.
If the counts for two or more events are the same,
then those events will be sorted by number of runs in descending order.
@sp 1
The default is to sort descending on the Count column.
@sp 1
The @samp{-l} or @samp{--limit} option limits the output to @samp{N} lines.
@sp 1
The @samp{-m} or @samp{--module} option limits the output
to events only from the given module.
@sp 1
The @samp{-n} or @samp{--max-name-column-width} option's argument gives the
maximum width of the column containing predicate and function names.
If the argument is zero, there is no maximum width.
@sp 1
The @samp{-p} or @samp{--max-path-column-width} option's argument gives the
maximum width of the column containing ports and goal paths.
If the argument is zero, there is no maximum width.
@sp 1
The @samp{-f} or @samp{--max-file-column-width} option's argument gives the
maximum width of the column containing file names and line numbers.
If the argument is zero, there is no maximum width.
@sp 1

@node Dicing
@subsection Dicing

A dice is a comparison between passing and failing runs of a program.
@sp 1
Dice are created using the @samp{mdice} tool.
To use the @samp{mdice} tool,
one must first generate a set of trace count files for passing runs
and a set of trace count files for failing runs
using the @samp{mtc} tool (@ref{Generating trace counts}).
Once this has been done,
and the union of each set computed using @samp{mtc_union},
@samp{mdice} can be used to display a table of statistics
that compares the passing runs to the failing runs.
@sp 1
Here is an example of the output of the @samp{mdice} tool:
@sp 1
@example
Procedure        Path/Port  File:Line Pass (3) Fail Suspicion
pred s.mrg/3-0   <s2;c2;e;> s.m:74       0 (0)    1      1.00
pred s.mrg/3-0   <s2;c2;t;> s.m:67      10 (3)    4      0.29
pred s.mrg/3-0   CALL       s.m:64      18 (3)    7      0.28
pred s.mrg/3-0   EXIT       s.m:64      18 (3)    7      0.28
@end example
@sp 1
This example tells us that the @samp{else} in @samp{s.m} on line 74
was executed once in the failing test run,
but never during the passing test runs,
so this would be a good place to start looking for a bug.
@sp 1
Each row corresponds to an event in the program.
The meanings of the columns are as follows:
@itemize @bullet
@item @samp{Procedure}:
This column displays the procedure the event relates to.
@item @samp{Path/Port}:
For interface events this column displays the event port,
while for internal events it displays the goal path.
(See @ref{Tracing of Mercury programs}
for an explanation of interface and internal events.)
@item @samp{File:Line}:
This column displays the context of the event.
@item @samp{Pass (total passing test runs)}:
This columns displays the total number of times
the event was executed in all the passing test runs.
This is followed by a number in parentheses
which indicates the number of test runs the event was executed in.
The heading of this column also has a number in parentheses
which is the total number of passing test cases.
@item @samp{Fail}:
This column displays the number of times
the goal was executed in the failing test run(s).
@item @samp{Suspicion}:
This columns displays a number between 0 and 1
which gives an indication of how likely a particular goal is to contain a bug.
The suspicion is calculated as Suspicion = F / (P + F)
where F is the number of times the goal was executed in failing runs
and P is the number of times the goal was executed in passing runs.
@end itemize
@sp 1
The @samp{mdice} tool is invoked with a command of the form:
@sp 1
@example
mdice [-s sortspec] [-l N] [-m module] [-n N] [-p N] [-f N] passfile failfile
@end example
@samp{passfile} is a trace count file,
generated either directly by a passing program run
or as the union of the trace count files of passing program runs.
@samp{failfile} is a trace count file,
generated either directly by a failing program run
or as the union of the trace count files of failing program runs.
@sp 1
The table can be sorted on the Pass, Fail or Suspicion columns,
or a combination of these.
This can be done with the @samp{-s} or @samp{--sort} option.
The argument of this option is a string
made up of any combination of the letters @samp{pPfFsS}.
The letters in the string indicate how the table should be sorted:
@sp 1
@itemize @bullet
@item @samp{p}: Pass ascending
@item @samp{P}: Pass descending
@item @samp{f}: Fail ascending
@item @samp{F}: Fail descending
@item @samp{s}: Suspicion ascending
@item @samp{S}: Suspicion descending
@end itemize
@sp 1
For example the string "SF" means
sort the table by suspicion in descending order,
and if any two suspicions are the same,
then by number of executions in the failing run(s), also in descending order.
@sp 1
The default is to sort descending on the Suspicion column.
@sp 1
The option @samp{-l} or @samp{--limit}
can be used to limit the number of lines displayed.
@sp 1
The @samp{-m} or @samp{--module} option
limits the output to the given module and any submodules.
@sp 1
The @samp{-n} or @samp{--max-name-column-width} option's argument gives the
maximum width of the column containing predicate and function names.
If the argument is zero, there is no maximum width.
@sp 1
The @samp{-p} or @samp{--max-path-column-width} option's argument gives the
maximum width of the column containing ports and goal paths.
If the argument is zero, there is no maximum width.
@sp 1
The @samp{-f} or @samp{--max-file-column-width} option's argument gives the
maximum width of the column containing file names and line numbers.
If the argument is zero, there is no maximum width.
@sp 1

@node Coverage testing
@subsection Coverage testing

Coverage testing is the process of finding out
which parts of the code of a program
are not executed during any test case,
so that new test cases can be designed specifically to exercise those parts.
@sp 1
The first step in coverage testing a Mercury program
is compiling that program with execution tracing enabled,
either by using the @samp{--trace deep} option
or by compiling the program in a debugging grade.
The second step is to execute that program on all its test cases
with coverage testing enabled.
This can be done either by running the program with @samp{mtc --coverage-test},
or by including one of the corresponding options
(@samp{--coverage-test} or @samp{--coverage-test-if-exec=@var{programname}})
in the value of the @env{MERCURY_OPTIONS} environment variable.
These runs generate a set of trace counts files
that can be given to the Mercury test coverage tool, the @samp{mcov} program.
As usual, trace count files are named with the prefix
@samp{.mercury_trace_counts} if the @samp{mtc --output-file} option is not
given.
@sp 1
The @samp{mcov} tool is invoked with a command of the form:
@sp 1
@example
mcov [-d] [-v] [-o output_file] tracecountfile1 @dots{}
@end example
The arguments consist of one or more trace count files.
The output will normally be a list of all the procedures in the program
that were not executed in any of the runs
that generated these trace count files.
The output will go to standard output
unless this is overridden by the @samp{-o} or @samp{--output-file} option.
@sp 1
If the @samp{-d} or @samp{--detailed} option is specified,
then the output will list all the @emph{events} in the program
that were not executed in any of these runs.
This option can thus show the unexecuted parts of the executed procedures.
@sp 1
If the @samp{-v} or @samp{--verbose} option is specified,
then a progress message will be displayed as each file is read.

@c ----------------------------------------------------------------------------

@node Profiling
@chapter Profiling
@pindex mprof
@pindex mdprof
@cindex Profiling
@cindex Profiling memory allocation
@cindex Time profiling
@cindex Heap profiling
@cindex Memory profiling
@cindex Allocation profiling
@cindex Deep profiling

@menu
* Profiling introduction::          What is profiling useful for?
* Building profiled applications::  How to enable profiling.
* Creating profiles::               How to create profile data.
* Using mprof for time profiling::  How to analyze the time performance of a
                                    program with mprof.
* Using mprof for profiling memory allocation::
                                    How to analyze the memory performance of a
                                    program with mprof.
* Using mprof for profiling memory retention::
                                    How to analyze what memory is on the heap.
* Using mdprof::                    How to analyze the time and/or memory
                                    performance of a program with mdprof.
* Using threadscope::               How to analyse the parallel
                                    execution of a program with threadscope.
* Profiling and shared libraries::  Profiling dynamically linked executables.
@end menu

@node Profiling introduction
@section Profiling introduction
@cindex Profiling
@cindex Measuring performance
@cindex Optimization
@cindex Efficiency
@cindex Parallel performance

To obtain the best trade-off between productivity and efficiency,
programmers should not spend too much time optimizing their code
until they know which parts of the code are really taking up most of the time.
Only once the code has been profiled should the programmer consider
making optimizations that would improve efficiency
at the expense of readability or ease of maintenance.
A good profiler is therefore a tool
that should be part of every software engineer's toolkit.

Mercury programs can be analyzed using two distinct profilers.
The Mercury profiler @samp{mprof} is a conventional call-graph profiler
(or graph profiler for short) in the style of @samp{gprof}.
The Mercury deep profiler @samp{mdprof} is a new kind of profiler
that associates a lot more context with each measurement.
@samp{mprof} can be used to profile either time or space,
but not both at the same time;
@samp{mdprof} can profile both time and space at the same time.

The parallel execution of Mercury programs can be analyzed with a third
profiler called @samp{threadscope}.
@samp{threadscope} allows programmers to visualise CPU utilisation for work,
garbage collection, and idle time.
This enables programmers to see the effect of parallelization decisions such as
task granularity.
The @samp{threadscope} tool is not included with the Melbourne Mercury
Compiler,
See @url{https://research.microsoft.com/en-us/projects/threadscope/,
Threadscope: Performance Tuning Parallel Haskell Programs}.

@node Building profiled applications
@section Building profiled applications
@cindex Building profiled applications
@pindex mprof
@pindex mdprof
@pindex threadscope
@cindex Time profiling
@cindex Heap profiling
@cindex Memory profiling
@cindex Allocation profiling
@cindex Deep profiling
@cindex Threadscope profiling
@cindex Parallel runtime profiling
@findex --parallel
@findex --threadscope

To enable profiling, your program must be built with profiling enabled.
The three different profilers require different support,
and thus you must choose which one to enable when you build your program.

@itemize @bullet
@item
To build your program with time profiling enabled for @samp{mprof},
pass the @samp{-p} (@samp{--profiling}) option to @samp{mmc}
(and also to @samp{mgnuc} and @samp{ml}, if you invoke them separately).
@item
To build your program with memory profiling enabled for @samp{mprof},
pass the @samp{--memory-profiling} option to @samp{mmc},
@samp{mgnuc} and @samp{ml}.
@item
To build your program with deep profiling enabled (for @samp{mdprof}),
pass the @samp{--deep-profiling} option to @samp{mmc},
@samp{mgnuc} and @samp{ml}.
@item
To build your program with threadscope profiling enabled
(for @samp{threadscope}).
pass the @samp{--parallel} and @samp{--threadscope} options to @samp{mmc},
@samp{mgnuc} and @samp{ml}.
@end itemize

If you are using Mmake,
then you pass these options to all the relevant programs
by setting the @samp{GRADEFLAGS} variable in your Mmakefile,
e.g.@: by adding the line @samp{GRADEFLAGS=--profiling}.
(For more information about the different grades,
see @ref{Grade options}.)

Enabling @samp{mprof} or @samp{mdprof} profiling has several effects.
First, it causes the compiler to generate slightly modified code,
which counts the number of times each predicate or function is called,
and for every call, records the caller and callee.
With deep profiling, there are other modifications as well, the most important
impact of which is the loss of tail-recursion.
(By default, the deep profiling versions of the library and runtime are built
with @samp{--stack-segments} in order to minimize this impact.)
Second, your program will be linked with versions of the library and runtime
that were compiled with the same kind of profiling enabled.
Third, if you enable graph profiling,
the compiler will generate for each source file
the static call graph for that file in @samp{@var{module}.prof}.

Enabling @samp{threadscope} profiling causes the compiler to build the program
against a different runtime system.
This runtime system logs events relevant to parallel execution.
@samp{threadscope} support is not compatible with all processors,
see @file{README.ThreadScope} for more information.

@node Creating profiles
@section Creating profiles
@cindex Profiling
@cindex Creating profiles
@pindex mprof
@pindex mdprof
@cindex Time profiling
@cindex Heap profiling
@cindex Memory profiling
@cindex Allocation profiling
@cindex Deep profiling

Once you have created a profiled executable,
you can gather profiling information by running the profiled executable
on some test data that is representative of the intended uses of the program.
The profiling version of your program
will collect profiling information during execution,
and save this information at the end of execution,
provided execution terminates normally and not via an abort.

Executables compiled with @samp{--profiling}
save profiling data in the files
@file{Prof.Counts}, @file{Prof.Decl}, and @file{Prof.CallPair}.
(@file{Prof.Decl} contains the names
of the procedures and their associated addresses,
@file{Prof.CallPair} records the number of times
each procedure was called by each different caller,
and @file{Prof.Counts} records the number of times
that execution was in each procedure when a profiling interrupt occurred.)
Executables compiled with @samp{--memory-profiling}
will use two of those files (@file{Prof.Decl} and @file{Prof.CallPair})
and two others: @file{Prof.MemoryWords} and @file{Prof.MemoryCells}.
Executables compiled with @samp{--deep-profiling}
save profiling data in two files whose names will have form
@file{@var{programname}_on_@var{date}_at_@var{time}.data} and
@file{@var{programname}_on_@var{date}_at_@var{time}.procrep}.
(On Windows, the @code{.exe} suffix will be omitted from @var{programname}.)
Executables compiled with the @samp{--threadscope} option write profiling data
to a file whose name is that of the program being profiled with the extension
@samp{.eventlog}.
For example, the profile for the program @samp{my_program} would be written to
the file @file{my_program.eventlog}.

It is also possible to combine @samp{mprof} profiling results
from multiple runs of your program.
You can do by running your program several times,
and typing @samp{mprof_merge_counts} after each run.
It is not (yet) possible to combine @samp{mdprof} profiling results
from multiple runs of your program.

Due to a known timing-related bug in our code,
you may occasionally get segmentation violations
when running your program with @samp{mprof} profiling enabled.
If this happens, just run it again --- the problem occurs only very rarely.
The same vulnerability does not occur with @samp{mdprof} profiling.

With the @samp{mprof} and @samp{mdprof} profilers,
you can control whether time profiling measures
real (elapsed) time, user time plus system time, or user time only,
by including the options @samp{-Tr}, @samp{-Tp}, or @samp{-Tv} respectively
in the environment variable @env{MERCURY_OPTIONS}
when you run the program to be profiled.
@c (See the environment variables section below.)
Currently, only the @samp{-Tr} option works on Cygwin; on that
platform it is the default.
@c the above sentence is duplicated below

The default is user time plus system time,
which counts all time spent executing the process,
including time spent by the operating system working on behalf of the process,
but not including time that the process was suspended
(e.g.@: due to time slicing, or while waiting for input).
When measuring real time,
profiling counts even periods during which the process was suspended.
When measuring user time only,
profiling does not count time inside the operating system at all.

@node Using mprof for time profiling
@section Using mprof for time profiling
@pindex mprof
@cindex Time profiling

To display the graph profile information
gathered from one or more profiling runs,
just type @samp{mprof} or @samp{mprof -c}.
(For programs built with @samp{--high-level-code},
you need to also pass the @samp{--no-demangle} option to @samp{mprof} as well.)
@findex --high-level-code
@findex --demangle
@findex --no-demangle
Note that @samp{mprof} can take quite a while to execute
(especially with @samp{-c}),
and will usually produce quite a lot of output,
so you will usually want to redirect the output into a file
with a command such as @samp{mprof > mprof.out}.

The output of @samp{mprof -c} consists of three major sections.
These are named the call graph profile,
the flat profile and the alphabetic listing.
The output of @samp{mprof} contains
the flat profile and the alphabetic listing only.

@cindex Call graph profile
The call graph profile presents the local call graph of each procedure.
For each procedure it shows
the parents (callers) and children (callees) of that procedure,
and shows the execution time and call counts for each parent and child.
It is sorted on the total amount of time spent
in the procedure and all of its descendants
(i.e.@: all of the procedures that it calls, directly or indirectly.)

@cindex Flat profile
The flat profile presents the just execution time spent in each procedure.
It does not count the time spent in descendants of a procedure.

The alphabetic listing just lists the procedures in alphabetical order,
along with their index number in the call graph profile,
so that you can quickly find the entry for a particular procedure
in the call graph profile.

@cindex Profiling interrupts
The profiler works by interrupting the program at frequent intervals,
and each time recording the currently active procedure and its caller.
It uses these counts to determine
the proportion of the total time spent in each procedure.
This means that the figures calculated for these times
are only a statistical approximation to the real values,
and so they should be treated with some caution.
In particular, if the profiler's assumption
that calls to a procedure from different callers have roughly similar costs
is not true,
the graph profile can be quite misleading.

The time spent in a procedure and its descendants is calculated by
propagating the times up the call graph,
assuming that each call to a procedure from a particular caller
takes the same amount of time.
This assumption is usually reasonable,
but again the results should be treated with caution.
(The deep profiler does not make such an assumption,
and hence its output is significantly more reliable.)

@cindex Garbage collection, profiling
Note that any time spent in a C function
(e.g.@: time spent in @samp{GC_malloc()},
which does memory allocation and garbage collection)
is credited to the Mercury procedure that called that C function.

Here is a small portion of the call graph profile from an example program.

@example
                                  called/total       parents
index  %time    self descendants  called+self    name           index
                                  called/total       children

                                                     <spontaneous>
[1]    100.0    0.00        0.75       0         call_engine_label [1]
                0.00        0.75       1/1           do_interpreter [3]

-----------------------------------------------

                0.00        0.75       1/1           do_interpreter [3]
[2]    100.0    0.00        0.75       1         io.run/0(0) [2]
                0.00        0.00       1/1           io.init_state/2(0) [11]
                0.00        0.74       1/1           main/2(0) [4]

-----------------------------------------------

                0.00        0.75       1/1           call_engine_label [1]
[3]    100.0    0.00        0.75       1         do_interpreter [3]
                0.00        0.75       1/1           io.run/0(0) [2]

-----------------------------------------------

                0.00        0.74       1/1           io.run/0(0) [2]
[4]     99.9    0.00        0.74       1         main/2(0) [4]
                0.00        0.74       1/1           sort/2(0) [5]
                0.00        0.00       1/1           print_list/3(0) [16]
                0.00        0.00       1/10          io.write_string/3(0) [18]

-----------------------------------------------

                0.00        0.74       1/1           main/2(0) [4]
[5]     99.9    0.00        0.74       1         sort/2(0) [5]
                0.05        0.65       1/1           list.perm/2(0) [6]
                0.00        0.09   40320/40320       sorted/1(0) [10]

-----------------------------------------------

                                       8             list.perm/2(0) [6]
                0.05        0.65       1/1           sort/2(0) [5]
[6]     86.6    0.05        0.65       1+8      list.perm/2(0) [6]
                0.00        0.60    5914/5914        list.insert/3(2) [7]
                                       8             list.perm/2(0) [6]

-----------------------------------------------

                0.00        0.60    5914/5914        list.perm/2(0) [6]
[7]     80.0    0.00        0.60    5914         list.insert/3(2) [7]
                0.60        0.60    5914/5914        list.delete/3(3) [8]

-----------------------------------------------

                                   40319             list.delete/3(3) [8]
                0.60        0.60    5914/5914        list.insert/3(2) [7]
[8]     80.0    0.60        0.60    5914+40319  list.delete/3(3) [8]
                                   40319             list.delete/3(3) [8]

-----------------------------------------------

                0.00        0.00       3/69283       tree234.set/4(0) [15]
                0.09        0.09   69280/69283       sorted/1(0) [10]
[9]     13.3    0.10        0.10   69283         compare/3(0) [9]
                0.00        0.00       3/3           __Compare___io__stream/0(0) [20]
                0.00        0.00   69280/69280       builtin_compare_int/3(0) [27]

-----------------------------------------------

                0.00        0.09   40320/40320       sort/2(0) [5]
[10]    13.3    0.00        0.09   40320         sorted/1(0) [10]
                0.09        0.09   69280/69283       compare/3(0) [9]

-----------------------------------------------
@end example

The first entry is @samp{call_engine_label} and its parent is
@samp{<spontaneous>}, meaning that it is the root of the call graph.
(The first three entries, @samp{call_engine_label}, @samp{do_interpreter},
and @samp{io.run/0} are all part of the Mercury runtime;
@samp{main/2} is the entry point to the user's program.)

Each entry of the call graph profile consists of three sections, the parent
procedures, the current procedure and the children procedures.

Reading across from the left, for the current procedure the fields are:

@itemize @bullet
@item
The unique index number for the current procedure.
(The index numbers are used only to make it easier to find
a particular entry in the call graph.)

@item
The percentage of total execution time spent in the current procedure
and all its descendants.
As noted above, this is only a statistical approximation.

@item
The ``self'' time: the time spent executing code that is
part of current procedure.
As noted above, this is only a statistical approximation.

@item
The descendant time: the time spent in the
current procedure and all its descendants.
As noted above, this is only a statistical approximation.

@item
The number of times a procedure is called.
If a procedure is (directly) recursive, this column
will contain the number of calls from other procedures,
a plus sign, and then the number of recursive calls.
These numbers are exact, not approximate.

@item
The name of the procedure followed by its index number.
@end itemize

The predicate or function names are not just followed by their arity but
also by their mode in brackets.  A mode of zero corresponds to the first mode
declaration of that predicate in the source code.  For example,
@samp{list.delete/3(3)} corresponds to the @samp{(out, out, in)} mode
of @samp{list.delete/3}.

Now for the parent and child procedures the self and descendant time have
slightly different meanings.  For the parent procedures the self and descendant
time represent the proportion of the current procedure's self and descendant
time due to that parent.  These times are obtained using the assumption that
each call contributes equally to the total time of the current procedure.

@node Using mprof for profiling memory allocation
@section Using mprof for profiling memory allocation
@pindex mprof
@cindex Memory profiling
@cindex Allocation profiling
@cindex Profiling memory allocation

To create a profile of memory allocations, you can invoke @samp{mprof}
with the @samp{-m} (@samp{--profile memory-words}) option.
This will profile the amount of memory allocated, measured in units of words.
(A word is 4 bytes on a 32-bit architecture,
and 8 bytes on a 64-bit architecture.)

Alternatively, you can use @samp{mprof}'s @samp{-M}
(@samp{--profile memory-cells}) option.
This will profile memory in units of ``cells''.
A cell is a group of words allocated together in a single allocation,
to hold a single object.
Selecting this option this will therefore profile
the number of memory allocations,
while ignoring the size of each memory allocation.

With memory profiling, just as with time profiling,
you can use the @samp{-c} (@samp{--call-graph}) option to display
call graph profiles in addition to flat profiles.

When invoked with the @samp{-m} option, @samp{mprof} only reports
allocations, not deallocations (garbage collection).
It can tell you how much memory was allocated by each procedure,
but it won't tell you how long the memory was live for,
or how much of that memory was garbage-collected.
This is also true for @samp{mdprof}.

The memory retention profiling tool described in the next section can tell
you which memory cells remain on the heap.

@node Using mprof for profiling memory retention
@section Using mprof for profiling memory retention
@pindex mprof
@cindex Memory attribution
@cindex Memory retention
@cindex Heap profiling

When a program is built with memory profiling enabled and uses the Boehm
garbage collector, i.e. a grade with @samp{.memprof.gc} modifiers,
each memory cell is ``attributed'' with information about its origin
and type.  This information can be
collated to tell you what kinds of objects are being retained when
the program executes.

To do this, you must instrument the program by adding calls to
@code{benchmarking.report_memory_attribution/1} or
@code{benchmarking.report_memory_attribution/3}
at points of interest.
The first argument of the @code{report_memory_attribution} predicates is a
string that is used to label the memory retention data corresponding to that
call in the profiling output.
You may want to call them from within @samp{trace} goals:

@example
@group
trace [run_time(env("SNAPSHOTS")), io(!IO)] (
    benchmarking.report_memory_attribution("Phase 2", !IO)
)
@end group
@end example

If a program operates in distinct phases
you may want to add a call in between the phases.
The @samp{report_memory_attribution} predicates do nothing in other grades,
so are safe to leave in the program.

Next, build the program in a @samp{.memprof.gc} grade.
After the program has finished executing, it will generate a file
called @file{Prof.Snapshots} in the current directory.
Run @samp{mprof -s} to view the profile.
You will see the memory cells which were on the heap at each time
that @samp{report_memory_attribution} was called: the origin of the cells, and
their type constructors.

Passing the option @samp{-T} will group the profile first by
type constructors, then by procedure.  The @samp{-b} option produces a brief
profile by hiding the secondary level of information.
Memory cells allocated by the Mercury runtime system
itself are normally excluded from the profile; they can be viewed by passing
the @samp{-r} option.

Note that Mercury values which are dead may in fact be still reachable from the
various execution stacks. This is particularly noticeable on the high-level C
back-end, as the C compiler does not take conservative garbage collection into
account and Mercury values may linger on the C stack for longer than necessary.
The low-level C grades should suffer to a lesser extent.

The attribution requires an extra word of memory per cell, which
is then rounded up by the memory allocator.
This is accounted for in @samp{mprof} output, but the memory usage
of the program may be significantly higher than in non-memory profiling grades.

@node Using mdprof
@section Using mdprof
@pindex mdprof
@cindex Deep profiling

The user interface of the deep profiler is a browser.
To display the information contained in a deep profiling data file
(whose name will have the form
@file{@var{programname}_@var{date}_@var{time}.data}
unless you renamed it),
start up your browser and give it a URL of the form
@file{http://server.domain.name/cgi-bin/mdprof_cgi?/full/path/name/Deep.data}.
The @file{server.domain.name} part should be the name of a machine
with the following qualifications:
it should have a web server running on it,
and it should have the @samp{mdprof_cgi} program installed in
the web server's CGI program directory.
(On many Linux systems, this directory is @file{/usr/lib/cgi-bin}.)
The @file{/full/path/name/@var{programname}_@var{date}_@var{time}.data} part
should be the full path name of the deep profiling data file
whose data you wish to explore.
The name of this file must not have percent signs in it,
and it must end in the suffix @file{.data}.
(The deep profiler will replace this suffix with @file{.procrep}
to get access to the other file generated by the profiling run.)

When you start up @samp{mdprof} using the command above,
you will see a list of the usual places
where you may want to start looking at the profile.
Each place is represented by a link.
Clicking on and following that link will give you a web page
that contains both the profile information you asked for
and other links,
some of which present the same information in a different form
and some of which lead to further information.
You explore the profile
by clicking on links and looking at the resulting pages.

The deep profiler can generate several kinds of pages.

@table @asis

@item The menu page
The menu page gives summary information about the profile,
and the usual starting points for exploration.

@item Clique pages
Clique pages are the most fundamental pages of the deep profiler.
Each clique page presents performance information about a clique,
which is either a single procedure or a group of mutually recursive procedures,
in a given ancestor context,
which in turn is a list of other cliques
starting with the caller of the entry point of the clique
and ending with the clique of the @samp{main} predicate.

Each clique page lists the closest ancestor cliques,
and then the procedures of the clique.
It gives the cost of each call site in each procedure,
as well as the cost of each procedure in total.
These costs will be just those incurred in the given ancestor context;
the costs incurred by these call sites
and procedures in other ancestor contexts
will be shown on other clique pages.

@item Procedure pages
Procedure pages give the total cost of a procedure and its call sites
in all ancestor contexts.

@item Module pages
Module pages give the total cost of all the procedures of a module.

@item Module getters and setters pages
These pages identifies the getter and setter procedures in a module.
Getters and setters are simply predicates and functions
that contain @samp{_get_} and @samp{_set_} respectively in their names;
they are usually used to access fields of data structures.

@item Program modules page
The program modules page gives the list of the program's modules.

@item Top procedure pages
Top procedure pages identify the procedures that are
most expensive as measured by various criteria.

@item Procedure caller pages
A procedure caller page lists the call sites, procedures, modules or cliques
that call the given procedure.

@end table

When exploring a procedure's callers,
you often want only the ancestors
that are at or above a certain level of abstraction.
Effectively you want to draw a line through the procedures of the program,
such that you are interested in the procedures on or above the line
but those below the line.
Since we want to exclude procedures below the line
from procedure caller pages,
we call this line an @emph{exclusion contour}.

You can tell the deep profiler where you want to draw this line
by giving it a @samp{exclusion contour file}.
The name of this file should be the same
as the name of the deep profiling data file,
but with the suffix @samp{.data} replaced with @samp{.contour}.
This file should consist of a sequence of lines,
and each line should contain two words.
The first word should be either @samp{all} or @samp{internal};
the second should the name of a module.
If the first word is @samp{all}, then
all procedures in the named module are below the exclusion contour;
if the first word is @samp{internal}, then
all internal (non-exported) procedures in the named module
are below the exclusion contour.
Here is an example of an exclusion contour file.

@example
all		bag
all		list
all		map
internal	set
@end example

@node Using threadscope
@section Using threadscope

@pindex threadscope
@pindex show-ghc-events
@cindex ThreadScope profiling
@cindex Parallel execution profiling

The ThreadScope tools are not distributed with Mercury.
For information about how to install them please see the
@file{README.ThreadScope} file included in the Mercury distribution.

ThreadScope provides two programs that can be used to view profiles in
@file{.eventlog} files.
The first, @samp{show-ghc-events}, lists the ThreadScope events sorted from the
earliest to the latest,
while the second, @samp{threadscope} provides a graphical display for browsing
the profile.

Both programs accept the name of a @file{.eventlog} file on the command
line.
The @samp{threadscope} program also provides a menu from which users can choose
a file to open.

@node Profiling and shared libraries
@section Profiling and shared libraries
@pindex mprof
@cindex Shared libraries and profiling
@cindex Profiling and shared libraries
@vindex LD_BIND_NOW

On some operating systems,
Mercury's profiling doesn't work properly with shared libraries.
The symptom is errors (@samp{map.lookup failed}) or warnings from @samp{mprof}.
On some systems, the problem occurs because the C implementation
fails to conform to the semantics specified by the ISO C standard
for programs that use shared libraries.
For other systems, we have not been able to analyze the cause of the failure
(but we suspect that the cause may be the same as on those systems
where we have been able to analyze it).

If you get errors or warnings from @samp{mprof},
and your program is dynamically linked,
try rebuilding your application statically linked,
e.g.@: by using @samp{MLFLAGS=--static} in your Mmakefile.
Another work-around that sometimes works is to set the environment variable
@env{LD_BIND_NOW} to a non-null value before running the program.

@c ----------------------------------------------------------------------------

@ignore

This is the original documentation of the --grade option.
It is saved here to serve as a mine of ideas and text
for a new chapter on grades.

    @item @code{-s @var{grade}}
    @itemx @code{--grade @var{grade}}
    @findex -s
    @findex --grade
    Select the compilation model.
    The @var{grade} should be a @samp{.} separated list
    in which the first element is a @samp{base grade},
    and each following element (if any) is a @samp{grade modifier}.

    @cindex csharp (compilation grade)
    @cindex java (compilation grade)

    @cindex hlc (compilation grade)

    @cindex asm_fast (compilation grade)
    @cindex none (compilation grade)
    @cindex reg (compilation grade)

    The base grade specifies
    what target language to compile the Mercury program to,
    and if the compiler can do this in several different ways,
    selects one of those ways.
    The available base grades are the following.

    @c What target language to use (C, C# or Java),
    @c for C, whether to generate idiomatic C or assembly-like code,
    @c and if the latter, what combination of GNU C extensions to use.
    @c The options are
    @c which each specify the named language as the target,
    @c and @samp{none}, @samp{reg}, and @samp{asm_fast},
    @c which call for assembly-like C code,
    @c with @samp{reg} and @samp{asm_fast} both calling for
    @c the use of GNU C's extension for storing global variables in registers,
    @c and @samp{asm_fast} calling for the use of two GNU C extensions
    @c that together allow direct gotos to labels in other functions,
    @c even in other modules.

    @table @asis

    @item @samp{hlc}
    This base grade calls for generating idiomatic C,
    which we call high-level C.

    @item @samp{none}, @samp{reg}, and @samp{asm_fast}
    These base grades call for generating assembly-like C code,
    which we call low-level C.
    @samp{none} calls for generating standard C without using any GNU C extensions.
    @samp{reg} and @samp{asm_fast} both call for
    the use of GNU C's extension for storing global variables in registers,
    while @samp{asm_fast} also calls for the use of two GNU C extensions
    that together allow direct gotos to labels in other functions,
    even in other modules.
    In general, the more GNU C extensions are used,
    the faster the program will be,
    but some platforms, compilers or compiler versions
    do not support specific extensions.

    @item @samp{csharp}
    This base grade calls for generating C#.

    @item @samp{java}
    This base grade calls for generating Java.
    @end table

    The default base grade is system dependent,
    but will be either @samp{hlc} or @samp{asm_fast},
    as these are the two fastest.

    @c @cindex asm_jump (compilation grade)
    @c @cindex fast (compilation grade)
    @c @cindex jump (compilation grade)

    @c @cindex .agc (grade modifier)
    @c @cindex .ssdebug (grade modifier)
    @cindex .debug (grade modifier)
    @cindex .decldebug (grade modifier)
    @cindex .gc (grade modifier)
    @cindex .memprof (grade modifier)
    @cindex .mm (grade modifier)
    @cindex .par (grade modifier)
    @cindex .prof (grade modifier)
    @cindex .profdeep (grade modifier)
    @cindex .spf (grade modifier)
    @cindex .stseg (grade modifier)
    @cindex .threadscope (grade modifier)
    @cindex .tr (grade modifier)

    The grade modifiers may be given in any order.
    Each grade modifier sets one or more compilation model options.
    The available options each belong to a set of mutually exclusive alternatives
    governing a single aspect of the compilation model.
    The set of aspects and their alternatives are as follows.
    Note that not all grade modifiers are applicable to all grades
    (most apply only when targeting C),
    and not all grade modifiers are compatible with each other.

    @table @asis
    @item garbage collection
    The default is no garbage collection beyond what the target language provides.
    C# and Java have their own builtin garbage collectors, but C does not.
    Since garbage collection is essential for all programs
    other than those with @emph{very} short runtimes,
    base grades that target C
    are usually followed by the @samp{.gc} grade modifier, which calls for
    the use of the Boehm-Demers-Weiser conservative collector for C.
    @c @samp{.agc}

    @item profiling
    The default is no profiling.
    The grade modifier @samp{.prof} calls for gprof-style profiling;
    the grade modifier @samp{.memprof} calls for profiling of memory usage;
    while the grade modifier @samp{.profdeep} calls for deep profiling.
    See @ref{Profiling} for an explanation
    of the differences between these forms of profiling,
    all of which are available only when targeting C.

    @item trailing
    The default is no trailing.
    Applications that need trailing should specify the grade modifier @samp{.tr}.
    Trailing is available only when targeting C.

    (A trail is a data structure
    that records changes to a mutable data store during normal execution
    so that each of those changes can be unwound (undone)
    when execution backtracks to the point in time before it was made.
    Mercury normally needs a trail
    only when executing programs that use constraint solvers.
    While the act of posting a constraint in such a program
    is a declarative action,
    its implementation requires updating a constraint store.)

    @item floating point precision
    By default when targeting C,
    the Mercury @samp{float} type is implemented
    as an IEEE 754 double-precision floating point number,
    which occupies 64 bits of space.
    On platforms whose word size is 32 bits,
    users whose programs do not require double precision
    may improve memory consumption and speed
    by specifying the grade modifier @samp{.spf}
    (short for single-precision float),
    which calls for implementing all Mercury floats
    as IEEE 754 single-precision floating point numbers.
    Note that on 64 bit platforms, using single-precision floats
    definitely will @emph{not} improve memory consumption,
    and will probably not improve speed.
    On the other hand, it may simplify the use of C APIs
    that exclusively use single precision floats.

    For target languages other than C,
    the Mercury @samp{float} type is always implemented
    as a double-precision floating point number,
    and the @samp{.spf} modifier is not supported.

    @item stack size
    When generating low-level C,
    Mercury implements its own stacks (two of them).
    The default is to make each stack a fixed size
    (usually a relatively large size,
    though the size of each stack can be controlled using runtime options).
    We make the page(s) at the tops of the stacks inaccessible,
    so that a stack overflow,
    instead of accessing and overwriting memory effectively randomly,
    causes the operating system to send a signal to the program.
    If not caught and handled, this signal will abort the program,
    minimizing the damage.

    However, for programs for which this is not acceptable,
    users can specify the @samp{.stseg} grade component.
    This calls for each stack to be composed of
    small memory segments chained together in a list.
    When there is no room in the current segment for a new stack frame,
    we simply allocate a new segment and add it to the list.
    This approach has higher overhead,
    since calls to, and returns from, procedures must execute more code,
    but it avoids imposing any limit on stack size
    other than the size of available memory.

    When targeting anything other than low-level C,
    the stack is always managed by the implementation of the target language,
    so for them, the @samp{.stseg} modifier is neither relevant nor supported.

    @item debugging
    The default is to generate executables that do not support debugging.
    However, when generating low-level C code,
    specifying one of the grade modifiers @samp{.debug} and @samp{.decldebug}
    will cause the compiler to generate executables
    that can be debugged using the Mercury debugger @samp{mdb}.
    The difference between them is that
    the declarative debugging aspects of @samp{mdb}
    will work only with @samp{.decldebug}.
    The price of this is that @samp{.decldebug} results
    in significantly larger executable files.
    @c @samp{.ssdebug}

    @item threads
    The default is whatever thread support is provided by the target language.
    When targeting C,
    thread support can be enabled by specifying the grade modifier @samp{.par}.
    When targeting low-level C,
    this also enables the use of the parallel conjunction operator @samp{&}.
    Since Mercury implements parallel conjunctions
    only in low-level C grades with the @samp{.par} grade modifier,
    in every other situation, the compiler silently converts
    every occurrence of @samp{&} to a comma,
    the usual @emph{sequential} conjunctions operator.

    @item thread profiling
    In low-level C grades with the grade modifier @samp{.par},
    users can enable support for ThreadScope-style thread profiling
    by also specifying the grade module @samp{.threadscope}.
    The default is no support for thread profiling.
    Note that form of profiling is experimental,
    and it is not currently supported.

    @item minimal model tabling
    The default is no support for minimal model evaluation.
    When targeting low-level C, users can specify the grade modifier @samp{.mm},
    which enables support for minimal model tabled evaluation of procedures.
    The grade component @samp{.mmsc} is a synonym for @samp{.mm},
    standing for minimal model via stack copying,
    since the standard implementation works by copying stack segments.
    (The synonym exists because Mercury also has
    another implementation of minimal model tabling.
    This other implementation, which is incomplete
    and was only ever useful for experiments,
    is based on a completely different implementation technique.)

    @end table

    The default grade is system-dependent;
    it is chosen at installation time by @samp{configure},
    the auto-configuration script,
    but can be overridden if desired
    with the environment variable @env{MERCURY_DEFAULT_GRADE}.
    @vindex MERCURY_DEFAULT_GRADE
    On any given particular installation,
    the Mercury runtime system and Mercury standard library
    will be installed in only a subset of the possible grades;
    you can find out which grades these are
    by invoking the Mercury compiler
    with the @samp{--output-stdlib-grades} option.
    Attempting to use a grade which has not been installed
    will result in an error at link time.
    (The error message will typically be something like
    @samp{ld: can't find library for -lmercury}.)

    The tables below show the options
    that are selected by each base grade and grade modifier;
    they are followed by descriptions of those options.

    @table @asis
    @item @var{Grade}
    @var{Options implied}.
    @findex --gcc-global-registers
    @findex --no-gcc-global-registers
    @findex --gcc-nonlocal-gotos
    @findex --no-gcc-nonlocal-gotos
    @findex --asm-labels
    @findex --no-asm-labels
    @findex --high-level-code
    @findex --no-high-level-code
    @findex --target
    @findex --csharp
    @findex --java
    @findex --gc
    @findex --profiling
    @findex --memory-profiling
    @findex --deep-profiling
    @findex --use-trail
    @findex --record-term-sizes-as-words
    @findex --record-term-sizes-as-cells
    @findex --single-prec-float
    @findex --stack-segments

    @item @samp{hlc}
    @code{--target c --high-level-code}.

    @item @samp{none}
    @code{--target c --no-gcc-global-registers --no-gcc-nonlocal-gotos --no-asm-labels}.

    @item @samp{reg}
    @code{--target c --gcc-global-registers --no-gcc-nonlocal-gotos --no-asm-labels}.

    @c @item @samp{jump}
    @c @code{--target c --no-gcc-global-registers --gcc-nonlocal-gotos --no-asm-labels}.

    @c @item @samp{fast}
    @c @code{--target c --gcc-global-registers --gcc-nonlocal-gotos --no-asm-labels}.

    @c @item @samp{asm_jump}
    @c @code{--target c --no-gcc-global-registers --gcc-nonlocal-gotos --asm-labels}.

    @item @samp{asm_fast}
    @code{--target c --gcc-global-registers --gcc-nonlocal-gotos --asm-labels}.

    @item @samp{csharp}
    @code{--target csharp --high-level-code}.

    @item @samp{java}
    @code{--target java --high-level-code}.

    @item @samp{.gc}
    @code{--gc boehm}.

    @c @item @samp{.agc}
    @c @code{--gc accurate}.

    @item @samp{.prof}
    @code{--profiling}.

    @item @samp{.memprof}
    @code{--memory-profiling}.

    @item @samp{.profdeep}
    @code{--deep-profiling}.

    @c The following are undocumented because
    @c they are basically useless... documenting
    @c them would just confuse people.
    @c
    @c @item @samp{.profall}
    @c @code{--profile-calls --profile-time --profile-memory}.
    @c (not recommended because --profile-memory interferes with
    @c --profile-time)
    @c
    @c @item @samp{.proftime}
    @c @code{--profile-time}.
    @c
    @c @item @samp{.profcalls}
    @c @code{--profile-calls}.
    @c
    @item @samp{.tr}
    @code{--use-trail}.

    @c @item @samp{.tsw}
    @c @code{--record-term-sizes-as-words}.

    @c @item @samp{.tsc}
    @c @code{--record-term-sizes-as-cells}.

    @item @samp{.spf}
    @code{--single-prec-float}

    @item @samp{.stseg}
    @code{--stack-segments}

    @item @samp{.debug}
    @code{--debug}.

    @item @samp{.decldebug}
    @code{--decl-debug}.

    @c @item @samp{.ssdebug}
    @c @code{--ss-debug}.

    @item @samp{.par}
    @code{--parallel}.

    @item @samp{.threadscope}
    @code{--threadscope}.

    @end table

    @end table

@end ignore

@node Invocation
@chapter Invocation

This section contains a brief description of all the options
available for @samp{mmc}, the Melbourne Mercury compiler.
Sometimes this list is a little out-of-date;
use @samp{mmc --help} to get the most up-to-date list.
@c This should no longer be a concern.
@findex --help

@c We should eventually put the body of this chapter into a different file,
@c and then @include that file.

@c INCLUDE_HELP_TEXT_START

@menu
* Invocation overview:: 
* Help options:: 
* Options for modifying the command line:: 
* Options that give the compiler its overall task:: 
* Grade options:: 
* Options that control inference:: 
* Options specifying the intended semantics:: 
* Verbosity options:: 
* Diagnostics options:: 
* Warning options:: 
* Options that request information:: 
* Options that ask for informational files:: 
* Controlling trace goals:: 
* Preparing code for mdb debugging:: 
* Preparing code for mdprof profiling:: 
* Optimization options:: 
* Intermodule optimization:: 
* Program analyses:: 
* Options that ask for modified output:: 
* Options for controlling mmc --make:: 
* Options for target language compilation:: 
* Options for linking:: 
* Options controlling searches for files:: 
* Options controlling the library installation process:: 
* Options specifying properties of the environment:: 
* Options that record autoconfigured parameters:: 
* Options for developers only:: 
* Now-unused former options kept for compatibility:: 
@end menu

@node Invocation overview
@section Invocation overview
@findex --no-

@code{mmc} is invoked as
@example
mmc [@var{options}] @var{arguments}
@end example

Arguments can be either module names or file names.
Arguments ending in @samp{.m} are assumed to be file names,
while other arguments are assumed to be module names.
The compiler will convert module names to file names
by looking up the module name in the module-name-to-file-name map
in the @file{Mercury.modules} file it if exists.
(It can be created using a command such as @code{mmc -f *.m}.)
It @file{Mercury.modules} does not exist, then the compiler
will search for a module named e.g. @samp{foo.bar.baz}
in the files @file{foo.bar.baz.m}, @file{bar.baz.m}, and @file{baz.m},
in that order.

Options are either short (single-letter) options preceded by a single @samp{-},
or long options preceded by @samp{--}.
Options are case-sensitive.
We call options that do not take arguments @dfn{flags}.
Single-letter flags may be grouped with a single @samp{-}, e.g.@: @samp{-vVc}.
Single-letter flags may be negated
by appending another trailing @samp{-}, e.g.@: @samp{-v-}.
(You cannot both group @emph{and} negate single-letter flags at the same time.)
Long flags may be negated by preceding them with @samp{no-},
e.g.@: @samp{--no-verbose}.


@node           Help options
@section        Help options
@cindex         Help options

@table @asis

@sp 1
@item @code{-?}
@itemx @code{-h}
@itemx @code{--help}
@findex -?
@findex -h
@findex --help
@cindex Help option
Print a usage message.

@c @sp 1
@c @item @code{--help-priv}
@c @findex --help-priv
@c Print a usage message, including private options.

@c @sp 1
@c @item @code{--help-texinfo}
@c @findex --help-texinfo
@c Print the documentation of all options for the user guide.

@sp 1
@item @code{--version}
@findex --version
Print the compiler version.

@end table

@node           Options for modifying the command line
@section        Options for modifying the command line
@cindex         Options for modifying the command line

@table @asis

@sp 1
@item @code{--flags-file @var{filename}}
@itemx @code{--flags @var{filename}}
@findex --flags-file
@findex --flags
Take options from the specified file, and handle them as if they were
specified on the command line.

@sp 1
@item @code{--filenames-from-stdin}
@findex --filenames-from-stdin
Read in from standard input a newline-terminated module name or file
name, compile that module or file, and repeat until reaching
end-of-file. (This allows a program or user to interactively compile
several modules without the overhead of creating a process for each
one.)

@end table

@node           Options that give the compiler its overall task
@section        Options that give the compiler its overall task
@cindex         Options that give the compiler its overall task

@table @asis

@sp 1
@item @code{-f}
@itemx @code{--generate-source-file-mapping}
@findex -f
@findex --generate-source-file-mapping
Output to @file{Mercury.modules} the module-name-to-file-name mapping
for the list of source files given as non-option arguments to mmc. This
mapping is needed if either for some modules, the file name does not
match the module name, or if some of the modules are outside the
current directory. In such cases, the mapping must be generated before
invoking any one of @code{mmc --generate-dependencies},
@code{mmc --make}, or @code{mmake depend}.

@sp 1
@item @code{-M}
@itemx @code{--generate-dependencies}
@findex -M
@findex --generate-dependencies
@cindex Dependencies
Output ``Make''-style dependencies for the given main module, and all
the other modules in the program (i.e. all the other modules in this
directory that the main module imports either directly or indirectly)
to @file{@var{module}.dep}, to @file{@var{module}.dv}, and to the
@file{.d} files of all the modules in the program.

@sp 1
@item @code{--generate-dependencies-ints}
@findex --generate-dependencies-ints
Do the same job as --generate-dependencies, but also output
@file{.int3}, @file{.int0}, @file{.int} and @file{.int2} files for all
the modules in the program.

@sp 1
@item @code{--generate-dependency-file}
@findex --generate-dependency-file
Output ``Make''-style dependencies for the given module to
@file{@var{module}.d}.

@sp 1
@item @code{--make-short-interface}
@itemx @code{--make-short-int}
@findex --make-short-interface
@findex --make-short-int
Write to @file{@var{module}.int3} a list of the types, insts, modes,
typeclasses and instances defined in the interface section of the named
module. The compiler uses these files to create @file{.int0},
@file{.int} and @file{.int2} files.

@sp 1
@item @code{--make-private-interface}
@itemx @code{--make-priv-int}
@findex --make-private-interface
@findex --make-priv-int
Write to @file{@var{module}.int0} the list of the entities (including
types, insts, modes, predicates and functions) defined in the given
module that its submodules have access to. (This will include even
entities that are @emph{not} exported from the module.) Besides the
code of the module itself, the inputs to this task are the @file{.int0}
files of the given module's own ancestor modules, and the @file{.int3}
files of the modules it imports directly or indirectly. Note that this
command is unnecessary for modules that have no submodules.

@sp 1
@item @code{-i}
@itemx @code{--make-interface}
@itemx @code{--make-int}
@findex -i
@findex --make-interface
@findex --make-int
Write to @file{@var{module}.int} and to @file{@var{module}.int2} a list
of entities (including types, insts, modes, predicates and functions)
that the given module exports for use by other modules. When generating
code, the compiler reads the @file{.int} file of every directly
imported module, and the @file{.int2} file of every indirectly imported
module. (Each @file{.int2} file is a slightly shorter version of the
corresponding @file{.int} file, because it is specialized for its
intended use.)

@sp 1
@item @code{--make-optimization-interface}
@itemx @code{--make-optimisation-interface}
@itemx @code{--make-opt-int}
@findex --make-optimization-interface
@findex --make-optimisation-interface
@findex --make-opt-int
Write to @file{@var{module}.opt} information about the
semantically-private parts of the named module that can be useful when
optimizing another module that imports this one. Note that @file{.opt}
files are used by @samp{--intermodule-optimization}.

@sp 1
@item @code{--make-transitive-optimization-interface}
@itemx @code{--make-transitive-optimisation-interface}
@itemx @code{--make-trans-opt}
@findex --make-transitive-optimization-interface
@findex --make-transitive-optimisation-interface
@findex --make-trans-opt
Write to @file{@var{module}.trans_opt} information about the named
module that can be useful when optimizing another module that imports
this one. The distinction from @file{.opt} files is that a
@file{.trans_opt} file can include information not just from the source
code of its module, but also from the @file{.opt} and @file{.trans_opt}
files of other modules. Note that @file{.trans_opt} files are used by
@samp{--transitive-intermodule-optimization}.

@sp 1
@item @code{-t}
@itemx @code{--typecheck-only}
@findex -t
@findex --typecheck-only
Check the module's code only for syntax- and type errors. Do not
execute any other semantic checks, and do not generate any code. (When
converting Prolog code to Mercury, it can sometimes be useful to get
the types right first and worry about modes second; this option
supports that approach.)

@sp 1
@item @code{-e}
@itemx @code{--errorcheck-only}
@findex -e
@findex --errorcheck-only
Check the module's code for syntax- and semantic errors, but do not
generate any code.

@sp 1
@item @code{-C}
@itemx @code{--target-code-only}
@findex -C
@findex --target-code-only
Generate target code (meaning C code in @file{@var{module}.c}, C# code
in @file{@var{module}.cs}, or Java code in @file{@var{module}.java}),
but do not generate object code.

@sp 1
@item @code{-c}
@itemx @code{--compile-only}
@findex -c
@findex --compile-only
Generate C code in @file{@var{module}.c} and object code in
@file{@var{module}.o}, but do not attempt to link the object files.

@sp 1
@item @code{--generate-standalone-interface @var{basename}}
@itemx --no-generate-standalone-interface
@findex --generate-standalone-interface
@findex --no-generate-standalone-interface
Output a stand-alone interface. Use @var{basename} as the basename of
any files generated for the stand-alone-interface. (See
@ref{Stand-alone interfaces} for further details.)

@sp 1
@item @code{-P}
@itemx @code{--convert-to-mercury}
@itemx @code{--convert-to-Mercury}
@itemx @code{--pretty-print}
@findex -P
@findex --convert-to-mercury
@findex --convert-to-Mercury
@findex --pretty-print
Output the code of the module to @file{@var{module}.ugly} in a standard
format. This option acts as a Mercury ugly-printer. (It would be a
pretty-printer, except that comments are stripped, and nested
if-then-elses are indented too much, so the result is rather ugly.)

@sp 1
@item @code{-x}
@itemx @code{--make-xml-documentation}
@itemx @code{--make-xml-doc}
@findex -x
@findex --make-xml-documentation
@findex --make-xml-doc
Output an XML representation of all the declarations in the module to
@file{@var{module}.xml}. This XML file can then be transformed via a
XSL transform into another documentation format.

@c @sp 1
@c @item @code{--make-analysis-registry}
@c @findex --make-analysis-registry
@c There is no help text available.

@sp 1
@item @code{-m}
@itemx @code{--make}
@findex -m
@findex --make
Treat the non-option arguments to @code{mmc} as files to make, rather
than source files. Build or rebuild the specified files if they do not
exist or are not up-to-date. Note that this option also enables
@samp{--use-subdirs}.

@sp 1
@item @code{-r}
@itemx @code{--rebuild}
@findex -r
@findex --rebuild
A variant of the @samp{--make} option, with the difference being that
it always rebuilds the target files, even if they are up-to-date.

@c @sp 1
@c @item @code{--invoked-by-mmc-make}
@c @findex --invoked-by-mmc-make
@c This option is only for internal use by the compiler. @code{mmc --make}
@c passes it as the first argument when compiling a module.

@sp 1
@item @code{--output-grade-string}
@findex --output-grade-string
Print to standard output the canonical string representing the
currently selected grade.

@sp 1
@item @code{--output-grade-defines}
@findex --output-grade-defines
Print to standard output the C compiler flags that define the macros
which specify the selected compilation grade.

@sp 1
@item @code{--output-stdlib-grades}
@findex --output-stdlib-grades
Print to standard output the list of compilation grades in which the
Mercury standard library is available with this compiler.

@sp 1
@item @code{--output-stdlib-modules}
@findex --output-stdlib-modules
Print to standard output the names of the modules in the Mercury
standard library.

@sp 1
@item @code{--output-libgrades}
@itemx @code{--output-library-install-grades}
@findex --output-libgrades
@findex --output-library-install-grades
Print to standard output the list of compilation grades in which a
library to be installed should be built.

@sp 1
@item @code{--output-target-arch}
@findex --output-target-arch
Print to standard output the target architecture.

@sp 1
@item @code{--output-cc}
@findex --output-cc
Print to standard output the command for invoking the C compiler.

@sp 1
@item @code{--output-c-compiler-type}
@itemx @code{--output-cc-type}
@findex --output-c-compiler-type
@findex --output-cc-type
Print to standard output the C compiler's type.

@sp 1
@item @code{--output-cflags}
@findex --output-cflags
Print to standard output the flags with which the C compiler will be
invoked.

@sp 1
@item @code{--output-c-include-directory-flags}
@itemx @code{--output-c-include-dir-flags}
@findex --output-c-include-directory-flags
@findex --output-c-include-dir-flags
Print to standard output the C compiler flags that specify which
directories to search for C header files. This includes the C header
files from the standard library.

@sp 1
@item @code{--output-link-command}
@findex --output-link-command
Print to standard output the link command used to create executables.

@sp 1
@item @code{--output-shared-lib-link-command}
@findex --output-shared-lib-link-command
Print to standard output the link command used to create shared
libraries.

@sp 1
@item @code{--output-library-link-flags}
@findex --output-library-link-flags
Print to standard output the flags that must be passed to the linker in
order to link against the current set of libraries. This includes the
Mercury standard library, as well as any other libraries specified via
either the @samp{--ml} or @samp{-l} option.

@sp 1
@item @code{--output-csharp-compiler}
@findex --output-csharp-compiler
Print to standard output the command for invoking the C# compiler.

@sp 1
@item @code{--output-csharp-compiler-type}
@findex --output-csharp-compiler-type
Print to standard output the C# compiler's type.

@sp 1
@item @code{--output-java-class-directory}
@itemx @code{--output-class-directory}
@itemx @code{--output-java-class-dir}
@itemx @code{--output-class-dir}
@findex --output-java-class-directory
@findex --output-class-directory
@findex --output-java-class-dir
@findex --output-class-dir
Print to standard output the name of the directory in which the
compiler will place any generated Java class files.

@sp 1
@item @code{--output-optimization-options}
@itemx @code{--output-opt-opts}
@findex --output-optimization-options
@findex --output-opt-opts
Print to standard output a list of the optimizations enabled at each
optimization level.

@sp 1
@item @code{--output-optimization-options-upto @var{max_level}}
@itemx @code{--output-opt-opts-upto @var{max_level}}
@findex --output-optimization-options-upto
@findex --output-opt-opts-upto
Print to standard output a list of the optimizations enabled at each
optimization level up to the given maximum.

@end table

@node           Grade options
@section        Grade options
@cindex         Grade options

@menu
* Grades and grade components:: Setting the compilation model
* Target options:: Choosing the target language
* LLDS backend grade options:: For the low-level C backend
* MLDS backend grade options:: For the high-level C/Java/C# backend
* Debugging grade options:: 
* Profiling grade options:: 
* Optional feature grade options:: 
* Developer grade options:: Not for general use
@end menu

@node           Grades and grade components
@subsection     Grades and grade components
@cindex         Grades and grade components

@table @asis

@sp 1
@item @code{-s @var{grade}}
@itemx @code{--grade @var{grade}}
@findex -s
@findex --grade
Select the compilation model. This model, which Mercury calls a
@emph{grade}, specifies what properties the resulting executable or
library should have. Properties such as @samp{generates profiling data
for @code{mprof} when executed} and @samp{can be debugged with the
Mercury debugger}. As such, it controls decisions that must be made the
same way in all the modules of a program. For example, it does not make
sense to compile some modules of a program to C and some to Java; nor
does it make sense to compile some modules to support profiling and
some to not support profiling.

@sp 1
The @var{grade} should consist of one of the base grades @samp{none},
@samp{reg}, @samp{asm_fast}, @samp{hlc}, @samp{java}, or @samp{csharp},
followed by zero or more of the grade modifiers in the following
options. The names of all grade modifiers start with a period, so a
complete grade name consists of a list of name components (the base
grade and some grade modifiers) separated by periods.

@sp 1
Note that not all combinations of components are allowed, and that the
Mercury standard library will have been installed on your system in
only a subset of the set of all possible grades.

@sp 1
Attempting to build a program in a grade which has not been installed
or to link together modules that have been compiled in different
grades, will result in an error.

@end table

@node           Target options
@subsection     Target options
@cindex         Target options

@table @asis

@sp 1
@item @code{--target @var{c}} (grades: @samp{none}, @samp{reg}, @samp{asm_fast}, @samp{hlc})
@itemx @code{--target @var{csharp}} (grades: @samp{csharp})
@itemx @code{--target @var{java}} (grades: @samp{java})
@findex --target
@cindex asm_fast (compilation grade
@cindex reg (compilation grade
@cindex none (compilation grade
@cindex hlc (compilation grade
@cindex java (compilation grade
@cindex csharp (compilation grade
Specify the target language: C, C# or Java. The default is C. Targets
other than C imply @samp{--high-level-code} (see below).

@sp 1
@item @code{--compile-to-c}
@itemx @code{--compile-to-C}
@findex --compile-to-c
@findex --compile-to-C
An abbreviation for @samp{--target c} @samp{-target-code-only}.
Generate C code in @file{@var{module}.c}, but do not generate object
code.

@sp 1
@item @code{--java}
@itemx @code{--Java}
@findex --java
@findex --Java
An abbreviation for @samp{--target java}.

@sp 1
@item @code{--java-only}
@itemx @code{--Java-only}
@findex --java-only
@findex --Java-only
An abbreviation for @samp{--target java} @samp{--target-code-only}.
Generate Java code in @file{@var{module}.java}, but do not generate
Java bytecode.

@sp 1
@item @code{--csharp}
@itemx @code{--C#}
@findex --csharp
@findex --C#
An abbreviation for @samp{--target csharp}.

@sp 1
@item @code{--csharp-only}
@itemx @code{--C#-only}
@findex --csharp-only
@findex --C#-only
An abbreviation for @samp{--target csharp} @samp{--target-code-only}.
Generate C# code in @file{@var{module}.cs}, but do not generate CIL
bytecode.

@end table

@node           LLDS backend grade options
@subsection     LLDS backend grade options
@cindex         LLDS backend grade options

@table @asis

@sp 1
@item @code{--gcc-global-registers} (grades: @samp{reg}, @samp{asm_fast})
@itemx @code{--no-gcc-global-registers} (grades: @samp{none})
@findex --gcc-global-registers
@findex --no-gcc-global-registers
Specify whether to use GNU C's global register variables extension.
This option is used only when targeting C with
@samp{--no-high-level-code}.

@sp 1
@item @code{--gcc-non-local-gotos} (grades: @samp{asm_fast})
@itemx @code{--no-gcc-non-local-gotos} (grades: @samp{none}, @samp{reg})
@findex --gcc-non-local-gotos
@findex --no-gcc-non-local-gotos
Specify whether to use GNU C's ``labels as values'' extension. This
option is used only when targeting C with @samp{--no-high-level-code}.

@sp 1
@item @code{--asm-labels} (grades: @samp{asm_fast})
@itemx @code{--no-asm-labels} (grades: @samp{none}, @samp{reg})
@findex --asm-labels
@findex --no-asm-labels
Specify whether GNU C's asm extensions for inline assembler labels.
This option is used only when targeting C with
@samp{--no-high-level-code}.

@c @sp 1
@c @item @code{--no-use-float-registers}
@c @findex --use-float-registers
@c @findex --no-use-float-registers
@c Use float registers for argument passing. This option is used only when
@c targeting C with @samp{--no-high-level-code}.

@end table

@node           MLDS backend grade options
@subsection     MLDS backend grade options
@cindex         MLDS backend grade options

@table @asis

@sp 1
@item @code{-H} (grades: @samp{hlc}, @samp{csharp}, @samp{java})
@itemx @code{--high-level-code}
@itemx @code{--high-level-c}
@itemx @code{--high-level-C}
@itemx @code{--highlevel-code}
@itemx @code{--highlevel-c}
@itemx @code{--highlevel-C}
@findex -H
@findex --high-level-code
@findex --high-level-c
@findex --high-level-C
@findex --highlevel-code
@findex --highlevel-c
@findex --highlevel-C
Use the MLDS backend, which generates idiomatic high-level-language
code, rather than the LLDS backend, which generates assembly language
code in C syntax.

@sp 1
@item @code{--c-debug-grade} (grades: @samp{hlc})
@findex --c-debug-grade
Require that all modules in the program be compiled to object code in a
way that allows the program executable to be debuggable with debuggers
for C, such as @code{gdb}. This option is intended mainly for the
developers of Mercury, though it can also help to debug C code included
in Mercury programs. This option is used only when targeting C.

@end table

@node           Debugging grade options
@subsection     Debugging grade options
@cindex         Debugging grade options

@menu
* Mdb debugging grade options:: 
@end menu

@node           Mdb debugging grade options
@subsubsection  Mdb debugging grade options
@cindex         Mdb debugging grade options

@table @asis

@sp 1
@item @code{--debug} (grade modifier: @samp{.debug})
@findex --debug
@cindex Debugging
@cindex .debug (grade modifier
Enable Mercury-level debugging. See @ref{Debugging} for details. This
option is supported only when targeting C with
@samp{--no-high-level-code}.

@sp 1
@item @code{--decl-debug} (grade modifier: @samp{.decldebug})
@findex --decl-debug
@cindex Debugging
@cindex .decldebug (grade modifier
Enable full support for declarative debugging. This allows subterm
dependency tracking in the declarative debugger. See @ref{Debugging}
for details. This option is supported only when targeting C with
@samp{--no-high-level-code}.

@end table

@c @node           Ssdb debugging grade options
@c @subsubsection  Ssdb debugging grade options
@c @cindex         Ssdb debugging grade options

@c @table @asis

@c @sp 1
@c @item @code{--source-to-source-debug} (grade modifier: @samp{.ssdebug})
@c @itemx @code{--ss-debug}
@c @itemx @code{--ssdb}
@c @findex --source-to-source-debug
@c @findex --ss-debug
@c @findex --ssdb
@c @cindex .ssdebug (grade modifier
@c Enable the source-to-source debugging transform.

@c @end table

@node           Profiling grade options
@subsection     Profiling grade options
@cindex         Profiling grade options

@menu
* Mprof profiling grade options:: 
* Deep profiling grade options:: 
@end menu

@node           Mprof profiling grade options
@subsubsection  Mprof profiling grade options
@cindex         Mprof profiling grade options

@table @asis

@sp 1
@item @code{-p} (grade modifier: @samp{.prof})
@itemx @code{--profiling}
@findex -p
@findex -p-
@findex --profiling
@findex --no-profiling
@cindex Profiling
@cindex Time profiling
@cindex .prof (grade modifier
Prepare the generated code for time profiling by Mercury's version of
the standard Unix profiler @code{gprof}, which is a tool called
@code{mprof}. In @samp{.prof} grades, the compiler will insert
profiling hooks into the generated code (e.g. to count calls), and will
also output the static call graph of the module to
@file{@var{module}.prof} for use by @code{mprof}. Please see the
@ref{Building profiled applications} in the Mercury User's Guide for
details.

@sp 1
This option is supported only when targeting C.

@c @sp 1
@c @item @code{--time-profiling}
@c @findex --time-profiling
@c There is no help text available.

@sp 1
@item @code{--memory-profiling} (grade modifier: @samp{.memprof})
@findex --memory-profiling
@cindex Profiling
@cindex Memory profiling
@cindex Heap profiling
@cindex Allocation profiling
@cindex .memprof (grade modifier
Prepare the generated code for profiling of memory usage and retention
by mprof. Please see the @ref{Using mprof for profiling memory
retention} in the Mercury User's Guide for details.

@sp 1
This option is supported only when targeting C.

@c @sp 1
@c @item @code{--profile-calls} (grade modifier: @samp{.profcalls})
@c @findex --profile-calls
@c @cindex .profcalls (grade modifier
@c Similar to @samp{--profiling}, except that it only gathers call counts,
@c not timing information. Useful on systems where time profiling is not
@c supported, but not as useful as @samp{--memory-profiling}.

@c @sp 1
@c @item @code{--profile-time} (grade modifier: @samp{.proftime})
@c @findex --profile-time
@c @cindex .proftime (grade modifier
@c Similar to @samp{--profiling}, except that it only gathers timing
@c information, not call counts.

@c @sp 1
@c @item @code{--profile-memory} (grade modifier: @samp{.profmem})
@c @findex --profile-memory
@c @cindex .profmem (grade modifier
@c Similar to @samp{--memory-profiling}, except that it only gathers
@c memory usage information, not call counts.

@end table

@node           Deep profiling grade options
@subsubsection  Deep profiling grade options
@cindex         Deep profiling grade options

@table @asis

@sp 1
@item @code{--deep-profiling} (grade modifier: @samp{.profdeep})
@findex --deep-profiling
@cindex Deep profiling
@cindex .profdeep (grade modifier
Prepare the generated code for deep profiling. The Mercury deep
profiling tool @code{mdprof} (note the ``d'' in the name) associates
much more context with each measurement than @code{mprof}, making it
much more suitable for handling polymorphic code and higher order code,
both of which are much more common in typical Mercury code than in
typical C code. This option is supported only when targeting C with
@samp{--no-high-level-code}.

@c @sp 1
@c @item @code{--profile-deep}
@c @findex --profile-deep
@c There is no help text available.

@c @sp 1
@c @item @code{--use-activation-counts}
@c @findex --use-activation-counts
@c There is no help text available.

@c @sp 1
@c @item @code{--no-use-zeroing-for-ho-cycles}
@c @findex --use-zeroing-for-ho-cycles
@c @findex --no-use-zeroing-for-ho-cycles
@c There is no help text available.

@c @sp 1
@c @item @code{--use-lots-of-ho-specialization}
@c @findex --use-lots-of-ho-specialization
@c There is no help text available.

@c @sp 1
@c @item @code{--deep-profile-tail-recursion}
@c @findex --deep-profile-tail-recursion
@c There is no help text available.

@sp 1
@item @code{--no-coverage-profiling}
@findex --coverage-profiling
@findex --no-coverage-profiling
@cindex Coverage profiling
Do not gather deep profiling information that is useful only for
coverage profiling.

@c @sp 1
@c @item @code{--coverage-profiling-via-calls}
@c @findex --coverage-profiling-via-calls
@c Use calls to implement coverage points, not inline foreign code.

@c @sp 1
@c @item @code{--coverage-profiling-static}
@c @findex --coverage-profiling-static
@c Disable coverage profiling of ProcDynamics; cover only ProcStatics.
@c This uses less memory, and may be faster.

@c @sp 1
@c @item @code{--no-profile-deep-coverage-after-goal}
@c @findex --profile-deep-coverage-after-goal
@c @findex --no-profile-deep-coverage-after-goal
@c Disable coverage points after goals.

@c @sp 1
@c @item @code{--no-profile-deep-coverage-branch-ite}
@c @findex --profile-deep-coverage-branch-ite
@c @findex --no-profile-deep-coverage-branch-ite
@c Disable coverage points at the beginning of then and else branches.

@c @sp 1
@c @item @code{--no-profile-deep-coverage-branch-switch}
@c @findex --profile-deep-coverage-branch-switch
@c @findex --no-profile-deep-coverage-branch-switch
@c Disable coverage points at the beginning of switch branches.

@c @sp 1
@c @item @code{--no-profile-deep-coverage-branch-disj}
@c @findex --profile-deep-coverage-branch-disj
@c @findex --no-profile-deep-coverage-branch-disj
@c Disable coverage points at the beginning of disjunction branches.

@c @sp 1
@c @item @code{--profile-deep-coverage-use-portcounts}
@c @findex --profile-deep-coverage-use-portcounts
@c Use port counts to provide coverage information.

@c @sp 1
@c @item @code{--profile-deep-coverage-use-trivial}
@c @findex --profile-deep-coverage-use-trivial
@c Use simple goal properties for coverage information.

@sp 1
@item @code{--profile-for-feedback}
@itemx @code{--profile-for-implicit-parallelism}
@findex --profile-for-feedback
@findex --profile-for-implicit-parallelism
@cindex Coverage profiling
@cindex Profiler feedback
@cindex Automatic parallelism
Select deep profiling options that are suitable for profiler directed
implicit parallelism. @samp{--profile-for-implicit-parallelism} is a
deprecated synonym for this option.

@end table

@c @node           Complexity profiling grade options
@c @subsubsection  Complexity profiling grade options
@c @cindex         Complexity profiling grade options

@c @table @asis

@c @sp 1
@c @item @code{--experimental-complexity @var{filename}}
@c @findex --experimental-complexity
@c Enable experimental complexity analysis for the predicates listed in
@c the given file. This option is supported only when targeting C with
@c @samp{--no-high-level-code}.

@c @sp 1
@c @item @code{--record-term-sizes-as-words} (grade modifier: @samp{.tsw})
@c @findex --record-term-sizes-as-words
@c @cindex .tsw (grade modifier
@c Augment each heap cell with its size in words.

@c @sp 1
@c @item @code{--record-term-sizes-as-cells} (grade modifier: @samp{.tsc})
@c @findex --record-term-sizes-as-cells
@c @cindex .tsc (grade modifier
@c Augment each heap cell with its size in cells.

@c @end table

@c @node           Threadscope profiling grade options
@c @subsubsection  Threadscope profiling grade options
@c @cindex         Threadscope profiling grade options

@c @table @asis

@c @sp 1
@c @item @code{--threadscope} (grade modifier: @samp{.threadscope})
@c @findex --threadscope
@c @cindex .threadscope (grade modifier
@c Enable support for profiling parallel execution. using Threadscope.
@c This option is supported only when targeting C in parallel grades with
@c @samp{--no-high-level-code}, and only on some processors. See
@c README.ThreadScope and @ref{Using threadscope} for details.

@c @end table

@node           Optional feature grade options
@subsection     Optional feature grade options
@cindex         Optional feature grade options

@table @asis

@c @sp 1
@c @item @code{--pregenerated-dist}
@c @findex --pregenerated-dist
@c There is no help text available.

@sp 1
@item @code{--garbage-collection @{none, boehm, automatic@}}
@itemx @code{--gc @{none, boehm, automatic@}}
@findex --garbage-collection
@findex --gc
@cindex .gc (grade modifier
Specify which method of garbage collection to use. When targeting Java
or C#, the only possible choice is @samp{automatic}, which means the
garbage collector built into the target language. When targeting C, the
usual choice is @samp{boehm}, which is Hans Boehm et al's conservative
collector. The use of the Boehm collector is indicated by the
@samp{.gc} grade component. The other alternative when targeting C is
@samp{none}, meaning there is no garbage collector. This works only for
programs with very short runtimes.

@sp 1
@item @code{--stack-segments} (grade modifier: @samp{.stseg})
@findex --stack-segments
@cindex .stseg (grade modifier
Specify the use of dynamically sized stacks that are composed of small
segments. This can help to avoid stack exhaustion at the cost of
increased execution time. This option is supported only when targeting
C with @samp{--no-high-level-code}.

@c @sp 1
@c @item @code{--extend-stacks-when-needed}
@c @findex --extend-stacks-when-needed
@c @cindex .exts (grade modifier
@c Specify that code that increments the stack pointer must extend the
@c stack on demand. This option is supported only when targeting C with
@c @samp{--no-high-level-code}.

@sp 1
@item @code{--use-trail} (grade modifier: @samp{.tr})
@findex --use-trail
@cindex .tr (grade modifier
Enable use of a trail. This is necessary for interfacing with
constraint solvers, or for backtrackable destructive update. This
option is supported only when targeting C.

@sp 1
@item @code{--single-precision-float} (grade modifier: @samp{.spf})
@itemx @code{--single-prec-float}
@findex --single-precision-float
@findex --single-prec-float
Use single precision floats so that, on 32-bit machines, floating point
values don't need to be boxed. The default is to use double precision
floats. This option is supported only when targeting C.

@sp 1
@item @code{--parallel} (grade modifier: @samp{.par})
@findex --parallel
@cindex .par (grade modifier
Enable parallel execution support for the low-level C grades. Enable
concurrency (via pthreads) for the high-level C grades.

@sp 1
@item @code{--maybe-thread-safe @{yes, no@}}
@findex --maybe-thread-safe
Specify how the compiler should treat the @code{maybe_thread_safe}
foreign code attribute. @samp{yes} means that a foreign procedure with
the @code{maybe_thread_safe} attribute is treated as if it has a
@code{thread_safe} attribute. @samp{no} means that the foreign
procedure is treated as if it has a @code{not_thread_safe} attribute.
The default is @samp{no}.

@c @sp 1
@c @item @code{--use-minimal-model-stack-copy}
@c @findex --use-minimal-model-stack-copy
@c @cindex .mmsc (grade modifier
@c Enable the use of the standard form of minimal model tabling.

@c @sp 1
@c @item @code{--use-minimal-model-own-stacks}
@c @findex --use-minimal-model-own-stacks
@c @cindex .mmos (grade modifier
@c Enable the use of an experimental form of minimal model tabling.

@c @sp 1
@c @item @code{--minimal-model-debug}
@c @findex --minimal-model-debug
@c @cindex .dmmsc (grade modifier
@c @cindex .dmmos (grade modifier
@c Enables extra data structures that assist in debugging minimal model
@c tabling.

@c @sp 1
@c @item @code{--use-regions} (grade modifier: @samp{.rbmm})
@c @findex --use-regions
@c @cindex .rbmm (grade modifier
@c Enable support for region-based memory management.

@c @sp 1
@c @item @code{--no-use-alloc-regions}
@c @findex --use-alloc-regions
@c @findex --no-use-alloc-regions
@c Compute and use the exact set of regions that may be allocated into by
@c a call.

@c @sp 1
@c @item @code{--use-regions-debug}
@c @findex --use-regions-debug
@c There is no help text available.

@c @sp 1
@c @item @code{--use-regions-profiling}
@c @findex --use-regions-profiling
@c There is no help text available.

@end table

@node           Developer grade options
@subsection     Developer grade options
@cindex         Developer grade options

@table @asis

@sp 1
@item @code{--num-ptag-bits @var{N}}
@itemx @code{--num-tag-bits @var{N}}
@findex --num-ptag-bits
@findex --num-tag-bits
@cindex Tags
@cindex Data representation
Use @samp{N} primary tag bits. Note that the value of this option is
normally autoconfigured; its use should never be needed except for
cross-compilation to an architecture where autoconfiguration would
yield a different value.

@c @sp 1
@c @item @code{--bits-per-word @var{N}}
@c @findex --bits-per-word
@c Reserved for use by the `mmc' script.

@c @sp 1
@c @item @code{--bytes-per-word @var{N}}
@c @findex --bytes-per-word
@c Reserved for use by the `mmc' script.

@c @sp 1
@c @item @code{--unboxed-float}
@c @findex --unboxed-float
@c Do not box floating point numbers. This assumes that a Mercury float
@c will fit in a word. The C code must be compiled with
@c @code{-UMR_BOXED_FLOAT}. It may also need to be compiled with
@c @code{-DMR_USE_SINGLE_PREC_FLOAT}, if double precision floats do not
@c fit into a word. Note that the value of this option is normally
@c autoconfigured; its use should never be needed except for
@c cross-compilation.

@c @sp 1
@c @item @code{--unboxed-int64s}
@c @findex --unboxed-int64s
@c Do not box 64-bit integer numbers. This assumes that word size of the
@c target machine is at least 64-bits in size. The C code must be compiled
@c with @code{-UMR_BOXED_INT64S}. Note that the value of this option is
@c normally autoconfigured; its use should never be needed except for
@c cross-compilation.

@c @sp 1
@c @item @code{--no-unboxed-no-tag-types}
@c @findex --unboxed-no-tag-types
@c @findex --no-unboxed-no-tag-types
@c Box no-tag types. (By default, no-tag types are unboxed.) Note that the
@c value of this option is normally autoconfigured; its use should never
@c be needed except for cross-compilation.

@c @sp 1
@c @item @code{--arg-pack-bits @var{N}}
@c @findex --arg-pack-bits
@c The number of bits in a word in which to pack constructor arguments.
@c Note that the value of this option is normally autoconfigured; its use
@c should never be needed except for cross-compilation.

@c @sp 1
@c @item @code{--pack-everything}
@c @findex --pack-everything
@c Tell decide_type_repn.m to pack everything that can be packed.

@c @sp 1
@c @item @code{--no-allow-direct-args}
@c @findex --allow-direct-args
@c @findex --no-allow-direct-args
@c Allow the direct arg optimization.

@c @sp 1
@c @item @code{--no-allow-double-word-fields}
@c @findex --allow-double-word-fields
@c @findex --no-allow-double-word-fields
@c Disallow storing a single constructor argument in two words. (This
@c mainly applies to arguments that are double-precision floats or whose
@c type is int64 or uint64.

@c @sp 1
@c @item @code{--allow-double-word-ints}
@c @findex --allow-double-word-ints
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packing-dummies}
@c @findex --allow-packing-dummies
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packing-ints}
@c @findex --allow-packing-ints
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packing-chars}
@c @findex --allow-packing-chars
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packing-local-sectags}
@c @findex --allow-packing-local-sectags
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packing-remote-sectags}
@c @findex --allow-packing-remote-sectags
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packing-mini-types}
@c @findex --allow-packing-mini-types
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-packed-unify-compare}
@c @findex --allow-packed-unify-compare
@c There is no help text available.

@c @sp 1
@c @item @code{--sync-term-size-in-words @var{num_words}}
@c @itemx @code{--sync-term-size @var{num_words}}
@c @findex --sync-term-size-in-words
@c @findex --sync-term-size
@c There is no help text available.

@end table

@node           Options that control inference
@section        Options that control inference
@cindex         Options that control inference

@table @asis

@sp 1
@item @code{--infer-all}
@findex --infer-all
@findex --no-infer-all
@cindex Inferemce
This option is an abbreviation for the combination of
@samp{--infer-types}, @samp{--infer-modes}, and @samp{--infer-det}.

@sp 1
@item @code{--infer-types}
@findex --infer-types
@cindex Inferemce of types
@cindex Type inference
If there is no type declaration for a predicate or function, try to
infer its type, instead of just reporting an error.

@sp 1
@item @code{--infer-modes}
@findex --infer-modes
@cindex Inferemce of mode
@cindex Mode inference
If there is no mode declaration for a predicate, try to infer its mode
(or modes), instead of just reporting an error.

@sp 1
@item @code{--no-infer-determinism}
@itemx @code{--no-infer-det}
@findex --infer-determinism
@findex --no-infer-determinism
@findex --infer-det
@findex --no-infer-det
@cindex Inferemce of determinism
@cindex Determinism inferemce
If there is no determinism declaration for a procedure (a mode of a
predicate or of a function), just report an error; do not try to infer
its determinism.

@sp 1
@item @code{--type-inference-iteration-limit @var{N}}
@findex --type-inference-iteration-limit
@cindex Inferemce of types
@cindex Type inference
Perform at most @var{N} passes of type inference (default: 60).

@sp 1
@item @code{--mode-inference-iteration-limit @var{N}}
@findex --mode-inference-iteration-limit
@cindex Inferemce of mode
@cindex Mode inference
Perform at most @var{N} passes of mode inference (default: 30).

@sp 1
@item @code{--allow-stubs}
@findex --allow-stubs
@cindex Stubs
@cindex Procedures with no clauses
@cindex No clauses, procedures with
@cindex Clauses, procedures without
Allow procedures to have no clauses. Any calls to such procedures will
raise an exception at run-time. This option is sometimes useful during
program development. (See also the documentation for the
@samp{--warn-stubs} option in @ref{Warning options}.)

@end table

@node           Options specifying the intended semantics
@section        Options specifying the intended semantics
@cindex         Options specifying the intended semantics

@table @asis

@sp 1
@item @code{--strict-sequential}
@findex --strict-sequential
This option is an abbreviation for the combination of
@samp{--no-reorder-conj}, @samp{--no-reorder-disj}, and
@samp{--fully-strict}.

@sp 1
@item @code{--no-reorder-conj}
@findex --reorder-conj
@findex --no-reorder-conj
Execute conjunctions left-to-right. Do not reorder conjuncts, except
where the modes require it (to put the producer of each variable before
all its consumers).

@sp 1
@item @code{--no-reorder-disj}
@findex --reorder-disj
@findex --no-reorder-disj
Execute disjunctions strictly left-to-right; do not reorder disjuncts.

@sp 1
@item @code{--no-fully-strict}
@findex --fully-strict
@findex --no-fully-strict
Allow infinite loops, and goals whose determinism is erroneous, to be
optimised away.

@end table

@node           Verbosity options
@section        Verbosity options
@cindex         Verbosity options

@table @asis

@sp 1
@item @code{-v}
@itemx @code{--verbose}
@findex -v
@findex --verbose
Output progress messages at each stage in the compilation.

@sp 1
@item @code{-V}
@itemx @code{--very-verbose}
@findex -V
@findex --very-verbose
Output very verbose progress messages.

@sp 1
@item @code{-S}
@itemx @code{--statistics}
@findex -S
@findex --statistics
Output messages about the compiler's time/space usage at the boundaries
between phases of the compiler.

@sp 1
@item @code{--no-verbose-make}
@findex --verbose-make
@findex --no-verbose-make
Disable messages about the progress of builds when using
@code{mmc --make}.

@sp 1
@item @code{--output-compile-error-lines @var{N}}
@itemx --no-output-compile-error-lines
@findex --output-compile-error-lines
@findex --no-output-compile-error-lines
With @samp{--make}, output the first @var{N} lines of the @file{.err}
file after compiling a module (default: 100). Specifying
@samp{--no-output-compile-error-lines} removes the limit.

@c @sp 1
@c @item @code{--verbose-recompilation}
@c @findex --verbose-recompilation
@c When using @samp{--smart-recompilation}, output messages explaining why
@c a module needs to be recompiled.

@c @sp 1
@c @item @code{--find-all-recompilation-reasons}
@c @findex --find-all-recompilation-reasons
@c Find all the reasons why a module needs to be recompiled, not just the
@c first. Implies @samp{--verbose-recompilation}.

@sp 1
@item @code{--verbose-commands}
@findex --verbose-commands
Output each external command before it is run. Note that some commands
will only be printed with @samp{--verbose}.

@end table

@node           Diagnostics options
@section        Diagnostics options
@cindex         Diagnostics options

@menu
* Options that control diagnostics:: 
* Options that control color in diagnostics:: 
@end menu

@node           Options that control diagnostics
@subsection     Options that control diagnostics
@cindex         Options that control diagnostics

@table @asis

@sp 1
@item @code{-E}
@itemx @code{--verbose-error-messages}
@itemx @code{--verbose-errors}
@findex -E
@findex --verbose-error-messages
@findex --verbose-errors
Some error messages have two versions: a standard version intended for
experienced users, and a verbose version intended for new users. The
default is to print the first version. This option tells the compiler
to print the second version, which will offer a more detailed
explanation of any errors it finds in your code.

@sp 1
@item @code{--reverse-error-order}
@findex --reverse-error-order
Print error messages in descending order of their line numbers, instead
of the usual ascending order. This is useful if you want to work on the
last errors in a file first.

@sp 1
@item @code{--max-error-line-width @var{N}}
@itemx --no-max-error-line-width
@findex --max-error-line-width
@findex --no-max-error-line-width
Set the maximum width of an error message line to @var{N} characters
(unless a long single word forces the line over this limit). Specifying
@samp{--no-max-error-line-width} removes the limit.

@sp 1
@item @code{--limit-error-contexts @var{filename:minline1-maxline1,minline2-maxline2}}
@itemx --no-limit-error-contexts
@findex --limit-error-contexts
@findex --no-limit-error-contexts
Print errors and warnings for the named file only when their line
number is in one of the specified ranges. The minimum or maximum line
number in each range may be omitted, in which case the range has no
lower or upper bound respectively. Multiple
@samp{--limit-error-context} options accumulate. If more than one
@samp{--limit-error-context} option is given for the same file, only
the last one will have an effect. If the file name and colon are
missing, the limit will apply to all files.

@sp 1
@item @code{--error-files-in-subdir}
@findex --error-files-in-subdir
@cindex File names
@cindex Directories
@cindex Subdirectories
@cindex @file{Mercury} subdirectory
This option causes @code{mmc --make} to put @file{.err} files into the
@file{Mercury} subdirectory instead of the current directory. (This
option has no effect on @code{mmake}.)

@c @sp 1
@c @item @code{--std-int-file-not-written-msgs}
@c @findex --std-int-file-not-written-msgs
@c Standardize messages about interface files not being written by
@c omitting any directory name components from file names.

@sp 1
@item @code{--typecheck-ambiguity-warn-limit @var{N}}
@findex --typecheck-ambiguity-warn-limit
Set the number of type assignments required to generate a warning about
highly ambiguous overloading to @var{N}. (Default: 50.)

@sp 1
@item @code{--typecheck-ambiguity-error-limit @var{N}}
@findex --typecheck-ambiguity-error-limit
Set the number of type assignments required to generate an error about
excessively ambiguous overloading to @var{N}. If this limit is reached,
the typechecker will not process the predicate or function any further.
(Default: 3000.)

@end table

@node           Options that control color in diagnostics
@subsection     Options that control color in diagnostics
@cindex         Options that control color in diagnostics

@table @asis

@sp 1
@item @code{--color-diagnostics}
@itemx @code{--colour-diagnostics}
@findex --color-diagnostics
@findex --no-color-diagnostics
@findex --colour-diagnostics
@findex --no-colour-diagnostics
Disable the use of colors in diagnostic messages. Please see
@ref{Enabling the use of color} for the details.

@c @sp 1
@c @item @code{--no-config-default-color-diagnostics}
@c @itemx @code{--no-config-default-colour-diagnostics}
@c @findex --config-default-color-diagnostics
@c @findex --no-config-default-color-diagnostics
@c @findex --config-default-colour-diagnostics
@c @findex --no-config-default-colour-diagnostics
@c The default value of the @samp{--color-diagnostics} option, set by the
@c configure script.

@c @sp 1
@c NO_HELP OPTION color_diagnostics_is_set
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION color_diagnostics_is_set_to
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION use_color_diagnostics
@c There is no help text available.

@sp 1
@item @code{--color-scheme @var{ColorScheme}}
@itemx @code{--colour-scheme @var{ColorScheme}}
@findex --color-scheme
@findex --colour-scheme
Specify the color scheme to use for diagnostics, if the use of color in
diagnostics is enabled. For information about how the compiler uses
colors in diagnostic messages, and about the syntax of color scheme
specifications, please see @ref{Color schemes}.

@c @sp 1
@c @item @code{--color-scheme-envvar @var{ColorScheme}}
@c @findex --color-scheme-envvar
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION color_scheme_set_by
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION color_scheme_set_to
@c There is no help text available.

@c @sp 1
@c @item @code{--ignore-color-scheme-envvar}
@c @findex --ignore-color-scheme-envvar
@c Ignore the @samp{--color-scheme-envvar} option.

@c @sp 1
@c NO_HELP OPTION set_color_subject
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION set_color_correct
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION set_color_incorrect
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION set_color_inconsistent
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION set_color_hint
@c There is no help text available.

@end table

@node           Warning options
@section        Warning options
@cindex         Warning options

@menu
* Warnings about possible incorrectness:: 
* Warnings about possible performance issues:: 
* Warnings about programming style:: 
* Options that control warnings:: 
* Options about halting for warnings:: 
@end menu

@node           Warnings about possible incorrectness
@subsection     Warnings about possible incorrectness
@cindex         Warnings about possible incorrectness

@menu
* Warnings about possible module incorrectness:: 
* Warnings about possible inst incorrectness:: 
* Warnings about possible predicate incorrectness:: 
* Warnings about possible pragma incorrectness:: 
* Warnings about possible goal incorrectness:: 
* Warnings about missing files:: 
@end menu

@node           Warnings about possible module incorrectness
@subsubsection  Warnings about possible module incorrectness
@cindex         Warnings about possible module incorrectness

@table @asis

@sp 1
@item @code{--no-warn-nothing-exported}
@findex --warn-nothing-exported
@findex --no-warn-nothing-exported
Do not warn about modules which export nothing.

@sp 1
@item @code{--warn-unused-imports}
@findex --warn-unused-imports
Warn about modules that are imported but not used.

@c @sp 1
@c @item @code{--no-warn-unused-interface-imports}
@c @findex --warn-unused-interface-imports
@c @findex --no-warn-unused-interface-imports
@c Warn about modules that are imported in the interface but not used
@c there.

@sp 1
@item @code{--no-warn-interface-imports}
@findex --warn-interface-imports
@findex --no-warn-interface-imports
Do not warn about modules imported in the interface, but which are not
used in the interface.

@sp 1
@item @code{--warn-interface-imports-in-parents}
@findex --warn-interface-imports-in-parents
Warn about modules that are imported in the interface of a parent
module, but not used in the interface of that module.

@sp 1
@item @code{--no-warn-stdlib-shadowing}
@findex --warn-stdlib-shadowing
@findex --no-warn-stdlib-shadowing
Do not generate warnings for module names that either duplicate the
name of a module in the Mercury standard library, or contain a
subsequence of name components that do so.

@end table

@node           Warnings about possible inst incorrectness
@subsubsection  Warnings about possible inst incorrectness
@cindex         Warnings about possible inst incorrectness

@table @asis

@sp 1
@item @code{--no-warn-insts-without-matching-type}
@findex --warn-insts-without-matching-type
@findex --no-warn-insts-without-matching-type
Do not warn about insts that are not consistent with any of the types
in scope.

@sp 1
@item @code{--warn-insts-with-functors-without-type}
@findex --warn-insts-with-functors-without-type
Warn about insts that do specify functors, but do not specify what type
they are for.

@end table

@node           Warnings about possible predicate incorrectness
@subsubsection  Warnings about possible predicate incorrectness
@cindex         Warnings about possible predicate incorrectness

@table @asis

@sp 1
@item @code{--no-warn-det-decls-too-lax}
@findex --warn-det-decls-too-lax
@findex --no-warn-det-decls-too-lax
Do not warn about determinism declarations which could be stricter.

@sp 1
@item @code{--no-warn-inferred-erroneous}
@findex --warn-inferred-erroneous
@findex --no-warn-inferred-erroneous
Do not warn about procedures whose determinism is inferred to be
@samp{erroneous}, but whose determinism declarations are looser.

@sp 1
@item @code{--no-warn-unresolved-polymorphism}
@findex --warn-unresolved-polymorphism
@findex --no-warn-unresolved-polymorphism
Do not warn about unresolved polymorphism, which occurs when the type
of a variable contains a type variable that is not bound to an actual
type, even though it should be.

@sp 1
@item @code{--no-warn-stubs}
@findex --warn-stubs
@findex --no-warn-stubs
Do not warn about procedures for which there are no clauses. Note that
this option is meaningful only if the @samp{--allow-stubs} option is
enabled.

@sp 1
@item @code{--no-warn-non-term-special-preds}
@findex --warn-non-term-special-preds
@findex --no-warn-non-term-special-preds
Do not warn about types that have user-defined equality or comparison
predicates that cannot be proved to terminate. This option is
meaningful only if termination analysis is enabled.

@sp 1
@item @code{--warn-non-stratification}
@findex --warn-non-stratification
Warn about possible non-stratification of the predicates and/or
functions in the module. Non-stratification occurs when a predicate or
function can call itself through negation through some path in its call
graph.

@end table

@node           Warnings about possible pragma incorrectness
@subsubsection  Warnings about possible pragma incorrectness
@cindex         Warnings about possible pragma incorrectness

@table @asis

@sp 1
@item @code{--no-warn-ambiguous-pragmas}
@itemx @code{--no-warn-ambiguous-pragma}
@findex --warn-ambiguous-pragmas
@findex --no-warn-ambiguous-pragmas
@findex --warn-ambiguous-pragma
@findex --no-warn-ambiguous-pragma
Do not warn about pragmas that do not specify whether they are for a
predicate or a function, even when there is both a predicate and a
function with the given name and arity.

@sp 1
@item @code{--warn-potentially-ambiguous-pragmas}
@itemx @code{--warn-potentially-ambiguous-pragma}
@findex --warn-potentially-ambiguous-pragmas
@findex --warn-potentially-ambiguous-pragma
Warn about pragmas that do not specify whether they are for a predicate
or a function.

@sp 1
@item @code{--no-warn-table-with-inline}
@findex --warn-table-with-inline
@findex --no-warn-table-with-inline
Do not warn about tabled procedures that also have a
@code{pragma inline} declaration. (This combination does not work,
because inlined copies of procedure bodies cannot be tabled.)

@end table

@node           Warnings about possible goal incorrectness
@subsubsection  Warnings about possible goal incorrectness
@cindex         Warnings about possible goal incorrectness

@table @asis

@sp 1
@item @code{--no-warn-singleton-variables}
@itemx @code{--no-warn-singleton-vars}
@findex --warn-singleton-variables
@findex --no-warn-singleton-variables
@findex --warn-singleton-vars
@findex --no-warn-singleton-vars
Do not warn about variables which only occur once in a clause, but
whose names do not start with an underscore.

@sp 1
@item @code{--no-warn-repeated-singleton-variables}
@itemx @code{--no-warn-repeated-singleton-vars}
@findex --warn-repeated-singleton-variables
@findex --no-warn-repeated-singleton-variables
@findex --warn-repeated-singleton-vars
@findex --no-warn-repeated-singleton-vars
Do not warn about variables which occur more than once in a clause, but
whose names do start with an underscore.

@sp 1
@item @code{--no-warn-unification-cannot-succeed}
@findex --warn-unification-cannot-succeed
@findex --no-warn-unification-cannot-succeed
Do not warn about unifications which cannot succeed.

@sp 1
@item @code{--no-warn-known-bad-format-calls}
@findex --warn-known-bad-format-calls
@findex --no-warn-known-bad-format-calls
Do not warn about calls to @code{string.format}, @code{io.format}, or
@code{stream.string_writer.format} that contain mismatches between the
format string and the supplied values.

@sp 1
@item @code{--no-warn-obsolete}
@findex --warn-obsolete
@findex --no-warn-obsolete
Do not warn about calls to predicates and functions that have been
marked as obsolete.

@sp 1
@item @code{--no-warn-overlapping-scopes}
@findex --warn-overlapping-scopes
@findex --no-warn-overlapping-scopes
Do not warn about variables which occur in overlapping scopes.

@sp 1
@item @code{--no-warn-suspected-occurs-check-failure}
@itemx @code{--no-warn-suspected-occurs-failure}
@findex --warn-suspected-occurs-check-failure
@findex --no-warn-suspected-occurs-check-failure
@findex --warn-suspected-occurs-failure
@findex --no-warn-suspected-occurs-failure
Do not warn about code that looks like it unifies a variable with a
term that contains that same variable. Such code cannot succeed because
it fails the test called the @emph{occurs check}.

@sp 1
@item @code{--warn-suspicious-recursion}
@findex --warn-suspicious-recursion
Warn about recursive calls which are likely to have problems, such as
leading to infinite recursion.

@sp 1
@item @code{--warn-unused-args}
@findex --warn-unused-args
Warn about predicate or function arguments which are not used.

@end table

@node           Warnings about missing files
@subsubsection  Warnings about missing files
@cindex         Warnings about missing files

@table @asis

@sp 1
@item @code{--no-warn-undefined-options-variables}
@itemx @code{--no-warn-undefined-options-vars}
@findex --warn-undefined-options-variables
@findex --no-warn-undefined-options-variables
@findex --warn-undefined-options-vars
@findex --no-warn-undefined-options-vars
Do not warn about references to undefined variables in options files
with @samp{--make}.

@sp 1
@item @code{--no-warn-missing-opt-files}
@findex --warn-missing-opt-files
@findex --no-warn-missing-opt-files
Do not warn about @file{.opt} files which cannot be opened.

@sp 1
@item @code{--warn-missing-trans-opt-files}
@findex --warn-missing-trans-opt-files
Warn about @file{.trans_opt} files which cannot be opened.

@sp 1
@item @code{--no-warn-missing-trans-opt-deps}
@findex --warn-missing-trans-opt-deps
@findex --no-warn-missing-trans-opt-deps
Do not generate a warning when the information required to allow
@file{.trans_opt} files to be read when creating other
@file{.trans_opt} files has been lost. The information can be recreated
by running @code{mmake} @file{@var{mainmodule}.depend}.

@end table

@node           Warnings about possible performance issues
@subsection     Warnings about possible performance issues
@cindex         Warnings about possible performance issues

@table @asis

@sp 1
@item @code{--no-warn-accumulator-swaps}
@findex --warn-accumulator-swaps
@findex --no-warn-accumulator-swaps
Do not warn about argument order rearrangements done by
@samp{--introduce-accumulators}.

@sp 1
@item @code{--no-warn-unneeded-final-statevars}
@findex --warn-unneeded-final-statevars
@findex --no-warn-unneeded-final-statevars
Do not warn about @code{!:S} state variables in clause heads whose
value will always be the same as @code{!.S}.

@sp 1
@item @code{--no-warn-unneeded-final-statevars-lambda}
@findex --warn-unneeded-final-statevars-lambda
@findex --no-warn-unneeded-final-statevars-lambda
Do not warn about @code{!:S} state variables in lambda expressions
whose value will always be the same as @code{!.S}.

@sp 1
@item @code{--warn-obvious-non-tail-recursion}
@findex --warn-obvious-non-tail-recursion
Warn about recursive calls that are not tail calls even if they
obviously cannot be tail calls, because they are followed by other
recursive calls.

@c @sp 1
@c @item @code{--warn-non-tail-recursion-self}
@c @findex --warn-non-tail-recursion-self
@c Warn about any self recursive calls that are not tail recursive.

@c @sp 1
@c @item @code{--warn-non-tail-recursion-mutual}
@c @findex --warn-non-tail-recursion-mutual
@c Warn about any mutually recursive calls that are not tail recursive.

@sp 1
@item @code{--warn-non-tail-recursion @{none,self,self-and-mutual@}}
@itemx --no-warn-non-tail-recursion
@findex --warn-non-tail-recursion
@findex --no-warn-non-tail-recursion
Specify when the compiler should warn about recursive calls that are
not tail calls.

@end table

@node           Warnings about programming style
@subsection     Warnings about programming style
@cindex         Warnings about programming style

@menu
* Warnings about style issues with predicates:: 
* Warnings about style issues with goals:: 
* Warnings about missing order:: 
* Warnings about missing contiguity:: 
@end menu

@node           Warnings about style issues with predicates
@subsubsection  Warnings about style issues with predicates
@cindex         Warnings about style issues with predicates

@table @asis

@sp 1
@item @code{--warn-dead-predicates}
@itemx @code{--warn-dead-preds}
@findex --warn-dead-predicates
@findex --warn-dead-preds
Warn about predicates and functions that have no procedures which are
ever called.

@sp 1
@item @code{--warn-dead-procedures}
@itemx @code{--warn-dead-procs}
@findex --warn-dead-procedures
@findex --warn-dead-procs
Warn about procedures which are never called.

@sp 1
@item @code{--warn-can-fail-function}
@findex --warn-can-fail-function
Warn about functions that can fail. (Such functions should be replaced
by semidet predicates.)

@sp 1
@item @code{--no-warn-unneeded-mode-specific-clause}
@findex --warn-unneeded-mode-specific-clause
@findex --no-warn-unneeded-mode-specific-clause
Do not warn about clauses that unnecessarily specify the modes of their
arguments.

@end table

@node           Warnings about style issues with goals
@subsubsection  Warnings about style issues with goals
@cindex         Warnings about style issues with goals

@table @asis

@sp 1
@item @code{--no-warn-simple-code}
@findex --warn-simple-code
@findex --no-warn-simple-code
Do not warn about constructs which are so simple that they are likely
to be programming errors. (One example is if-then-elses whose condition
always succeeds.)

@sp 1
@item @code{--inform-ite-instead-of-switch}
@findex --inform-ite-instead-of-switch
Generate informational messages for if-then-elses that could be
replaced by switches.

@sp 1
@item @code{--inform-incomplete-switch}
@findex --inform-incomplete-switch
Generate informational messages for switches that do not cover all the
function symbols that the switched-on variable could be bound to.

@sp 1
@item @code{--inform-incomplete-switch-threshold @var{N}}
@findex --inform-incomplete-switch-threshold
Have the @samp{--inform-incomplete-switch} option generate its messages
only for switches that @emph{do} cover at least @samp{N}% of the
function symbols that the switched-on variable could be bound to.

@sp 1
@item @code{--warn-duplicate-calls}
@findex --warn-duplicate-calls
Warn about multiple calls to a predicate or function with the same
input arguments.

@sp 1
@item @code{--no-warn-redundant-coerce}
@findex --warn-redundant-coerce
@findex --no-warn-redundant-coerce
Do not warn about redundant type coercions, which occur when the type
of the result of the @code{coerce} expression is the same as the type
of its argument.

@sp 1
@item @code{--no-warn-state-var-shadowing}
@findex --warn-state-var-shadowing
@findex --no-warn-state-var-shadowing
Do not warn about one state variable shadowing another.

@sp 1
@item @code{--no-warn-unneeded-initial-statevars}
@findex --warn-unneeded-initial-statevars
@findex --no-warn-unneeded-initial-statevars
Do not warn about state variables in clause heads that could be
ordinary variables.

@sp 1
@item @code{--no-warn-unneeded-initial-statevars-lambda}
@findex --warn-unneeded-initial-statevars-lambda
@findex --no-warn-unneeded-initial-statevars-lambda
Do not warn about state variables in the heads of lambda expressions
that could be ordinary variables.

@sp 1
@item @code{--warn-implicit-stream-calls}
@findex --warn-implicit-stream-calls
Warn about calls to I/O predicates that could take explicit stream
arguments, but do not do so.

@sp 1
@item @code{--warn-unknown-format-calls}
@findex --warn-unknown-format-calls
Warn about calls to @code{string.format}, @code{io.format} or
@code{stream.string_writer.format} for which the compiler cannot tell
whether there are any mismatches between the format string and the
supplied values.

@sp 1
@item @code{--warn-suspicious-foreign-code}
@findex --warn-suspicious-foreign-code
Warn about possible errors in the bodies of foreign code pragmas.

@sp 1
Note that since the compiler's ability to parse foreign language code
is limited, some warnings reported by this option may be spurious, and
some actual errors may not be detected at all.

@sp 1
@item @code{--warn-suspicious-foreign-procs}
@findex --warn-suspicious-foreign-procs
Warn about possible errors in the bodies of foreign_proc pragmas. When
enabled, the compiler attempts to determine whether the success
indicator for a foreign procedure is correctly set, and whether the
foreign procedure body contains operations that it should not contain,
such as @code{return} statements in a C foreign procedure.

@sp 1
Note that since the compiler's ability to parse foreign language code
is limited, some warnings reported by this option may be spurious, and
some actual errors may not be detected at all.

@end table

@node           Warnings about missing order
@subsubsection  Warnings about missing order
@cindex         Warnings about missing order

@table @asis

@sp 1
@item @code{--warn-unsorted-import-blocks}
@itemx @code{--warn-unsorted-import-block}
@findex --warn-unsorted-import-blocks
@findex --warn-unsorted-import-block
Generate a warning if two @code{import_module} and/or @code{use_module}
declarations occur on the same line, or if a sequence of such
declarations on consecutive lines are not sorted on module name.

@sp 1
@item @code{--warn-inconsistent-pred-order-clauses}
@itemx @code{--warn-inconsistent-pred-order}
@findex --warn-inconsistent-pred-order-clauses
@findex --warn-inconsistent-pred-order
Generate a warning if the order of the definitions does not match the
order of the declarations for either the exported predicates and
functions of the module, or for the nonexported predicates and
functions of the module. Applies for definitions by Mercury clauses.

@sp 1
@item @code{--warn-inconsistent-pred-order-foreign-procs}
@findex --warn-inconsistent-pred-order-foreign-procs
Generate a warning if the order of the definitions does not match the
order of the declarations for either the exported predicates and
functions of the module, or for the nonexported predicates and
functions of the module. Applies for definitions by either Mercury
clauses or foreign_proc pragmas.

@end table

@node           Warnings about missing contiguity
@subsubsection  Warnings about missing contiguity
@cindex         Warnings about missing contiguity

@table @asis

@sp 1
@item @code{--no-warn-non-contiguous-decls}
@findex --warn-non-contiguous-decls
@findex --no-warn-non-contiguous-decls
Do not generate a warning if the mode declarations of a predicate or
function do not all immediately follow its @code{pred} or @code{func}
declaration.

@sp 1
@item @code{--warn-non-contiguous-clauses}
@findex --warn-non-contiguous-clauses
Generate a warning if the clauses of a predicate or function are not
contiguous.

@sp 1
@item @code{--warn-non-contiguous-foreign-procs}
@findex --warn-non-contiguous-foreign-procs
Generate a warning if the clauses and foreign_procs of a predicate or
function are not contiguous.

@sp 1
@item @code{--allow-non-contiguity-for @var{name1,name2,...}}
@itemx --no-allow-non-contiguity-for
@findex --allow-non-contiguity-for
@findex --no-allow-non-contiguity-for
Allow the clauses (or, with @samp{--warn-non-contiguous-foreign-procs},
the clauses and/or foreign_proc pragmas) of the named predicates and/or
functions to be intermingled with each other, but not with those or any
other predicates or functions. This option may be specified more than
once, with each option value specifying a distinct set of predicates
and/or function names that may be intermingled. Each name must uniquely
specify a predicate or a function.

@end table

@node           Options that control warnings
@subsection     Options that control warnings
@cindex         Options that control warnings

@table @asis

@sp 1
@item @code{-w}
@itemx @code{--inhibit-warnings}
@findex -w
@findex -w-
@findex --inhibit-warnings
@findex --no-inhibit-warnings
Disable all warning messages.

@sp 1
@item @code{--inhibit-style-warnings}
@findex --inhibit-style-warnings
@findex --no-inhibit-style-warnings
Disable all warning messages about programming style.

@sp 1
@item @code{--warn-all-format-string-errors}
@findex --warn-all-format-string-errors
If a format string has more one than mismatch with the supplied values,
generate a warning for all mismatches, not just the first. (The default
is to report only the first, because later mismatches may be avalanche
errors caused by earlier mismatches.)

@c @sp 1
@c @item @code{--no-warn-smart-recompilation}
@c @findex --warn-smart-recompilation
@c @findex --no-warn-smart-recompilation
@c Disable warnings from the smart recompilation system.

@sp 1
@item @code{--no-warn-up-to-date}
@findex --warn-up-to-date
@findex --no-warn-up-to-date
Do not warn if targets specified on the command line with
@code{mmc --make} are already up-to-date.

@end table

@node           Options about halting for warnings
@subsection     Options about halting for warnings
@cindex         Options about halting for warnings

@table @asis

@sp 1
@item @code{--halt-at-warn}
@findex --halt-at-warn
This option causes the compiler to treat all warnings as if they were
errors when intending to generate target code. This means that if the
compiler issues any warnings, it will not generate target code;
instead, it will return a non-zero exit status.

@sp 1
@item @code{--halt-at-warn-make-interface}
@itemx @code{--halt-at-warn-make-int}
@findex --halt-at-warn-make-interface
@findex --halt-at-warn-make-int
This option causes the compiler to treat all warnings as if they were
errors when intending to generate an interface file (a @file{.int},
@file{.int0}, @file{.int2} or @file{.int3} file). This means that if
the compiler issues any warnings at that time, it will not generate the
interface file; instead, it will return a non-zero exit status.

@sp 1
@item @code{--halt-at-warn-make-opt}
@findex --halt-at-warn-make-opt
This option causes the compiler to treat all warnings as if they were
errors when intending to generate an optimization file (a @file{.opt}
or @file{.trans_opt} file.) This means that if the compiler issues any
warnings at that time, it will not generate the optimization file;
instead, it will return a non-zero exit status.

@sp 1
@item @code{--halt-at-syntax-errors}
@findex --halt-at-syntax-errors
This option causes the compiler to halt immediately, without doing any
semantic checking, if it finds any syntax errors in the program.

@sp 1
@item @code{--no-halt-at-invalid-interface}
@findex --halt-at-invalid-interface
@findex --no-halt-at-invalid-interface
This option operates when the compiler is invoked with the
@samp{--make--interface} option to generate @file{.int} and
@file{.int2} files for one or more modules. In its default setting,
@samp{--halt-at-invalid-interface}, it causes the compiler to check the
consistency of those parts of each of those modules that are intended
to end up in the @file{.int} and @file{.int2} files. If these checks
find any problems, the compiler will print an error message for each
problem, but will then stop.

@sp 1
Users can prevent this stop, and thus allow the generation of invalid
interface files, by specifying @samp{--no-halt-at-invalid-interface}.
(In this case, the problems in the invalid information files will be
reported when compiling the modules that import them.)

@c @sp 1
@c @item @code{--halt-at-auto-parallel-failure}
@c @findex --halt-at-auto-parallel-failure
@c This option causes the compiler to halt if it cannot perform an
@c auto-parallelization requested by a feedback file.

@end table

@node           Options that request information
@section        Options that request information
@cindex         Options that request information

@table @asis

@sp 1
@item @code{--inform-inferred}
@findex --inform-inferred
@findex --no-inform-inferred
Do not print inferred types or modes.

@sp 1
@item @code{--no-inform-inferred-types}
@findex --inform-inferred-types
@findex --no-inform-inferred-types
Do not print inferred types.

@sp 1
@item @code{--no-inform-inferred-modes}
@findex --inform-inferred-modes
@findex --no-inform-inferred-modes
Do not print inferred modes.

@c @sp 1
@c @item @code{--inform-incomplete-color-scheme}
@c @findex --inform-incomplete-color-scheme
@c Report if either the value of the @samp{--color-scheme} option, or the
@c value of the @env{MERCURY_COLOR_SCHEME} environment variable, is
@c incomplete, in that it does not specify a color for some role.

@sp 1
@item @code{--inform-suboptimal-packing}
@findex --inform-suboptimal-packing
Generate messages if the arguments of a data constructor could be
packed more tightly if they were reordered.

@sp 1
@item @code{--show-pred-moveability @var{pred_or_func_name}}
@itemx --no-show-pred-moveability
@itemx @code{--show-pred-movability @var{pred_or_func_name}}
@itemx --no-show-pred-movability
@findex --show-pred-moveability
@findex --no-show-pred-moveability
@findex --show-pred-movability
@findex --no-show-pred-movability
Write out a short report on the effect of moving the code of the named
predicate or function (or the named several predicates and/or
functions, if the option is given several times) to a new module. This
includes listing the other predicates and/or functions that would have
to be moved with them, and whether the move would cause unwanted
coupling between the new module and the old.

@end table

@node           Options that ask for informational files
@section        Options that ask for informational files
@cindex         Options that ask for informational files

@table @asis

@sp 1
@item @code{--show-definitions}
@itemx @code{--show-defns}
@findex --show-definitions
@findex --show-defns
Write out a list of the types, insts, modes, predicates, functions,
typeclasses and instances defined in the module to
@file{@var{module}.defns}.

@sp 1
@item @code{--show-definition-line-counts}
@itemx @code{--show-defn-line-counts}
@findex --show-definition-line-counts
@findex --show-defn-line-counts
Write out a list of the predicates and functions defined in the module,
together with the names of the files containing them and their
approximate line counts, to @file{@var{module}.defn_line_counts}. The
list will be ordered on the names and arities of the predicates and
functions.

@sp 1
The line counts are only approximate because the compiler does not
need, and therefore does not keep around, information such as the
context of a line that contains only a close parenthesis ending a
clause.

@sp 1
@item @code{--show-definition-extents}
@itemx @code{--show-defn-extents}
@findex --show-definition-extents
@findex --show-defn-extents
Write out a list of the predicates and functions defined in the module,
together with the approximate line numbers of their first and last
lines, to @file{@var{module}.defn_extents}. The list will be ordered on
the starting line numbers of the predicates and functions.

@sp 1
The line numbers are only approximate because the compiler does not
need, and therefore does not keep around, information such as the
context of a line that contains only a close parenthesis ending a
clause.

@sp 1
@item @code{--show-local-call-tree}
@findex --show-local-call-tree
Construct the local call tree of the predicates and functions defined
in the module. Each node of this tree is a local predicate or function,
and each node has edges linking it to the nodes of the other local
predicates and functions it directly refers to. Write out to
@file{@var{module}.local_call_tree} a list of these nodes. Put these
nodes into the order in which they are encountered by a depth-first
left-to-right traversal of the bodies (as reordered by mode analysis),
of the first procedure of each predicate or function, starting the
traversal at the exported predicates and/or functions of the module.
List the callees of each node in the same order.

@sp 1
Write a flattened form of this call tree, containing just the
predicates and functions in the same traversal order, to
@file{@var{module}.local_call_tree_order}.

@sp 1
Construct another call tree of the predicates and functions defined in
the module in which each entry lists not just the local
predicates/functions directly referred to, but all directly or
indirectly referenced predicates/functions, whether or not they are
defined in the current module. The one restriction is that we consider
only references that occur in the body of the current module. Write out
this tree to @file{@var{module}.local_call_full}.

@sp 1
@item @code{--show-local-type-representations}
@itemx @code{--show-local-type-repns}
@findex --show-local-type-representations
@findex --show-local-type-repns
Write out information about the representations of all types defined in
the module being compiled to @file{@var{module}.type_repns}.

@sp 1
@item @code{--show-all-type-representations}
@itemx @code{--show-all-type-repns}
@findex --show-all-type-representations
@findex --show-all-type-repns
Write out information about the representations of all types visible in
the module being compiled to @file{@var{module}.type_repns}.

@c @sp 1
@c @item @code{--show-developer-type-representations}
@c @itemx @code{--show-developer-type-repns}
@c @findex --show-developer-type-representations
@c @findex --show-developer-type-repns
@c When writing out information about the representations of types,
@c include information that is of interest to Mercury developers only.

@sp 1
@item @code{--show-dependency-graph}
@findex --show-dependency-graph
Write out the dependency graph to @file{@var{module}.dependency_graph}.

@sp 1
@item @code{--show-imports-graph}
@itemx @code{--imports-graph}
@findex --show-imports-graph
@findex --imports-graph
If @samp{--generate-dependencies} is specified, then write out the
imports graph to @file{@var{module}.imports_graph} in a format that can
be processed by the @code{graphviz} tools. The graph will contain an
edge from the node of module A to the node of module B if module A
imports module B.

@end table

@node           Controlling trace goals
@section        Controlling trace goals
@cindex         Controlling trace goals

@table @asis

@sp 1
@item @code{--trace-flag @var{keyword}}
@itemx --no-trace-flag
@findex --trace-flag
@findex --no-trace-flag
Enable the trace goals that depend on the @var{keyword} trace flag.

@end table

@node           Preparing code for mdb debugging
@section        Preparing code for mdb debugging
@cindex         Preparing code for mdb debugging

@table @asis

@sp 1
@item @code{--trace @{minimum, shallow, deep, rep, default@}}
@findex --trace
Generate code that includes the specified level of execution tracing.
@xref{Debugging}.

@sp 1
@item @code{--exec-trace-tail-rec}
@findex --exec-trace-tail-rec
Generate TAIL events for self-tail-recursive calls instead of EXIT
events. This allows these recursive calls to reuse their parent call's
stack frame, but it also means that the debugger won't have access to
the contents of the reused stack frames.

@sp 1
@item @code{--trace-optimized}
@itemx @code{--trace-optimised}
@findex --trace-optimized
@findex --trace-optimised
Do not disable optimizations that can change the trace.

@c @sp 1
@c @item @code{--trace-prof}
@c @findex --trace-prof
@c Enable tracing of deep profiling service predicates.

@sp 1
@item @code{--event-set-file-name @var{filename}}
@findex --event-set-file-name
Get the specification of user-defined events from @var{filename}.

@c @sp 1
@c @item @code{--trace-table-io}
@c @findex --trace-table-io
@c Enable the tabling of I/O actions, to allow the debugger to execute
@c retry commands across I/O actions.

@c @sp 1
@c @item @code{--trace-table-io-only-retry}
@c @findex --trace-table-io-only-retry
@c Set up I/O tabling to support only retries across I/O actions, not the
@c printing of actions or declarative debugging. This reduces the size of
@c the I/O action table.

@c @sp 1
@c @item @code{--trace-table-io-states}
@c @findex --trace-table-io-states
@c When tabling I/O actions, table the @code{io.state} arguments together
@c with the others. This should be required iff values of type
@c @code{io.state} actually contain information.

@c @sp 1
@c @item @code{--trace-table-io-require}
@c @findex --trace-table-io-require
@c Require the tabling of I/O actions, i.e. generate an error if an I/O
@c primitive does not have the @code{tabled_for_io} annotation.

@c @sp 1
@c @item @code{--trace-table-io-all}
@c @findex --trace-table-io-all
@c Table all I/O actions even in the absence of annotations. If a
@c primitive has no annotation specifying the type of tabling required,
@c deduce it from the values of the other annotations.

@c @sp 1
@c @item @code{--suppress-trace @var{suppress-items,}}
@c @findex --suppress-trace
@c Suppress the named aspects of the execution tracing system.

@sp 1
@item @code{--no-delay-death}
@findex --delay-death
@findex --no-delay-death
When the trace level is @samp{deep}, the compiler normally preserves
the values of variables as long as possible, even beyond the point of
their last use, in order to make them accessible from as many debugger
events as possible. However, it will not do so if the user specifies
@samp{--no-delay-death}. This may be necessary if without it, the stack
frames of some procedures grow too big.

@sp 1
@item @code{--delay-death-max-vars @var{N}}
@findex --delay-death-max-vars
Delay the deaths of variables only when the number of variables in the
procedure is no more than @samp{N}. The default value is 1000.

@sp 1
@item @code{--stack-trace-higher-order}
@findex --stack-trace-higher-order
Enable stack traces through predicates and functions with higher-order
arguments, even if stack tracing is not supported in general.

@c @sp 1
@c @item @code{--force-disable-tracing}
@c @findex --force-disable-tracing
@c Force tracing to be set to trace level none. This overrides all other
@c tracing/grade options. Its main use is to turn off tracing in the
@c browser directory, even for @samp{.debug} and @samp{.decldebug} grades.

@end table

@c @node           Preparing code for ssdb debugging
@c @section        Preparing code for ssdb debugging
@c @cindex         Preparing code for ssdb debugging

@c @table @asis

@c @sp 1
@c @item @code{--ssdb-trace @{none, shallow, deep@}}
@c @findex --ssdb-trace
@c The trace level to use for source to source debugging of the given
@c module.

@c @sp 1
@c @item @code{--force-disable-ssdebug}
@c @findex --force-disable-ssdebug
@c Disable the ssdebug transformation even in @samp{.ssdebug} grades.

@c @end table

@node           Preparing code for mdprof profiling
@section        Preparing code for mdprof profiling
@cindex         Preparing code for mdprof profiling

@table @asis

@sp 1
@item @code{--profile-optimized}
@itemx @code{--profile-optimised}
@findex --profile-optimized
@findex --profile-optimised
Do not disable optimizations that can distort deep profiles.

@end table

@node           Optimization options
@section        Optimization options
@cindex         Optimization options

@menu
* Overall control of optimizations:: 
* Source-to-source optimizations:: 
* Optimizations during code generation:: 
* Optimizations specific to high level code:: 
* Optimizations specific to low level code:: 
@end menu

@node           Overall control of optimizations
@subsection     Overall control of optimizations
@cindex         Overall control of optimizations

@table @asis

@c @sp 1
@c @item @code{--default-opt-level -O<n>}
@c @findex --default-opt-level
@c Set the default optimization level to @var{N}.

@sp 1
@item @code{-O @var{N}}
@itemx @code{--optimization-level @var{N}}
@itemx @code{--optimisation-level @var{N}}
@itemx @code{--opt-level @var{N}}
@findex -O
@findex --optimization-level
@findex --optimisation-level
@findex --opt-level
@cindex Optimization levels
@cindex Compilation speed
@cindex Intermodule optimization
@cindex Cross-mrmodule optimization
Set optimization level to @var{N}. Optimization level -1 means no
optimization while optimization level 6 means full optimization. The
option @samp{--output-optimization-options} lists the optimizations
enabled at each level.

@sp 1
Note that some options are not enabled automatically at @emph{any}
optimization level. These include options that are too new and
experimental for large scale use, and options that generate speedups in
some use cases, but slowdowns in others, require situation-specific
consideration of their use.

@sp 1
Likewise, if you want the compiler to perform intermodule
optimizations, where the compiler exploits information about the
non-public parts of the modules it imports (which it gets from their
@file{.opt} files) for optimization purposes then you must enable that
separately, partially because they affect the compilation process in
ways that require special treatment by @code{mmake}. This goes double
for @emph{transitive} intermodule optimizations, where the compiler
exploits information about the non-public parts of not just the modules
it imports, but also from the modules that @emph{they)} import,
directly or indirectly. (It gets this info from the @file{.trans_opt}
files of the directly or indirectly imported modules.)

@sp 1
@item @code{--optimize-space}
@itemx @code{--optimise-space}
@itemx @code{--opt-space}
@findex --optimize-space
@findex --optimise-space
@findex --opt-space
Turn on optimizations that reduce code size, and turn off optimizations
that significantly increase code size.

@end table

@node           Source-to-source optimizations
@subsection     Source-to-source optimizations
@cindex         Source-to-source optimizations

@table @asis

@sp 1
@item @code{--optimize-dead-procs}
@itemx @code{--optimise-dead-procs}
@findex --optimize-dead-procs
@findex --optimise-dead-procs
Delete all procedures that are never called.

@sp 1
Optimization levels 0 to 6 automatically set --optimize-dead-procs.

@sp 1
@item @code{--unneeded-code}
@findex --unneeded-code
Remove goals from computation paths where their outputs are not needed,
provided the semantics options allow the deletion or movement of the
goal.

@sp 1
@item @code{--unneeded-code-copy-limit @var{copy_limit}}
@findex --unneeded-code-copy-limit
Specify the maximum number of places to which a goal may be copied when
removing it from computation paths on which its outputs are not needed.
A value of zero forbids goal movement and allows only goal deletion; a
value of one prevents any increase in the size of the code.

@sp 1
@item @code{--optimize-unused-args}
@itemx @code{--optimise-unused-args}
@findex --optimize-unused-args
@findex --optimise-unused-args
Delete unused arguments from predicates and functions. This will cause
the compiler to generate more efficient code for many polymorphic
predicates.

@sp 1
Optimization levels 3 to 6 automatically set --optimize-unused-args.

@sp 1
@item @code{--intermod-unused-args}
@findex --intermod-unused-args
Delete unused arguments from predicates and functions even when the
analysis required crosses module boundaries. This option implies
@samp{--optimize-unused-args} and @samp{--intermodule-optimization}.

@sp 1
@item @code{--no-optimize-format-calls}
@findex --optimize-format-calls
@findex --no-optimize-format-calls
Do not optimize calls to @code{string.format}, @code{io.format}, and
@code{stream.string_writer.format} at compile time. The default is to
interpret the format string in such calls at compile time, replacing
those calls with the sequence of more primitive operations required to
implement them.

@sp 1
@item @code{--optimize-constant-propagation}
@itemx @code{--optimise-constant-propagation}
@findex --optimize-constant-propagation
@findex --optimise-constant-propagation
Given calls to some frequently used library functions and predicates,
mainly those that do arithmetic, evaluate them at compile time, if all
their input arguments are constants.

@sp 1
Optimization levels 2 to 6 automatically set
--optimize-constant-propagation.

@sp 1
@item @code{--optimize-duplicate-calls}
@itemx @code{--optimise-duplicate-calls}
@findex --optimize-duplicate-calls
@findex --optimise-duplicate-calls
Given multiple calls to a predicate or function with the same input
arguments, optimize away all but one.

@c @sp 1
@c @item @code{--excess-assign}
@c @findex --excess-assign
@c Remove assignment unifications whose only effect is to give another
@c name to the same value.

@c @sp 1
@c Optimization levels 0 to 6 automatically set --excess-assign.

@c @sp 1
@c @item @code{--no-allow-inlining}
@c @findex --allow-inlining
@c @findex --no-allow-inlining
@c Disallow all forms of inlining.

@sp 1
@item @code{--inlining}
@findex --inlining
@findex --no-inlining
Ask the compiler to inline procedures using its usual heuristics.

@c @sp 1
@c @item @code{--no-inline-builtins}
@c @findex --inline-builtins
@c @findex --no-inline-builtins
@c Normally, the compiler implements builtin operations (such as
@c arithmetic) using inline code. With @samp{--no-inline-builtins}, the
@c compiler will implement them as calls to out-of-line procedures. This
@c latter is done by default when debugging, since this allows the
@c execution of builtins to be traced.

@c @sp 1
@c @item @code{--inline-par-builtins}
@c @findex --inline-par-builtins
@c With @samp{--inline-par-builtins}, the compiler implements the parallel
@c builtin operations using inline code. With
@c @samp{--no-inline-par-builtins}, it implements them as calls.

@sp 1
@item @code{--inline-single-use}
@findex --inline-single-use
Inline procedures which are called only from one call site.

@sp 1
Optimization levels 2 to 6 automatically set --inline-single-use.

@sp 1
@item @code{--inline-simple}
@findex --inline-simple
Inline all simple procedures.

@sp 1
Optimization levels 2 to 6 automatically set --inline-simple.

@sp 1
@item @code{--inline-simple-threshold @var{threshold}}
@findex --inline-simple-threshold
With @samp{--inline-simple}, inline a procedure if its size is less
than the given threshold.

@sp 1
Optimization levels 4 to 6 automatically set
--inline-simple-threshold=8.

@sp 1
@item @code{--intermod-inline-simple-threshold @var{threshold}}
@findex --intermod-inline-simple-threshold
Similar to @samp{--inline-simple-threshold}, except used to determine
which predicates should be included in @file{.opt} files. Note that
changing this between writing the @file{.opt} file and compiling to C
may cause link errors, and too high a value may result in reduced
performance.

@sp 1
@item @code{--inline-compound-threshold @var{threshold}}
@findex --inline-compound-threshold
Inline a procedure if its size (measured roughly in terms of the number
of connectives in its internal form) less the assumed call cost,
multiplied by the number of times it is called, is below the given
threshold.

@sp 1
Optimization levels 2 to 3 automatically set
--inline-compound-threshold=10.

@sp 1
Optimization level 4 automatically sets --inline-compound-threshold=20.

@sp 1
Optimization levels 5 to 6 automatically set
--inline-compound-threshold=100.

@sp 1
@item @code{--inline-call-cost @var{cost}}
@findex --inline-call-cost
Assume that the cost of a call is the given parameter. Used only in
conjunction with @samp{--inline-compound-threshold}.

@sp 1
@item @code{--inline-vars-threshold @var{threshold}}
@findex --inline-vars-threshold
Don't inline a call if it would result in a procedure containing more
than @var{threshold} variables. Procedures containing large numbers of
variables can cause slow compilation.

@sp 1
@item @code{--optimize-higher-order}
@itemx @code{--optimise-higher-order}
@findex --optimize-higher-order
@findex --optimise-higher-order
@cindex Higher-order specialization
@cindex Specialization of higher-order calls
Create specialized variants of higher-order predicates and functions
for call sites where the values of the higher-order arguments are
known.

@sp 1
Optimization levels 3 to 6 automatically set --optimize-higher-order.

@sp 1
@item @code{--type-specialization}
@itemx @code{--type-specialisation}
@findex --type-specialization
@findex --type-specialisation
Enable specialization of polymorphic predicates where the polymorphic
types are known.

@sp 1
@item @code{--user-guided-type-specialization}
@itemx @code{--user-guided-type-specialisation}
@findex --user-guided-type-specialization
@findex --user-guided-type-specialisation
Enable specialization of polymorphic predicates for which there are
@code{:- pragma type_spec} declarations. See the
``Type specialization'' section of the ``Pragmas'' chapter of the
Mercury language Reference Manual for more details.

@sp 1
Optimization levels 2 to 6 automatically set
--user-guided-type-specialization.

@sp 1
@item @code{--higher-order-size-limit @var{max_size}}
@findex --higher-order-size-limit
Set the maximum goal size of specialized versions created by
@samp{--optimize-higher-order} and @samp{--type-specialization}. Goal
size is measured as the number of calls, unifications and branched
goals.

@sp 1
Optimization level 4 automatically sets --higher-order-size-limit=30.

@sp 1
Optimization levels 5 to 6 automatically set
--higher-order-size-limit=40.

@sp 1
@item @code{--higher-order-arg-limit @var{max_size}}
@findex --higher-order-arg-limit
Set the maximum size of higher-order arguments to be specialized by
@samp{--optimize-higher-order} and @samp{--type-specialization}.

@sp 1
@item @code{--loop-invariants}
@findex --loop-invariants
Hoist loop invariant computations out of loops.

@sp 1
Optimization levels 5 to 6 automatically set --loop-invariants.

@sp 1
@item @code{--introduce-accumulators}
@findex --introduce-accumulators
Attempt to make procedures tail recursive by introducing accumulator
variables into them.

@sp 1
@item @code{--optimize-constructor-last-call}
@itemx @code{--optimise-constructor-last-call}
@findex --optimize-constructor-last-call
@findex --optimise-constructor-last-call
Enable the optimization of almost-last calls that are followed only by
constructor application.

@c @sp 1
@c @item @code{--optimize-constructor-last-call-accumulator}
@c @itemx @code{--optimise-constructor-last-call-accumulator}
@c @findex --optimize-constructor-last-call-accumulator
@c @findex --optimise-constructor-last-call-accumulator
@c Enable the optimization via accumulators of almost-last calls that are
@c followed only by constructor application.

@c @sp 1
@c @item @code{--optimize-constructor-last-call-null}
@c @itemx @code{--optimise-constructor-last-call-null}
@c @findex --optimize-constructor-last-call-null
@c @findex --optimise-constructor-last-call-null
@c When @samp{--optimize-constructor-last-call} is enabled, put NULL in
@c uninitialized fields to prevent the garbage collector from looking at
@c and following a random bit pattern.

@sp 1
@item @code{--no-split-switch-arms}
@findex --split-switch-arms
@findex --no-split-switch-arms
When a switch on a variable has an inner switch on that same variable
inside one of its arms, the default is to split up that arm of the
outer switch along the same lines, effectively inlining the inner
switch. @samp{--no-split-switch-arms} prevents this split.

@sp 1
Optimization levels 2 to 6 automatically set --split-switch-arms.

@c @sp 1
@c @item @code{--merge-code-after-switch}
@c @findex --merge-code-after-switch
@c Merge the goal after a switch into the switch, if we can. Two cases in
@c which we can are when that goal just tests the value of a variable set
@c in the switch, and when that goal is a switch on the same variable.

@c @sp 1
@c Optimization levels 2 to 6 automatically set --merge-code-after-switch.

@c @sp 1
@c @item @code{--from-ground-term-threshold @var{N}}
@c @findex --from-ground-term-threshold
@c Wrap a from_ground_term scope around the expanded, superhomogeneous
@c form of a ground term that involves at least. the given number of
@c function symbols.

@sp 1
@item @code{--no-const-struct}
@findex --const-struct
@findex --no-const-struct
By default, the compiler will gather constant ground structures in a
separate table, with each such structure being stored in this table
just once, even if it occurs in many different procedures.
@samp{--no-const-struct} prevents this behavior.

@sp 1
@item @code{--common-struct}
@findex --common-struct
Replace two or more occurrences of the same term in a conjunction with
just one copy.

@sp 1
Optimization levels 2 to 6 automatically set --common-struct.

@sp 1
@item @code{--optimize-saved-vars}
@itemx @code{--optimise-saved-vars}
@findex --optimize-saved-vars
@findex --no-optimize-saved-vars
@findex --optimise-saved-vars
@findex --no-optimise-saved-vars
Minimize the number of variables saved across calls.

@c @sp 1
@c @item @code{--optimize-saved-vars-const}
@c @itemx @code{--optimise-saved-vars-const}
@c @findex --optimize-saved-vars-const
@c @findex --optimise-saved-vars-const
@c Minimize the number of variables saved across calls by introducing
@c duplicate copies of variables bound to constants in each interval
@c between flushes where they are needed.

@c @sp 1
@c Optimization levels 3 to 6 automatically set
@c --optimize-saved-vars-const.

@c @sp 1
@c @item @code{--optimize-saved-vars-cell}
@c @itemx @code{--optimise-saved-vars-cell}
@c @findex --optimize-saved-vars-cell
@c @findex --optimise-saved-vars-cell
@c Minimize the number of variables saved across calls by trying to use
@c saved variables pointing to cells to reach the variables stored in
@c those cells.

@c @sp 1
@c @item @code{--no-osv-loop}
@c @findex --osv-loop
@c @findex --no-osv-loop
@c There is no help text available.

@c @sp 1
@c @item @code{--no-osv-full-path}
@c @findex --osv-full-path
@c @findex --no-osv-full-path
@c There is no help text available.

@c @sp 1
@c @item @code{--no-osv-on-stack}
@c @findex --osv-on-stack
@c @findex --no-osv-on-stack
@c There is no help text available.

@c @sp 1
@c @item @code{--no-osv-cand-head}
@c @findex --osv-cand-head
@c @findex --no-osv-cand-head
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-cvstore-cost @var{cost}}
@c @findex --osv-cvstore-cost
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-cvload-cost @var{cost}}
@c @findex --osv-cvload-cost
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-fvstore-cost @var{cost}}
@c @findex --osv-fvstore-cost
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-fvload-cost @var{cost}}
@c @findex --osv-fvload-cost
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-op-ratio @var{percentage}}
@c @findex --osv-op-ratio
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-node-ratio @var{percentage}}
@c @findex --osv-node-ratio
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-allpath-node-ratio @var{percentage}}
@c @findex --osv-allpath-node-ratio
@c There is no help text available.

@c @sp 1
@c @item @code{--osv-all-cand}
@c @findex --osv-all-cand
@c There is no help text available.

@sp 1
@item @code{--constraint-propagation}
@findex --constraint-propagation
Perform the constraint propagation transformation, which attempts to
ensure that goals which can fail are executed as early as possible.

@sp 1
Optimization levels 3 to 6 automatically set --constraint-propagation.

@sp 1
@item @code{--local-constraint-propagation}
@findex --local-constraint-propagation
Perform the constraint propagation transformation, but only rearrange
goals within each procedure. Specialized versions of procedures will
not be created.

@sp 1
Optimization levels 3 to 6 automatically set
--local-constraint-propagation.

@sp 1
@item @code{--deforestation}
@findex --deforestation
Perform deforestation, which is a program transformation whose aims are
to avoid the construction of intermediate data structures, and to avoid
repeated traversals over data structures within a conjunction.

@sp 1
Optimization levels 3 to 6 automatically set --deforestation.

@sp 1
@item @code{--deforestation-depth-limit @var{depth_limit}}
@findex --deforestation-depth-limit
Specify a depth limit to prevent infinite loops in the deforestation
algorithm. A value of -1 specifies no depth limit. The default is 4.

@c @sp 1
@c @item @code{--deforestation-cost-factor @var{fudge-factor}}
@c @findex --deforestation-cost-factor
@c There is no help text available.

@sp 1
@item @code{--deforestation-vars-threshold @var{threshold}}
@findex --deforestation-vars-threshold
Specify a rough limit on the number of variables in a procedure created
by deforestation. A value of -1 specifies no limit. The default is 200.

@sp 1
@item @code{--deforestation-size-threshold @var{threshold}}
@findex --deforestation-size-threshold
Specify a rough limit on the size of a goal to be optimized by
deforestation. A value of -1 specifies no limit. The default is 15.

@c @sp 1
@c @item @code{--untuple}
@c @findex --untuple
@c Expand out procedure arguments when the argument type is either a
@c tuple, or a type with exactly one functor. This increases the cost of
@c parameter passing, but reduces the cost of access to the individual
@c fields of the tuple or functor. Which effect is greater will depend
@c greatly on the relative frequency with which execution takes different
@c program paths, which means that this transformation can cause slowdowns
@c as well as speedups. This means that detailed profiling data is crucial
@c for the proper use of this option.

@c @sp 1
@c @item @code{--tuple}
@c @findex --tuple
@c Try to find opportunities for procedures to pass some arguments to each
@c other as a tuple rather than separately. This reduces the cost of
@c parameter passing, but increases the cost of access to each of the old
@c arguments. Which effect is greater will depend greatly on the relative
@c frequency with which execution takes different program paths, which
@c means that this transformation can cause slowdowns as well as speedups.
@c This means that detailed profiling data is crucial for the proper use
@c of this option.

@c @sp 1
@c @item @code{--tuple-trace-counts-file @var{filename}}
@c @findex --tuple-trace-counts-file
@c This option tells the compiler that the profiling data needed for the
@c untupling and tupling transformations is available in the named trace
@c counts summary file. The summary should be made from a sample run of
@c the program you are compiling, compiled without optimizations.

@c @sp 1
@c @item @code{--tuple-costs-ratio @var{ratio}}
@c @findex --tuple-costs-ratio
@c A value of 110 for this parameter means the tupling transformation will
@c transform a procedure if it thinks that procedure would be 10% worse,
@c on average, than whatever transformed version of the procedure it has
@c in mind. The default is 100.

@c @sp 1
@c @item @code{--tuple-min-args @var{min-num-args}}
@c @findex --tuple-min-args
@c The minimum number of input arguments that the tupling transformation
@c will consider passing together as a tuple. This is mostly to speed up
@c the compilation process by not pursuing (presumably) unfruitful
@c searches.

@sp 1
@item @code{--delay-constructs}
@itemx @code{--delay-construct}
@findex --delay-constructs
@findex --delay-construct
Reorder goals to move construction unifications after primitive goals
that can fail.

@sp 1
Optimization levels 5 to 6 automatically set --delay-constructs.

@c @sp 1
@c @item @code{--follow-code}
@c @findex --follow-code
@c Move the code following a branched goal (if-then-else, disjunction, or
@c switch) until the next call into each branch of that goal. Having a
@c call as the goal just after the branched goal gives the LLDS code
@c generator a consistent set of places into which each branch should
@c store live variables.

@c @sp 1
@c Optimization levels 2 to 6 automatically set --follow-code.

@c @sp 1
@c @item @code{--always-specialize-in-dep-par-conjs}
@c @findex --always-specialize-in-dep-par-conjs
@c When the transformation for handling dependent parallel conjunctions
@c adds waits and/or signals around a call, create a specialized version
@c of the called procedure, even if this is not profitable.

@c @sp 1
@c @item @code{--no-allow-some-paths-only-waits}
@c @findex --allow-some-paths-only-waits
@c @findex --no-allow-some-paths-only-waits
@c There is no help text available.

@c @sp 1
@c @item @code{--region-analysis}
@c @findex --region-analysis
@c Enable the analysis for region-based memory management.

@sp 1
@item @code{--no-generate-trail-ops-inline}
@findex --generate-trail-ops-inline
@findex --no-generate-trail-ops-inline
Normally, the compiler generates inline code for trailing operations.
With @samp{--no-generate-trail-ops-inline}, the compiler will implement
them using calls to those operations in the standard library.

@end table

@c @node           Experimental source-to-source optimizations
@c @subsection     Experimental source-to-source optimizations
@c @cindex         Experimental source-to-source optimizations

@c @table @asis

@c @sp 1
@c @item @code{--structure-sharing}
@c @findex --structure-sharing
@c Perform structure sharing analysis.

@c @sp 1
@c @item @code{--structure-sharing-widening @var{N}}
@c @findex --structure-sharing-widening
@c Perform widening when the set of structure sharing pairs becomes larger
@c than @var{N}. When n=0, widening is not enabled. (default: 0).

@c @sp 1
@c @item @code{--structure-reuse}
@c @itemx @code{--ctgc}
@c @findex --structure-reuse
@c @findex --ctgc
@c Perform structure reuse analysis (Compile Time Garbage Collection).

@c @sp 1
@c @item @code{--structure-reuse-constraint @{same_cons_id, within_n_cells_difference@}}
@c @itemx @code{--ctgc-constraint @{same_cons_id, within_n_cells_difference@}}
@c @findex --structure-reuse-constraint
@c @findex --ctgc-constraint
@c Constraint on the way we allow structure reuse. @samp{same_cons_id}
@c specifies that reuse is only allowed between terms of the same type and
@c constructor. @samp{within_n_cells_difference} states that reuse is
@c allowed as long as the arities between the reused term and new term
@c does not exceed a certain threshold. The threshold needs to be set
@c using @samp{--structure-reuse-constraint-arg}. (The default is
@c @samp{within_n_cells_difference} with the threshold being 0.)

@c @sp 1
@c @item @code{--structure-reuse-constraint-arg @var{max_difference}}
@c @itemx @code{--ctgc-constraint-arg @var{max_difference}}
@c @findex --structure-reuse-constraint-arg
@c @findex --ctgc-constraint-arg
@c Specify the maximum difference in arities between the terms whose
@c memory cells can be reused on the one hand, and the terms that need
@c memory cells on the other hand. (default: 0)

@c @sp 1
@c @item @code{--structure-reuse-max-conditions @var{max_num_conditions}}
@c @findex --structure-reuse-max-conditions
@c Soft limit on the number of reuse conditions to accumulate for a
@c procedure. (default: 10)

@c @sp 1
@c @item @code{--structure-reuse-repeat @var{num_repeats}}
@c @findex --structure-reuse-repeat
@c There is no help text available.

@c @sp 1
@c @item @code{--structure-reuse-free-cells}
@c @findex --structure-reuse-free-cells
@c Immediately free cells which are known to be dead but which cannot be
@c reused.

@c @end table

@node           Optimizations during code generation
@subsection     Optimizations during code generation
@cindex         Optimizations during code generation

@table @asis

@sp 1
@item @code{--smart-indexing}
@findex --smart-indexing
Implement switches using the fastest applicable implementation method,
which may be e.g. binary search or a hash table. With
@samp{--no-smart-indexing}, the default is to implement switches as
simple if-then-else chains.

@sp 1
Optimization levels 0 to 6 automatically set --smart-indexing.

@c @sp 1
@c @item @code{--smart-atomic-indexing}
@c @findex --smart-atomic-indexing
@c Generate smart switches on atomic types when appropriate.

@c @sp 1
@c Optimization levels 0 to 6 automatically set --smart-atomic-indexing.

@c @sp 1
@c @item @code{--smart-string-indexing}
@c @findex --smart-string-indexing
@c Generate smart switches on strings when appropriate.

@c @sp 1
@c Optimization levels 0 to 6 automatically set --smart-string-indexing.

@c @sp 1
@c @item @code{--smart-tag-indexing}
@c @findex --smart-tag-indexing
@c Generate smart switches on discriminated union types when appropriate.

@c @sp 1
@c Optimization levels 0 to 6 automatically set --smart-tag-indexing.

@c @sp 1
@c @item @code{--smart-float-indexing}
@c @findex --smart-float-indexing
@c Generate smart switches on floats when appropriate.

@c @sp 1
@c Optimization levels 0 to 6 automatically set --smart-float-indexing.

@sp 1
@item @code{--dense-switch-req-density @var{percentage}}
@findex --dense-switch-req-density
The jump table generated for an atomic switch must have at least this
percentage of full slots (default: 25).

@sp 1
@item @code{--lookup-switch-req-density @var{percentage}}
@findex --lookup-switch-req-density
The jump table generated for an atomic switch in which all the outputs
are constant terms must have at least this percentage of full slots
(default: 25).

@sp 1
@item @code{--dense-switch-size @var{N}}
@findex --dense-switch-size
The jump table generated for an atomic switch must have at least this
many entries (default: 4).

@sp 1
@item @code{--lookup-switch-size @var{N}}
@findex --lookup-switch-size
The lookup table generated for an atomic switch must have at least this
many entries (default: 4).

@sp 1
@item @code{--string-trie-switch-size @var{N}}
@itemx @code{--string-trie-size @var{N}}
@findex --string-trie-switch-size
@findex --string-trie-size
The trie generated for a string switch must have at least this many
entries (default: 16).

@sp 1
@item @code{--string-hash-switch-size @var{N}}
@itemx @code{--string-switch-size @var{N}}
@findex --string-hash-switch-size
@findex --string-switch-size
The hash table generated for a string switch must have at least this
many entries (default: 8).

@sp 1
@item @code{--string-binary-switch-size @var{N}}
@findex --string-binary-switch-size
The binary search table generated for a string switch must have at
least this many entries (default: 4).

@sp 1
@item @code{--tag-switch-size @var{N}}
@findex --tag-switch-size
The number of alternatives in a tag switch must be at least this number
(default: 3).

@c @sp 1
@c @item @code{--switch-single-rec-base-first}
@c @findex --switch-single-rec-base-first
@c In a switch with two arms, one a base case and one with a single
@c recursive call, put the base case first.

@c @sp 1
@c @item @code{--no-switch-multi-rec-base-first}
@c @findex --switch-multi-rec-base-first
@c @findex --no-switch-multi-rec-base-first
@c In a switch with two arms, one a base case and one with multiple
@c recursive calls, do not put the base case first.

@sp 1
@item @code{--static-ground-terms}
@findex --static-ground-terms
Enable the optimization of constructing constant ground terms at
compile time and storing them as static constants. Note that auxiliary
data structures created by the compiler for purposes such as debugging
will always be created as static constants.

@sp 1
Optimization levels 0 to 6 automatically set --static-ground-terms.

@sp 1
@item @code{--use-atomic-cells}
@findex --use-atomic-cells
Use the atomic variants of the Boehm gc allocator calls when the memory
cell to be allocated cannot contain pointers.

@c @sp 1
@c @item @code{--optimize-trail-usage}
@c @findex --optimize-trail-usage
@c Try to restrict trailing operations to those parts of the program that
@c actually use the trail.

@end table

@node           Optimizations specific to high level code
@subsection     Optimizations specific to high level code
@cindex         Optimizations specific to high level code

@table @asis

@sp 1
@item @code{--mlds-optimize}
@itemx @code{--mlds-optimise}
@findex --mlds-optimize
@findex --mlds-optimise
Enable the MLDS->MLDS optimization passes.

@sp 1
Optimization levels 0 to 6 automatically set --mlds-optimize.

@sp 1
@item @code{--mlds-peephole}
@findex --mlds-peephole
Perform peephole optimization of the MLDS.

@sp 1
Optimization levels 0 to 6 automatically set --mlds-peephole.

@sp 1
@item @code{--optimize-tailcalls}
@itemx @code{--optimise-tailcalls}
@findex --optimize-tailcalls
@findex --optimise-tailcalls
Turn self-tailcalls into loops.

@sp 1
Optimization levels 1 to 6 automatically set --optimize-tailcalls.

@sp 1
@item @code{--optimize-initializations}
@itemx @code{--optimise-initializations}
@findex --optimize-initializations
@findex --optimise-initializations
Whenever possible, convert the first assignment to each local variable
in the target code into an initializer on its declaration. Some target
language compilers can generate faster code that way.

@sp 1
Optimization levels 2 to 6 automatically set
--optimize-initializations.

@c @sp 1
@c @item @code{--no-eliminate-unused-mlds-assigns}
@c @findex --eliminate-unused-mlds-assigns
@c @findex --no-eliminate-unused-mlds-assigns
@c Eliminate assignments to dead variables in the MLDS.

@sp 1
@item @code{--eliminate-local-variables}
@itemx @code{--eliminate-local-vars}
@findex --eliminate-local-variables
@findex --eliminate-local-vars
Eliminate local variables with known values, where possible, by
replacing occurrences of such variables with their values.

@sp 1
Optimization levels 5 to 6 automatically set
--eliminate-local-variables.

@end table

@node           Optimizations specific to low level code
@subsection     Optimizations specific to low level code
@cindex         Optimizations specific to low level code

@table @asis

@sp 1
@item @code{--try-switch-size @var{N}}
@findex --try-switch-size
The number of alternatives in a try/retry chain switch must be at least
this number (default: 3).

@sp 1
@item @code{--binary-switch-size @var{N}}
@findex --binary-switch-size
The number of alternatives in a binary search switch must be at least
this number (default: 4).

@sp 1
@item @code{--middle-rec}
@findex --middle-rec
Enable the middle recursion optimization.

@sp 1
Optimization levels 1 to 6 automatically set --middle-rec.

@sp 1
@item @code{--simple-neg}
@findex --simple-neg
Generate simplified code for simple negations.

@sp 1
Optimization levels 2 to 6 automatically set --simple-neg.

@c @sp 1
@c @item @code{--no-allow-hijacks}
@c @findex --allow-hijacks
@c @findex --no-allow-hijacks
@c When appropriate, the compiler normally generates code that temporarily
@c hijacks an existing nondet stack frame that probably belongs to another
@c procedure invocation. @samp{--no-allow-hijacks} tells the compiler to
@c create a new nondet stack frame instead.

@sp 1
@item @code{--llds-optimize}
@itemx @code{--llds-optimise}
@findex --llds-optimize
@findex --llds-optimise
Enable the LLDs->LLDS optimization passes.

@sp 1
Optimization levels 0 to 6 automatically set --llds-optimize.

@sp 1
@item @code{--optimize-repeat @var{N}}
@itemx @code{--optimise-repeat @var{N}}
@findex --optimize-repeat
@findex --optimise-repeat
Iterate most LLDS->LLDS optimizations at most @var{N} times (default:
3).

@sp 1
Optimization levels 0 to 1 automatically set --optimize-repeat=1.

@sp 1
Optimization level 2 automatically sets --optimize-repeat=3.

@sp 1
Optimization levels 3 to 4 automatically set --optimize-repeat=4.

@sp 1
Optimization levels 5 to 6 automatically set --optimize-repeat=5.

@sp 1
@item @code{--optimize-peep}
@itemx @code{--optimise-peep}
@findex --optimize-peep
@findex --optimise-peep
Enable local peephole optimizations.

@sp 1
Optimization levels 0 to 6 automatically set --optimize-peep.

@c @sp 1
@c @item @code{--optimize-peep-mkword}
@c @itemx @code{--optimise-peep-mkword}
@c @findex --optimize-peep-mkword
@c @findex --optimise-peep-mkword
@c Enable peephole optimizations of words created by mkword.

@c @sp 1
@c Optimization levels 0 to 6 automatically set --optimize-peep-mkword.

@sp 1
@item @code{--optimize-labels}
@itemx @code{--optimise-labels}
@findex --optimize-labels
@findex --optimise-labels
Delete dead labels, and the unreachable code following them.

@sp 1
Optimization levels 0 to 6 automatically set --optimize-labels.

@c @sp 1
@c @item @code{--standardize-labels}
@c @itemx @code{--standardise-labels}
@c @findex --standardize-labels
@c @findex --standardise-labels
@c Standardize internal labels in the generated code.

@sp 1
@item @code{--optimize-jumps}
@itemx @code{--optimise-jumps}
@findex --optimize-jumps
@findex --optimise-jumps
Enable the short-circuiting of jumps to jumps.

@sp 1
Optimization levels 0 to 6 automatically set --optimize-jumps.

@sp 1
@item @code{--optimize-fulljumps}
@itemx @code{--optimise-fulljumps}
@findex --optimize-fulljumps
@findex --optimise-fulljumps
Enable the elimination of jumps to ordinary code.

@sp 1
Optimization levels 2 to 6 automatically set --optimize-fulljumps.

@sp 1
@item @code{--checked-nondet-tailcalls}
@findex --checked-nondet-tailcalls
Convert nondet calls into tail calls whenever possible, even when this
requires a runtime check. This option tries to minimize stack
consumption, possibly at the expense of speed.

@sp 1
@item @code{--pessimize-tailcalls}
@findex --pessimize-tailcalls
Disable the optimization of tailcalls. This option tries to minimize
code size at the expense of speed.

@sp 1
@item @code{--optimize-delay-slot}
@itemx @code{--optimise-delay-slot}
@findex --optimize-delay-slot
@findex --optimise-delay-slot
Disable branch delay slot optimizations, This option is meaningful only
if the target architecture has delay slots.

@sp 1
Optimization levels 1 to 6 automatically set --optimize-delay-slot.

@sp 1
@item @code{--optimize-frames}
@itemx @code{--optimise-frames}
@findex --optimize-frames
@findex --optimise-frames
Optimize the operations that maintain stack frames.

@sp 1
Optimization levels 1 to 6 automatically set --optimize-frames.

@sp 1
@item @code{--optimize-reassign}
@itemx @code{--optimise-reassign}
@findex --optimize-reassign
@findex --optimise-reassign
Optimize away assignments to memory locations that already hold the
to-be-assigned value.

@sp 1
Optimization levels 3 to 6 automatically set --optimize-reassign.

@sp 1
@item @code{--use-local-vars}
@findex --use-local-vars
Use local variables in C code blocks wherever possible.

@sp 1
Optimization levels 1 to 6 automatically set --use-local-vars.

@c @sp 1
@c @item @code{--local-var-access-threshold @var{XXX document me}}
@c @findex --local-var-access-threshold
@c There is no help text available.

@sp 1
@item @code{--optimize-dups}
@itemx @code{--optimise-dups}
@findex --optimize-dups
@findex --optimise-dups
Enable elimination of duplicate code within procedures.

@sp 1
Optimization levels 2 to 6 automatically set --optimize-dups.

@sp 1
@item @code{--optimize-proc-dups}
@itemx @code{--optimise-proc-dups}
@findex --optimize-proc-dups
@findex --optimise-proc-dups
Enable elimination of duplicate procedures.

@sp 1
@item @code{--common-data}
@findex --common-data
Enable optimization of common data structures.

@sp 1
Optimization levels 0 to 6 automatically set --common-data.

@sp 1
@item @code{--no-common-layout-data}
@findex --common-layout-data
@findex --no-common-layout-data
Disable optimization of common subsequences in layout structures.

@sp 1
@item @code{--layout-compression-limit @var{N}}
@findex --layout-compression-limit
Attempt to compress the layout structures used by the debugger only as
long as the arrays involved have at most @var{N} elements (default:
4000).

@c @sp 1
@c @item @code{--optimize-region-ops}
@c @findex --optimize-region-ops
@c Try and restrict region operations to those parts of the program that
@c actually use regions.

@sp 1
@item @code{--emit-c-loops}
@findex --emit-c-loops
Use C loop contstructs to implement loops. With
@samp{--no-emit-c-loops}, use only gotos.

@sp 1
Optimization levels 1 to 6 automatically set --emit-c-loops.

@sp 1
@item @code{--procs-per-c-function @var{N}}
@itemx @code{--procs-per-C-function @var{N}}
@findex --procs-per-c-function
@findex --procs-per-C-function
Put the code for up to @var{N} Mercury procedures in a single C
function. The default value of @var{N} is one. Increasing @var{N} can
produce slightly more efficient code, but makes compilation slower.

@sp 1
@item @code{--no-local-thread-engine-base}
@findex --local-thread-engine-base
@findex --no-local-thread-engine-base
Do not copy the thread-local Mercury engine base address into a local
variable, even when this would be appropriate. This option is effective
only in low-level parallel grades that do not use the GNU C global
register variables extension.

@sp 1
@item @code{--inline-alloc}
@findex --inline-alloc
Inline calls to @code{GC_malloc()}. This can improve performance a fair
bit, but may significantly increase code size. This option is
meaningful only if the selected garbage collector is boehm, and if the
C compiler is gcc.

@sp 1
Optimization level 6 automatically sets --inline-alloc.

@sp 1
@item @code{--use-macro-for-redo-fail}
@findex --use-macro-for-redo-fail
Emit the fail or redo macro instead of a branch to the fail or redo
code in the runtime system. This produces slightly bigger but slightly
faster code.

@sp 1
Optimization level 6 automatically sets --use-macro-for-redo-fail.

@end table

@node           Intermodule optimization
@section        Intermodule optimization
@cindex         Intermodule optimization

@menu
* Non-transitive intermodule optimization:: 
* Transitive intermodule optimization:: 
@end menu

@node           Non-transitive intermodule optimization
@subsection     Non-transitive intermodule optimization
@cindex         Non-transitive intermodule optimization

@table @asis

@sp 1
@item @code{--intermodule-optimization}
@itemx @code{--intermodule-optimisation}
@itemx @code{--intermod-opt}
@findex --intermodule-optimization
@findex --intermodule-optimisation
@findex --intermod-opt
Perform inlining, higher-order specialization, and other optimizations
using knowledge of the otherwise non-public data of directly imported
modules. The compiler gets this data from the @file{@var{module}.opt}
files of the directly imported modules.

@sp 1
This option must be set consistently throughout the compilation
process, starting with @code{mmc --generate-dependencies}.

@sp 1
@item @code{--use-opt-files}
@findex --use-opt-files
Perform inter-module optimization using any @file{.opt} files which are
already built, e.g. those for the standard library, but do not build
any others.

@sp 1
@item @code{--no-read-opt-files-transitively}
@findex --read-opt-files-transitively
@findex --no-read-opt-files-transitively
Only read the inter-module optimization information for directly
imported modules, not the transitive closure of the imports.

@end table

@node           Transitive intermodule optimization
@subsection     Transitive intermodule optimization
@cindex         Transitive intermodule optimization

@table @asis

@sp 1
@item @code{--transitive-intermodule-optimization}
@itemx @code{--transitive-intermodule-optimisation}
@itemx @code{--trans-intermod-opt}
@findex --transitive-intermodule-optimization
@findex --transitive-intermodule-optimisation
@findex --trans-intermod-opt
Perform inlining, higher-order specialization, and other optimizations
using knowledge of the otherwise non-public data of both directly and
indirectly imported modules. The compiler gets this data from the
@file{@var{module}.trans_opt} files of the directly and indirectly
imported modules.

@sp 1
This option must be set consistently throughout the compilation
process, starting with @code{mmc --generate-dependencies}.

@sp 1
Note that @samp{--transitive-intermodule-optimization} works only with
@code{mmake}; it does not work with @code{mmc --make}.

@sp 1
@item @code{--use-trans-opt-files}
@findex --use-trans-opt-files
Perform inter-module optimization using any @file{.trans_opt} files
which are already built, e.g. those for the standard library, but do
not build any others.

@sp 1
@item @code{--generate-module-order}
@findex --generate-module-order
Output the strongly connected components of the module dependency graph
in top-down order to @file{@var{module}.order}. Effective only if
@samp{--generate-dependencies} is also specified.

@c @sp 1
@c @item @code{--trans-opt-deps-spec @var{filename}}
@c @itemx --no-trans-opt-deps-spec
@c @findex --trans-opt-deps-spec
@c @findex --no-trans-opt-deps-spec
@c Specify a file to remove edges from the trans-opt dependency graph.

@end table

@c @node           Intermodule optimization to a fixpoint
@c @subsection     Intermodule optimization to a fixpoint
@c @cindex         Intermodule optimization to a fixpoint

@c @table @asis

@c @sp 1
@c @item @code{--intermodule-analysis}
@c @findex --intermodule-analysis
@c Perform analyses such as termination analysis and unused argument
@c elimination across module boundaries. This option is not yet fully
@c implemented.

@c @sp 1
@c @item @code{--analysis-repeat @var{N}}
@c @findex --analysis-repeat
@c Specify the maximum number of times to repeat analyses of suboptimal
@c modules with @samp{--intermodule-analysis} (default: 0). (This option
@c works only with @code{mmc --make}.)

@c @sp 1
@c @item @code{--analysis-file-cache}
@c @findex --analysis-file-cache
@c Enable caching of parsed analysis files. This may improve compile times
@c with @samp{--intermodule-analysis}.

@c @sp 1
@c @item @code{--analysis-file-cache-dir @var{directory}}
@c @findex --analysis-file-cache-dir
@c There is no help text available.

@c @end table

@node           Program analyses
@section        Program analyses
@cindex         Program analyses

@menu
* The termination analyser based on linear inequality constraints:: 
* Other program analyses:: 
@end menu

@node           The termination analyser based on linear inequality constraints
@subsection     The termination analyser based on linear inequality constraints
@cindex         The termination analyser based on linear inequality constraints

@table @asis

@sp 1
@item @code{--enable-termination}
@itemx @code{--enable-term}
@findex --enable-termination
@findex --enable-term
Enable termination analysis, which analyses each mode of each predicate
or function to see whether it terminates. The @code{terminates},
@code{does_not_terminate}, and @code{check_termination} pragmas have an
effect only when termination analysis is enabled.

@sp 1
Note that both @samp{--intermodule-optimization} and
@samp{--transitive-intermodule-optimization} greatly improve the
accuracy of the analysis.

@sp 1
@item @code{--check-termination}
@itemx @code{--check-term}
@itemx @code{--chk-term}
@findex --check-termination
@findex --check-term
@findex --chk-term
Enable termination analysis, and emit warnings for some predicates or
functions that cannot be proved to terminate.

@sp 1
In many cases where the compiler is unable to prove termination, the
problem is either a lack of information about the termination
properties of other predicates, or the use of language constructs (such
as higher order calls) which are beyond the capabilities of the
analyser. In these cases, the compiler does not emit a warning of
non-termination, as it is likely to be spurious.

@sp 1
@item @code{--verbose-check-termination}
@itemx @code{--verb-check-term}
@itemx @code{--verb-chk-term}
@findex --verbose-check-termination
@findex --verb-check-term
@findex --verb-chk-term
Enable termination analysis, and emit warnings for all predicates or
functions that cannot be proved to terminate.

@sp 1
@item @code{--termination-single-argument-analysis @var{N}}
@itemx @code{--term-single-arg @var{N}}
@findex --termination-single-argument-analysis
@findex --term-single-arg
When performing termination analysis, try analyzing recursion on single
arguments in strongly connected components of the call graph that have
up to the given number of procedures. Setting this limit to zero
disables single argument analysis.

@sp 1
@item @code{--termination-norm @{simple, total, num-data-elems@}}
@itemx @code{--term-norm @{simple, total, num-data-elems@}}
@findex --termination-norm
@findex --term-norm
The norm defines how termination analysis measures the size of a memory
cell. The @samp{simple} norm says that size is always one. The
@samp{total} norm says that it is the number of words in the cell. The
@samp{num-data-elems} norm says that it is the number of words in the
cell that contain something other than pointers to cells of the same
type.

@sp 1
@item @code{--termination-error-limit @var{N}}
@itemx @code{--term-err-limit @var{N}}
@findex --termination-error-limit
@findex --term-err-limit
Print at most this number of reasons for any single termination error
(default: 3).

@sp 1
@item @code{--termination-path-limit @var{N}}
@itemx @code{--term-path-limit @var{N}}
@findex --termination-path-limit
@findex --term-path-limit
Perform termination analysis only on predicates with at most this many
paths (default: 256).

@end table

@c @node           The termination analyser based on convex constraints
@c @subsection     The termination analyser based on convex constraints
@c @cindex         The termination analyser based on convex constraints

@c @table @asis

@c @sp 1
@c @item @code{--enable-termination2}
@c @itemx @code{--enable-term2}
@c @findex --enable-termination2
@c @findex --enable-term2
@c Analyse each predicate to discover if it terminates. This uses an
@c alternative termination analysis based on convex constraints.

@c @sp 1
@c @item @code{--check-termination2}
@c @itemx @code{--check-term2}
@c @itemx @code{--chk-term2}
@c @findex --check-termination2
@c @findex --check-term2
@c @findex --chk-term2
@c Enable the alternative termination analysis, and emit warnings for some
@c predicates or functions that cannot be proven to terminate. In many
@c cases where the compiler is unable to prove termination, the problem is
@c either a lack of information about the termination properties of other
@c predicates, or because language constructs (such as higher order calls)
@c were used which could not be analysed. In these cases, the compiler
@c does not emit a warning of non-termination, as it is likely to be
@c spurious.

@c @sp 1
@c @item @code{--verbose-check-termination2}
@c @itemx @code{--verb-check-term2}
@c @itemx @code{--verb-chk-term2}
@c @findex --verbose-check-termination2
@c @findex --verb-check-term2
@c @findex --verb-chk-term2
@c Report more verbose errors from the alternative termination analysis
@c algorithm

@c @sp 1
@c @item @code{--termination2-norm @{simple, total, num-data-elems@}}
@c @itemx @code{--term2-norm @{simple, total, num-data-elems@}}
@c @findex --termination2-norm
@c @findex --term2-norm
@c Tell the alternative termination analyser which norm to use. See the
@c description of the @samp{--termination-norm} option for a description
@c of the different norms available.

@c @sp 1
@c @item @code{--termination2-widening-limit @var{N}}
@c @itemx @code{--term2-widening-limit @var{N}}
@c @findex --termination2-widening-limit
@c @findex --term2-widening-limit
@c Set the threshold for the number of iterations after which the argument
@c size analyser invokes widening.

@c @sp 1
@c @item @code{--term2-argument-size-analysis-only}
@c @itemx @code{--term2-arg-size-analysis-only}
@c @itemx @code{--arg-size-analysis-only}
@c @findex --term2-argument-size-analysis-only
@c @findex --term2-arg-size-analysis-only
@c @findex --arg-size-analysis-only
@c Perform argument size analysis on each SCC, but do not attempt to infer
@c termination,

@c @sp 1
@c @item @code{--no-termination2-propagate-failure-constraints}
@c @itemx @code{--no-term2-propagate-failure-constraints}
@c @itemx @code{--no-term2-propagate-failure-constrs}
@c @findex --termination2-propagate-failure-constraints
@c @findex --no-termination2-propagate-failure-constraints
@c @findex --term2-propagate-failure-constraints
@c @findex --no-term2-propagate-failure-constraints
@c @findex --term2-propagate-failure-constrs
@c @findex --no-term2-propagate-failure-constrs
@c Make the argument analyser infer information about the sizes of any
@c inputs to a goal in contexts where that goal fails.

@c @sp 1
@c @item @code{--termination2-maximum-matrix-size @var{N}}
@c @itemx @code{--term2-max-matrix-size @var{N}}
@c @findex --termination2-maximum-matrix-size
@c @findex --term2-max-matrix-size
@c Limit the sizes of constraints systems in the analyser to the given
@c number of constraints. Use approximations of some constraint
@c operations, such as projection, if this threshold is exceeded. This
@c will speed up the analysis at the cost of reduced precision.

@c @end table

@node           Other program analyses
@subsection     Other program analyses
@cindex         Other program analyses

@table @asis

@sp 1
@item @code{--analyse-exceptions}
@findex --analyse-exceptions
Enable exception analysis. which tries to identify procedures that will
not throw an exception. Some optimizations can make use of this
information.

@c @sp 1
@c @item @code{--analyse-local-closures}
@c @itemx @code{--analyse-closures}
@c @findex --analyse-local-closures
@c @findex --analyse-closures
@c Enable closure analysis, which tries identify the possible values that
@c higher-order valued variables can take. Some optimizations can make use
@c of this information.

@sp 1
@item @code{--analyse-trail-usage}
@findex --analyse-trail-usage
Enable trail usage analysis, which tries to identify procedures that
will not modify the trail. The compiler can use this information to
reduce the overhead of trailing.

@sp 1
@item @code{--analyse-mm-tabling}
@findex --analyse-mm-tabling
Identify those goals that do not call procedures that are evaluated
using minimal model tabling. The compiler can use this information to
reduce the overhead of minimal model tabling.

@end table

@node           Options that ask for modified output
@section        Options that ask for modified output
@cindex         Options that ask for modified output

@table @asis

@sp 1
@item @code{-n}
@itemx @code{--line-numbers}
@findex -n
@findex --line-numbers
Put source line numbers into the generated code. The generated code may
be in C, Java or C# (the usual cases), or in Mercury (with
@samp{--convert-to-mercury}).

@sp 1
@item @code{--no-line-numbers-around-foreign-code}
@findex --line-numbers-around-foreign-code
@findex --no-line-numbers-around-foreign-code
Do not put source line numbers into the generated target language file
around inclusions of foreign language code.

@sp 1
@item @code{--line-numbers-for-c-headers}
@findex --line-numbers-for-c-headers
Put source line numbers in the generated C header files. This can make
it easier to track down any problems with C code in @code{foreign_decl}
pragmas, but may cause unnecessary recompilations of other modules if
any of these line numbers changes (e.g. because the location of a
predicate declaration changes in the Mercury source file).

@c @sp 1
@c @item @code{--type-repns-for-humans}
@c @findex --type-repns-for-humans
@c Format type_repn items in automatically generated interface files to be
@c more easily read by humans.

@sp 1
@item @code{--auto-comments}
@findex --auto-comments
Output comments in the generated target language file. This is
primarily useful for trying to understand how the generated target
language code relates to the source code, e.g.@: in order to debug the
compiler. (The code may be easier to understand if you also use the
@samp{--no-llds-optimize} option.)

@c @sp 1
@c @item @code{--frameopt-comments}
@c @findex --frameopt-comments
@c Get frameopt.m to generate comments describing its operation. (The code
@c may be easier to understand if you also use the
@c @samp{--no-llds-optimize} option.)

@end table

@node           Options for controlling mmc --make
@section        Options for controlling mmc --make
@cindex         Options for controlling mmc --make

@table @asis

@sp 1
@item @code{-k}
@itemx @code{--keep-going}
@findex -k
@findex --keep-going
With @samp{--make}, keep going as far as possible even if an error is
detected.

@sp 1
@item @code{--order-make-by-timestamp}
@findex --order-make-by-timestamp
Tell @code{mmc --make} to compile more recently modified source files
first.

@sp 1
@item @code{--show-make-times}
@findex --show-make-times
Report run times for commands executed by @code{mmc --make}.

@sp 1
@item @code{-j @var{N}}
@itemx @code{--jobs @var{N}}
@findex -j
@findex --jobs
With @samp{--make}, attempt to perform up to @samp{N} jobs
concurrently.

@sp 1
@item @code{--track-flags}
@itemx @code{--track-options}
@findex --track-flags
@findex --track-options
With @samp{--make}, keep track of the options used when compiling each
module. If an option for a module is added or removed,
@code{mmc --make} will then know to recompile the module even if the
timestamp on the file itself has not changed. Warning options,
verbosity options, and build system options are not tracked.

@sp 1
@item @code{--pre-link-command @var{command}}
@itemx --no-pre-link-command
@findex --pre-link-command
@findex --no-pre-link-command
Specify a command to run before linking with @code{mmc --make}. This
can be used to compile C source files which rely on header files
generated by the Mercury compiler. The command will be passed the names
of all of the source files in the program or library, with the source
file containing the main module given first.

@end table

@node           Options for target language compilation
@section        Options for target language compilation
@cindex         Options for target language compilation

@menu
* General options for compiling target language code:: 
* Options for compiling C code:: 
* Options for compiling Java code:: 
* Options for compiling C# code:: 
@end menu

@node           General options for compiling target language code
@subsection     General options for compiling target language code
@cindex         General options for compiling target language code

@table @asis

@sp 1
@item @code{--target-debug}
@itemx @code{--c-debug}
@itemx @code{--java-debug}
@findex --target-debug
@findex --c-debug
@findex --java-debug
Enable debugging of the generated target code. If the target language
is C, this has the same effect as @samp{--c-debug} (see below). If the
target language is C#, this causes the compiler to pass @code{/debug}
to the C# compiler.

@sp 1
@item @code{--no-warn-target-code}
@findex --warn-target-code
@findex --no-warn-target-code
Disable warnings from the compiler (which may be e.g. gcc) that
processes the target code generated by mmc.

@end table

@node           Options for compiling C code
@subsection     Options for compiling C code
@cindex         Options for compiling C code

@table @asis

@sp 1
@item @code{--cc @var{compiler-name}}
@findex --cc
@cindex C compiler
Specify which C compiler to use.

@c @sp 1
@c @item @code{--c-compiler-type @{gcc,clang,msvc_x86,msvc_x64,unknown@}}
@c @findex --c-compiler-type
@c There is no help text available.

@sp 1
@item @code{--c-optimize}
@itemx @code{--c-optimise}
@findex --c-optimize
@findex --c-optimise
Enable optimizations by the C compiler.

@sp 1
Optimization levels 1 to 6 automatically set --c-optimize.

@sp 1
@item @code{--c-include-directory @var{directory}}
@itemx --no-c-include-directory
@itemx @code{--c-include-dir @var{directory}}
@itemx --no-c-include-dir
@findex --c-include-directory
@findex --no-c-include-directory
@findex --c-include-dir
@findex --no-c-include-dir
Append @var{directory} to the list of directories to be searched for C
header files. Note that if you want to override this list, instead of
appending to it, then you can set the @env{MERCURY_MC_ALL_C_INCL_DIRS}
environment variable to a sequence of @samp{--c-include-directory}
options.

@sp 1
@item @code{--cflags @var{<options}}
@itemx --no-cflags
@findex --cflags
@findex --no-cflags
@cindex C compiler options
Specify options to be passed to the C compiler. These options will not
be quoted when passed to the shell.

@sp 1
@item @code{--cflag @var{option}}
@findex --cflag
Specify a single word option to be passed to the C compiler. The word
will be quoted when passed to the shell.

@c @sp 1
@c @item @code{--gcc-flags @var{flags}}
@c @itemx --no-gcc-flags
@c @findex --gcc-flags
@c @findex --no-gcc-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--gcc-flag @var{flag}}
@c @findex --gcc-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--clang-flags @var{flags}}
@c @itemx --no-clang-flags
@c @findex --clang-flags
@c @findex --no-clang-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--clang-flag @var{flag}}
@c @findex --clang-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--msvc-flags @var{flags}}
@c @itemx --no-msvc-flags
@c @findex --msvc-flags
@c @findex --no-msvc-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--msvc-flag @var{flag}}
@c @findex --msvc-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-warnings @var{flags}}
@c @findex --cflags-for-warnings
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-optimization @var{flags}}
@c @findex --cflags-for-optimization
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-debug @var{flags}}
@c @findex --cflags-for-debug
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-regs @var{flags}}
@c @findex --cflags-for-regs
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-gotos @var{flags}}
@c @findex --cflags-for-gotos
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-threads @var{flags}}
@c @findex --cflags-for-threads
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-pic @var{flags}}
@c @findex --cflags-for-pic
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-sanitizers @var{flags}}
@c @findex --cflags-for-sanitizers
@c There is no help text available.

@c @sp 1
@c @item @code{--cflags-for-lto @var{flags}}
@c @findex --cflags-for-lto
@c There is no help text available.

@c @sp 1
@c @item @code{--c-flag-to-name-object-file @var{flags}}
@c @findex --c-flag-to-name-object-file
@c There is no help text available.

@c @sp 1
@c @item @code{--object-file-extension @var{extension}}
@c @findex --object-file-extension
@c There is no help text available.

@c @sp 1
@c @item @code{--pic-object-file-extension @var{extension}}
@c @findex --pic-object-file-extension
@c There is no help text available.

@end table

@node           Options for compiling Java code
@subsection     Options for compiling Java code
@cindex         Options for compiling Java code

@table @asis

@sp 1
@item @code{--java-compiler @var{javac}}
@itemx @code{--javac @var{javac}}
@findex --java-compiler
@findex --javac
@cindex Java compiler
Specify which Java compiler to use. The default is @samp{javac}.

@sp 1
@item @code{--java-interpreter @var{java}}
@findex --java-interpreter
@cindex Java interpreter
Specify which Java interpreter to use. The default is @samp{java}.

@sp 1
@item @code{--javac-flags @var{options}}
@itemx --no-javac-flags
@itemx @code{--java-flags @var{options}}
@itemx --no-java-flags
@findex --javac-flags
@findex --no-javac-flags
@findex --java-flags
@findex --no-java-flags
@cindex Java compiler flags
Specify options to be passed to the Java compiler. These options will
not be quoted when passed to the shell.

@sp 1
@item @code{--javac-flag @var{option}}
@itemx @code{--java-flag @var{option}}
@findex --javac-flag
@findex --java-flag
Specify a single word option to be passed to the Java compiler. The
word will be quoted when passed to the shell.

@sp 1
@item @code{--java-classpath @var{path}}
@itemx --no-java-classpath
@findex --java-classpath
@findex --no-java-classpath
@cindex classpath
@cindex Directories
Set the classpath for the Java compiler and interpreter.

@sp 1
@item @code{--java-runtime-flags @var{options}}
@itemx --no-java-runtime-flags
@findex --java-runtime-flags
@findex --no-java-runtime-flags
@cindex Java runtime options
Specify options to be passed to the Java interpreter. These options
will not be quoted when passed to the shell.

@sp 1
@item @code{--java-runtime-flag @var{option}}
@findex --java-runtime-flag
Specify a single word option to be passed to the Java interpreter. The
word will be quoted when passed to the shell.

@end table

@node           Options for compiling C# code
@subsection     Options for compiling C# code
@cindex         Options for compiling C# code

@table @asis

@sp 1
@item @code{--csharp-compiler @var{csc}}
@findex --csharp-compiler
@cindex C# compiler
Specify the name of the C# Compiler. The default is @samp{csc}.

@sp 1
@item @code{--cli-interpreter @var{prog}}
@findex --cli-interpreter
@cindex CIL interpreter
Specify the program that implements the Common Language Infrastructure
(CLI) execution environment, e.g. @samp{mono}.

@c @sp 1
@c @item @code{--csharp-compiler-type @{microsoft,mono,unknown@}}
@c @findex --csharp-compiler-type
@c There is no help text available.

@sp 1
@item @code{--csharp-flags @var{options}}
@itemx --no-csharp-flags
@findex --csharp-flags
@findex --no-csharp-flags
@cindex C# compiler options
Specify options to be passed to the C# compiler. These options will not
be quoted when passed to the shell.

@sp 1
@item @code{--csharp-flag @var{option}}
@findex --csharp-flag
Specify a single word option to be passed to the C# compiler. The word
will be quoted when passed to the shell.

@end table

@node           Options for linking
@section        Options for linking
@cindex         Options for linking

@menu
* General options for linking:: 
* Options for linking C or C# code:: 
* Options for linking just C code:: 
* Options for linking just Java code:: 
* Options for linking just C# code:: 
@end menu

@node           General options for linking
@subsection     General options for linking
@cindex         General options for linking

@table @asis

@sp 1
@item @code{--mercury-library-directory @var{directory}}
@itemx @code{--mld @var{directory}}
@findex --mercury-library-directory
@findex --mld
@cindex Directories for libraries
@cindex Search path for libraries
Append @var{directory} to the list of directories to be searched for
Mercury libraries. This will add @samp{--search-directory},
@samp{--library-directory}, @samp{--init-file-directory} and
@samp{--c-include-directory} options as needed. @xref{Using installed
libraries with mmc --make}.

@c @sp 1
@c NO_HELP OPTION mercury_library_directories
@c There is no help text available.

@sp 1
@item @code{--search-library-files-directory @var{directory}}
@itemx @code{--search-lib-files-dir @var{directory}}
@findex --search-library-files-directory
@findex --search-lib-files-dir
@cindex Directories for libraries
@cindex Search path for libraries
Search @var{directory} for Mercury library files that have not yet been
installed. Similar to adding @var{directory} using all of the
@samp{--search-directory}, @samp{--intermod-directory},
@samp{--library-directory}, @samp{--init-file-directory} and
@samp{--c-include-directory} options.

@c @sp 1
@c NO_HELP OPTION search_library_files_directories
@c There is no help text available.

@sp 1
@item @code{--mercury-library @var{library}}
@itemx @code{--ml @var{library}}
@findex --mercury-library
@findex --ml
Link with the specified Mercury library. @xref{Using installed
libraries with mmc --make}.

@c @sp 1
@c NO_HELP OPTION mercury_libraries
@c There is no help text available.

@sp 1
@item @code{--mercury-standard-library-directory @var{directory}}
@itemx --no-mercury-standard-library-directory
@itemx @code{--mercury-stdlib-dir @var{directory}}
@itemx --no-mercury-stdlib-dir
@findex --mercury-standard-library-directory
@findex --no-mercury-standard-library-directory
@findex --mercury-stdlib-dir
@findex --no-mercury-stdlib-dir
Search @var{directory} for the Mercury standard library. Implies
@samp{--mercury-library-directory @var{directory}} and
@samp{--mercury-configuration-directory @var{directory}}. The negative
version, @samp{--no-mercury-standard-library-directory}, tells the
compiler not to use the Mercury standard library, and also implies
@samp{--no-mercury-configuration-directory}.

@c @sp 1
@c NO_HELP OPTION mercury_standard_library_directory
@c There is no help text available.

@end table

@node           Options for linking C or C# code
@subsection     Options for linking C or C# code
@cindex         Options for linking C or C# code

@table @asis

@sp 1
@item @code{-L @var{directory}}
@itemx -L-
@itemx @code{--library-directory @var{directory}}
@itemx --no-library-directory
@findex -L
@findex -L-
@findex --library-directory
@findex --no-library-directory
@cindex Directories for libraries
@cindex Search path for libraries
Append @var{directory} to the list of directories in which to search
for libraries.

@sp 1
@item @code{-l @var{library}}
@itemx -l-
@itemx @code{--library @var{library}}
@itemx --no-library
@findex -l
@findex -l-
@findex --library
@findex --no-library
@cindex Libraries, linking with
Link with the specified library.

@c @sp 1
@c @item @code{--link-ssdebug-libs}
@c @itemx @code{--link-ssdb-libs}
@c @findex --link-ssdebug-libs
@c @findex --link-ssdb-libs
@c Link the source to source debugging libraries into the executable.

@end table

@node           Options for linking just C code
@subsection     Options for linking just C code
@cindex         Options for linking just C code

@table @asis

@sp 1
@item @code{-o @var{filename}}
@itemx @code{--output-file @var{filename}}
@findex -o
@findex --output-file
Specify the name of the final executable. (The default executable name
is the same as the name of the first module on the command line.) This
option is ignored by @code{mmc --make}.

@sp 1
@item @code{--link-object @var{filename}}
@itemx --no-link-object
@findex --link-object
@findex --no-link-object
@cindex Object files, linking with
Link with the specified object file, or archive of object files.

@sp 1
@item @code{--ld-flags @var{options}}
@itemx --no-ld-flags
@findex --ld-flags
@findex --no-ld-flags
Specify options to be passed to the linker command that will create an
executable. These options will not be quoted when passed to the shell.
Use @code{mmc --output-link-command} to find out what the linker
command is.

@sp 1
@item @code{--ld-flag @var{option}}
@findex --ld-flag
Specify a single word option to be passed to the linker command that
will create an executable. The word will be quoted when passed to the
shell. Use @code{mmc --output-link-command} to find out what the linker
command is.

@sp 1
@item @code{--ld-libflags @var{options}}
@itemx --no-ld-libflags
@findex --ld-libflags
@findex --no-ld-libflags
Specify options to be passed to the linker command that will create a
shared library. These options will not be quoted when passed to the
shell. Use @code{mmc --output-shared-lib-link-command} to find out what
the linker command is.

@sp 1
@item @code{--ld-libflag @var{option}}
@findex --ld-libflag
Specify a single word option to be passed to the linker command that
will create a shared library. The word will be quoted when passed to
the shell. Use @code{mmc --output-shared-lib-link-command} to find out
what the linker command is.

@sp 1
@item @code{-R @var{directory}}
@itemx -R-
@itemx @code{--runtime-library-directory @var{directory}}
@itemx --no-runtime-library-directory
@findex -R
@findex -R-
@findex --runtime-library-directory
@findex --no-runtime-library-directory
Append @var{directory} to the list of directories in which to search
for shared libraries at runtime.

@sp 1
@item @code{--no-default-runtime-library-directory}
@findex --default-runtime-library-directory
@findex --no-default-runtime-library-directory
Do not add any directories to the runtime search path automatically.

@sp 1
@item @code{--init-file-directory @var{directory}}
@itemx --no-init-file-directory
@findex --init-file-directory
@findex --no-init-file-directory
Append @var{directory} to the list of directories to be searched for
@file{.init} files by @code{c2init}.

@sp 1
@item @code{--init-file @var{init-file}}
@itemx --no-init-file
@findex --init-file
@findex --no-init-file
Append @var{init-file} to the list of @file{.init} files to be passed
to @code{c2init}.

@sp 1
@item @code{--trace-init-file @var{init-file}}
@itemx --no-trace-init-file
@findex --trace-init-file
@findex --no-trace-init-file
Append @var{init-file} to the list of @file{.init} files to be passed
to @code{c2init} when tracing is enabled.

@sp 1
@item @code{--linkage @{shared, static@}}
@findex --linkage
Specify whether to use shared or static linking for executables. Shared
libraries are always linked with @samp{--linkage shared}.

@c @sp 1
@c NO_HELP OPTION only_globals_linkage
@c There is no help text available.

@sp 1
@item @code{--mercury-linkage @{shared, static@}}
@findex --mercury-linkage
Specify whether to use shared or static linking when linking an
executable with Mercury libraries. Shared libraries are always linked
with @samp{--mercury-linkage shared}.

@c @sp 1
@c NO_HELP OPTION only_globals_mercury_linkage
@c There is no help text available.

@sp 1
@item @code{--no-demangle}
@findex --demangle
@findex --no-demangle
Do not pipe the output of the linker through the Mercury demangler. The
demangler usually makes it easier to understand the diagnostics for any
link errors that involve code generated by the Mercury compiler.

@sp 1
@item @code{--no-strip}
@findex --strip
@findex --no-strip
Do not invoke the @code{strip} command on executables. Stripping
minimizes executables' sizes, but also makes debugging them much
harder.

@sp 1
@item @code{--no-main}
@findex --main
@findex --no-main
Do not generate a C @code{main()} function. With @samp{--no-main}, the
user's own code must provide a main() function.

@sp 1
@item @code{--no-allow-undefined}
@findex --allow-undefined
@findex --no-allow-undefined
Do not allow undefined symbols in shared libraries.

@sp 1
@item @code{--no-use-readline}
@findex --use-readline
@findex --no-use-readline
Disable use of the readline library in the debugger.

@sp 1
@item @code{--runtime-flags @var{flags}}
@itemx --no-runtime-flags
@findex --runtime-flags
@findex --no-runtime-flags
Specify flags to pass to the Mercury runtime.

@sp 1
@item @code{--extra-initialization-functions}
@itemx @code{--extra-inits}
@findex --extra-initialization-functions
@findex --extra-inits
Search @file{.c} files for extra initialization functions. (This may be
necessary if the C files contain hand-written C code with @code{INIT}
comments, rather than containing only C code that was automatically
generated by the Mercury compiler.)

@sp 1
@item @code{--framework @var{framework}}
@itemx --no-framework
@findex --framework
@findex --no-framework
@cindex Mac OS X, Using frameworks
Build and link against the specified framework. (Mac OS X only.)

@sp 1
@item @code{-F @var{directory}}
@itemx -F-
@itemx @code{--framework-directory @var{directory}}
@itemx --no-framework-directory
@findex -F
@findex -F-
@findex --framework-directory
@findex --no-framework-directory
@cindex Directories for libraries
@cindex Search path for libraries
@cindex Mac OS X, Using frameworks
Append the specified directory to the framework search path. (Mac OS X
only.)

@sp 1
@item @code{--cstack-reserve-size @var{size}}
@findex --cstack-reserve-size
Set the total size of the C stack in virtual memory for executables.
The stack size is given in bytes. This option is only supported (and
indeed only necessary) on systems running Microsoft Windows.)

@sp 1
@item @code{--link-executable-command @var{command}}
@findex --link-executable-command
Specify the command used to invoke the linker when linking an
executable.

@sp 1
@item @code{--link-shared-lib-command @var{command}}
@findex --link-shared-lib-command
Specify the command used to invoke the linker when linking a shared
library.

@sp 1
@item @code{--shlib-linker-install-name-path @var{directory}}
@findex --shlib-linker-install-name-path
Specify the path where a shared library will be installed. This option
is useful on systems where the runtime search path is obtained from the
shared library and not via the @samp{-R} option above (such as Mac OS
X).

@sp 1
@item @code{--strip-executable-command @var{command}}
@findex --strip-executable-command
Specify the command used to strip executables if no linker flag to do
so is available. This option has no effect on @code{ml}.

@sp 1
@item @code{--strip-executable-shared-flags @var{options}}
@findex --strip-executable-shared-flags
Specify options to pass to the strip executable command when linking
against Mercury shared libraries.

@sp 1
@item @code{--strip-executable-static-flags @var{options}}
@findex --strip-executable-static-flags
Specify options to pass to the strip executable command when linking
against Mercury static libraries.

@c @sp 1
@c @item @code{--compile-to-shared-lib}
@c @findex --compile-to-shared-lib
@c This option is intended only for use by the debugger's interactive
@c query facility.

@end table

@node           Options for linking just Java code
@subsection     Options for linking just Java code
@cindex         Options for linking just Java code

@table @asis

@sp 1
@item @code{--java-archive-command @var{command}}
@findex --java-archive-command
Specify the command used to produce Java archive (JAR) files.

@end table

@node           Options for linking just C# code
@subsection     Options for linking just C# code
@cindex         Options for linking just C# code

@table @asis

@sp 1
@item @code{--sign-assembly @var{keyfile}}
@findex --sign-assembly
Sign the current assembly with the strong name contained in the
specified key file. (This option is only meaningful when generating
library assemblies with the C# back-end.)

@end table

@node           Options controlling searches for files
@section        Options controlling searches for files
@cindex         Options controlling searches for files

@table @asis

@sp 1
@item @code{--options-search-directory @var{directory}}
@itemx --no-options-search-directory
@findex --options-search-directory
@findex --no-options-search-directory
Add @var{directory} to the list of directories to be searched for
options files.

@sp 1
@item @code{--use-subdirs}
@findex --use-subdirs
@cindex File names
@cindex Directories
@cindex Subdirectories
@cindex @file{Mercury} subdirectory
Generate intermediate files in a @file{Mercury} subdirectory, rather
than generating them in the current directory.

@sp 1
@item @code{--use-grade-subdirs}
@findex --use-grade-subdirs
@cindex File names
@cindex Directories
@cindex Subdirectories
@cindex @file{Mercury} subdirectory
@cindex Grades
Generate intermediate files in a @file{Mercury} subdirectory, laid out
so that multiple grades can be built simultaneously. Executables and
libraries will be symlinked or copied into the current directory.
@samp{--use-grade-subdirs} is supported only by @code{mmc --make}; it
does not work with @code{mmake}.

@sp 1
@item @code{-I @var{directory}}
@itemx -I-
@itemx @code{--search-directory @var{directory}}
@itemx --no-search-directory
@findex -I
@findex -I-
@findex --search-directory
@findex --no-search-directory
@cindex Directories
@cindex Search path
Append @var{directory} to the list of directories to be searched for
@file{.int*} and @file{.module_dep} files.

@sp 1
@item @code{--intermod-directory @var{directory}}
@itemx --no-intermod-directory
@findex --intermod-directory
@findex --no-intermod-directory
@cindex Directories
@cindex Search path
Add @var{directory} to the list of directories to be searched for
@file{.opt} and @file{.trans_opt} files.

@sp 1
@item @code{--no-use-search-directories-for-intermod}
@findex --use-search-directories-for-intermod
@findex --no-use-search-directories-for-intermod
@cindex Directories
@cindex Search path
With @samp{--use-search-directories-for-intermod}, the compiler will
add the arguments of @samp{--search-directory} options to the list of
directories to search for `.opt' files. With
@samp{--no-use-search-directories-for-intermod}, the compiler will use
only the arguments of @samp{--intermod-directory} options.

@c @sp 1
@c @item @code{--interface-dir-same-workspace @var{directory}}
@c @itemx --no-interface-dir-same-workspace
@c @itemx @code{--interface-dir-same-ws @var{directory}}
@c @itemx --no-interface-dir-same-ws
@c @findex --interface-dir-same-workspace
@c @findex --no-interface-dir-same-workspace
@c @findex --interface-dir-same-ws
@c @findex --no-interface-dir-same-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--interface-dir-independent-workspace @var{directory}}
@c @itemx --no-interface-dir-independent-workspace
@c @itemx @code{--interface-dir-indep-ws @var{directory}}
@c @itemx --no-interface-dir-indep-ws
@c @findex --interface-dir-independent-workspace
@c @findex --no-interface-dir-independent-workspace
@c @findex --interface-dir-indep-ws
@c @findex --no-interface-dir-indep-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--interface-dir-installed-library @var{directory}}
@c @itemx --no-interface-dir-installed-library
@c @itemx @code{--interface-dir-installed-lib @var{directory}}
@c @itemx --no-interface-dir-installed-lib
@c @findex --interface-dir-installed-library
@c @findex --no-interface-dir-installed-library
@c @findex --interface-dir-installed-lib
@c @findex --no-interface-dir-installed-lib
@c There is no help text available.

@c @sp 1
@c @item @code{--intermod-dir-same-workspace @var{directory}}
@c @itemx --no-intermod-dir-same-workspace
@c @itemx @code{--intermod-dir-same-ws @var{directory}}
@c @itemx --no-intermod-dir-same-ws
@c @findex --intermod-dir-same-workspace
@c @findex --no-intermod-dir-same-workspace
@c @findex --intermod-dir-same-ws
@c @findex --no-intermod-dir-same-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--intermod-dir-independent-workspace @var{directory}}
@c @itemx --no-intermod-dir-independent-workspace
@c @itemx @code{--intermod-dir-indep-ws @var{directory}}
@c @itemx --no-intermod-dir-indep-ws
@c @findex --intermod-dir-independent-workspace
@c @findex --no-intermod-dir-independent-workspace
@c @findex --intermod-dir-indep-ws
@c @findex --no-intermod-dir-indep-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--intermod-dir-installed-library @var{directory}}
@c @itemx --no-intermod-dir-installed-library
@c @itemx @code{--intermod-dir-installed-lib @var{directory}}
@c @itemx --no-intermod-dir-installed-lib
@c @findex --intermod-dir-installed-library
@c @findex --no-intermod-dir-installed-library
@c @findex --intermod-dir-installed-lib
@c @findex --no-intermod-dir-installed-lib
@c There is no help text available.

@c @sp 1
@c @item @code{--c-include-dir-same-workspace @var{directory}}
@c @itemx --no-c-include-dir-same-workspace
@c @itemx @code{--c-incl-dir-same-ws @var{directory}}
@c @itemx --no-c-incl-dir-same-ws
@c @findex --c-include-dir-same-workspace
@c @findex --no-c-include-dir-same-workspace
@c @findex --c-incl-dir-same-ws
@c @findex --no-c-incl-dir-same-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--c-include-dir-independent-workspace @var{directory}}
@c @itemx --no-c-include-dir-independent-workspace
@c @itemx @code{--c-incl-dir-indep-ws @var{directory}}
@c @itemx --no-c-incl-dir-indep-ws
@c @findex --c-include-dir-independent-workspace
@c @findex --no-c-include-dir-independent-workspace
@c @findex --c-incl-dir-indep-ws
@c @findex --no-c-incl-dir-indep-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--c-include-dir-installed-library @var{directory}}
@c @itemx --no-c-include-dir-installed-library
@c @itemx @code{--c-incl-dir-installed-lib @var{directory}}
@c @itemx --no-c-incl-dir-installed-lib
@c @findex --c-include-dir-installed-library
@c @findex --no-c-include-dir-installed-library
@c @findex --c-incl-dir-installed-lib
@c @findex --no-c-incl-dir-installed-lib
@c There is no help text available.

@c @sp 1
@c @item @code{--c-include-dir-external @var{directory}}
@c @itemx --no-c-include-dir-external
@c @itemx @code{--c-incl-dir-external @var{directory}}
@c @itemx --no-c-incl-dir-external
@c @findex --c-include-dir-external
@c @findex --no-c-include-dir-external
@c @findex --c-incl-dir-external
@c @findex --no-c-incl-dir-external
@c There is no help text available.

@c @sp 1
@c @item @code{--mercury-library-dir-same-workspace @var{directory}}
@c @itemx --no-mercury-library-dir-same-workspace
@c @itemx @code{--mer-lib-dir-same-ws @var{directory}}
@c @itemx --no-mer-lib-dir-same-ws
@c @findex --mercury-library-dir-same-workspace
@c @findex --no-mercury-library-dir-same-workspace
@c @findex --mer-lib-dir-same-ws
@c @findex --no-mer-lib-dir-same-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--mercury-library-dir-independent-workspace @var{directory}}
@c @itemx --no-mercury-library-dir-independent-workspace
@c @itemx @code{--mer-lib-dir-indep-ws @var{directory}}
@c @itemx --no-mer-lib-dir-indep-ws
@c @findex --mercury-library-dir-independent-workspace
@c @findex --no-mercury-library-dir-independent-workspace
@c @findex --mer-lib-dir-indep-ws
@c @findex --no-mer-lib-dir-indep-ws
@c There is no help text available.

@c @sp 1
@c @item @code{--mercury-library-dir-installed-library @var{directory}}
@c @itemx --no-mercury-library-dir-installed-library
@c @itemx @code{--mer-lib-dir-installed-lib @var{directory}}
@c @itemx --no-mer-lib-dir-installed-lib
@c @findex --mercury-library-dir-installed-library
@c @findex --no-mercury-library-dir-installed-library
@c @findex --mer-lib-dir-installed-lib
@c @findex --no-mer-lib-dir-installed-lib
@c There is no help text available.

@end table

@node           Options controlling the library installation process
@section        Options controlling the library installation process
@cindex         Options controlling the library installation process

@table @asis

@sp 1
@item @code{--install-prefix @var{directory}}
@findex --install-prefix
The directory under which to install Mercury libraries.

@sp 1
@item @code{--library-grade @var{grade}}
@itemx --no-library-grade
@itemx @code{--libgrade @var{grade}}
@itemx --no-libgrade
@findex --library-grade
@findex --no-library-grade
@findex --libgrade
@findex --no-libgrade
The positive form adds @var{grade} to the list of compilation grades in
which a library to be installed should be built. (The list is
initialized to the set of grades in which the standard library is
installed.) The negative form clears the list of compilation grades in
which a library to be installed should be built.

@sp 1
@item @code{--libgrades-include-component @var{grade_component}}
@itemx --no-libgrades-include-component
@itemx @code{--libgrades-include @var{grade_component}}
@itemx --no-libgrades-include
@findex --libgrades-include-component
@findex --no-libgrades-include-component
@findex --libgrades-include
@findex --no-libgrades-include
Remove grades that do not contain the specified component from the set
of library grades to be installed. (This option works only with
@code{mmc --make}; it does not work with @code{mmake}.)

@sp 1
@item @code{--libgrades-exclude-component @var{grade_component}}
@itemx --no-libgrades-exclude-component
@itemx @code{--libgrades-exclude @var{grade_component}}
@itemx --no-libgrades-exclude
@findex --libgrades-exclude-component
@findex --no-libgrades-exclude-component
@findex --libgrades-exclude
@findex --no-libgrades-exclude
Remove grades that contain the specified component from the set of
library grades to be installed. (This option works only with
@code{mmc --make}; it does not work with @code{mmake}.)

@sp 1
@item @code{--library-install-linkage @{shared, static@}}
@itemx --no-library-install-linkage
@itemx @code{--library-linkage @{shared, static@}}
@itemx --no-library-linkage
@itemx @code{--lib-linkage @{shared, static@}}
@itemx --no-lib-linkage
@findex --library-install-linkage
@findex --no-library-install-linkage
@findex --library-linkage
@findex --no-library-linkage
@findex --lib-linkage
@findex --no-lib-linkage
Specify whether libraries should be installed for shared or static
linking. This option can be specified multiple times. By default,
libraries will be installed for both shared and static linking.

@sp 1
@item @code{--no-detect-stdlib-grades}
@itemx @code{--no-detect-libgrades}
@findex --detect-stdlib-grades
@findex --no-detect-stdlib-grades
@findex --detect-libgrades
@findex --no-detect-libgrades
Do not scan the installation directory to determine which standard
library grades are available.

@sp 1
@item @code{--no-libgrade-install-check}
@findex --libgrade-install-check
@findex --no-libgrade-install-check
Do not check that libraries have been installed before attempting to
use them. (This option is meaningful only with @code{mmc --make}.)

@sp 1
@item @code{--extra-init-command @var{command}}
@itemx --no-extra-init-command
@findex --extra-init-command
@findex --no-extra-init-command
Specify a command to produce extra entries in the @file{.init} file for
a library. The command will be passed the names of all of the source
files in the program or library, with the source file containing the
main module given first.

@sp 1
@item @code{--extra-library-header @var{filename}}
@itemx --no-extra-library-header
@itemx @code{--extra-lib-header @var{filename}}
@itemx --no-extra-lib-header
@findex --extra-library-header
@findex --no-extra-library-header
@findex --extra-lib-header
@findex --no-extra-lib-header
Install the specified C header file with along with a Mercury library.
(This option is supported only by @code{mmc --make}.)

@end table

@node           Options specifying properties of the environment
@section        Options specifying properties of the environment
@cindex         Options specifying properties of the environment

@table @asis

@sp 1
@item @code{--mercury-configuration-directory @var{directory}}
@itemx @code{--mercury-config-dir @var{directory}}
@findex --mercury-configuration-directory
@findex --mercury-config-dir
Search @var{directory} for Mercury system's configuration files.

@c @sp 1
@c NO_HELP OPTION mercury_configuration_directory
@c There is no help text available.

@sp 1
@item @code{--install-command @var{command}}
@findex --install-command
Specify the command to use to install the files in Mercury libraries.
The given command will be invoked as
@code{@var{command} @var{source} @var{target}} to install each file in
a Mercury library. The default command is @code{cp}.

@sp 1
@item @code{--options-file @var{filename}}
@itemx --no-options-file
@findex --options-file
@findex --no-options-file
Add @var{filename} to the list of options files to be processed. If
@var{filename} is @samp{-}, an options file will be read from the
standard input. By default, the compiler will read the file named
@file{Mercury.options} in the current directory.

@sp 1
@item @code{--config-file @var{filename}}
@itemx --no-config-file
@findex --config-file
@findex --no-config-file
Read the Mercury compiler's configuration information from
@var{filename}. If the @samp{--config-file} option is not set, a
default configuration will be used, unless
@samp{--no-mercury-stdlib-dir} is passed to @code{mmc}. The
configuration file is just an options file. @xref{Using Mmake}.

@sp 1
@item @code{--env-type @{posix,cygwin,msys,windows@}}
@findex --env-type
Specify the environment type in which the compiler and generated
programs will be invoked. This option is equivalent to setting all of
@samp{--host-env-type}, @samp{--system-env-type} and
@samp{--target-env-type} to the given environment type.

@sp 1
@item @code{--host-env-type @{posix,cygwin,msys,windows@}}
@findex --host-env-type
Specify the environment type in which the compiler will be invoked.

@sp 1
@item @code{--system-env-type @{posix,cygwin,msys,windows@}}
@findex --system-env-type
Specify the environment type in which external programs invoked by the
compiler will run. If not specified, this defaults to the value given
by `--host-env-type'.

@sp 1
@item @code{--target-env-type @{posix,cygwin,msys,windows@}}
@findex --target-env-type
Specify the environment type in which generated programs will be
invoked.

@sp 1
@item @code{--restricted-command-line}
@findex --restricted-command-line
Enable this option if your shell does not support long command lines.
This option uses temporary files to pass arguments to sub-commands.
(This option is supported only by @code{mmc --make}.)

@end table

@node           Options that record autoconfigured parameters
@section        Options that record autoconfigured parameters
@cindex         Options that record autoconfigured parameters

@table @asis

@c @sp 1
@c @item @code{--conf-low-ptag-bits @var{N}}
@c @itemx @code{--conf-low-tag-bits @var{N}}
@c @findex --conf-low-ptag-bits
@c @findex --conf-low-tag-bits
@c Reserved for use by the @code{mmc} script.

@c @sp 1
@c @item @code{--branch-delay-slot}
@c @itemx @code{--have-delay-slot}
@c @findex --branch-delay-slot
@c @findex --have-delay-slot
@c Assume that branch instructions have a delay slot. Note that the value
@c of this option is normally autoconfigured; its use should never be
@c needed except for cross-compilation.

@sp 1
@item @code{--num-real-r-regs @var{N}}
@findex --num-real-r-regs
Assume registers @samp{r1} up to @samp{rN} are real (i.e. not virtual)
general purpose registers. Note that the value of this option is
normally autoconfigured; its use should never be needed except for
cross-compilation.

@sp 1
@item @code{--num-real-f-regs @var{N}}
@findex --num-real-f-regs
Assume registers @samp{f1} up to @samp{fN} are real (i.e. not virtual)
floating point registers. Note that the value of this option is
normally autoconfigured; its use should never be needed except for
cross-compilation.

@sp 1
@item @code{--num-real-r-temps @var{N}}
@itemx @code{--num-real-temps @var{N}}
@findex --num-real-r-temps
@findex --num-real-temps
Assume that @samp{N} non-float temporaries will fit into real machine
registers. Note that the value of this option is normally
autoconfigured; its use should never be needed except for
cross-compilation.

@sp 1
@item @code{--num-real-f-temps @var{N}}
@findex --num-real-f-temps
Assume that @samp{N} float temporaries will fit into real machine
registers. Note that the value of this option is normally
autoconfigured; its use should never be needed except for
cross-compilation.

@sp 1
@item @code{--max-jump-table-size @var{N}}
@findex --max-jump-table-size
Specify the maximum number of entries a jump table may have. The
special value 0 indicates the table size is unlimited. This option can
be useful to avoid exceeding fixed limits imposed by some C compilers.

@c @sp 1
@c @item @code{--filterjavac-command @var{command}}
@c @findex --filterjavac-command
@c There is no help text available.

@end table

@c @node           Options reserved for Mercury.config files
@c @section        Options reserved for Mercury.config files
@c @cindex         Options reserved for Mercury.config files

@c @table @asis

@c @sp 1
@c @item @code{--mkinit-command @var{command}}
@c @findex --mkinit-command
@c There is no help text available.

@c @sp 1
@c @item @code{--target-arch @var{architecture}}
@c @findex --target-arch
@c There is no help text available.

@c @sp 1
@c @item @code{--executable-file-extension @var{extension}}
@c @findex --executable-file-extension
@c There is no help text available.

@c @sp 1
@c @item @code{--library-extension @var{extension}}
@c @findex --library-extension
@c There is no help text available.

@c @sp 1
@c @item @code{--shared-library-extension @var{extension}}
@c @findex --shared-library-extension
@c There is no help text available.

@c @sp 1
@c @item @code{--create-archive-command @var{command}}
@c @findex --create-archive-command
@c There is no help text available.

@c @sp 1
@c @item @code{--create-archive-command-flags @var{flags}}
@c @itemx --no-create-archive-command-flags
@c @findex --create-archive-command-flags
@c @findex --no-create-archive-command-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--create-archive-command-output-flag @var{flag}}
@c @findex --create-archive-command-output-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--ranlib-command @var{command}}
@c @findex --ranlib-command
@c There is no help text available.

@c @sp 1
@c @item @code{--ranlib-flags @var{flags}}
@c @findex --ranlib-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--demangle-command @var{command}}
@c @findex --demangle-command
@c There is no help text available.

@c @sp 1
@c @item @code{--filtercc-command @var{command}}
@c @findex --filtercc-command
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-allow-undefined-flag @var{flag}}
@c @findex --linker-allow-undefined-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-debug-flags @var{flags}}
@c @findex --linker-debug-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-error-undefined-flag @var{flag}}
@c @findex --linker-error-undefined-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-link-lib-flag @var{flag}}
@c @findex --linker-link-lib-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-link-lib-suffix @var{extension}}
@c @findex --linker-link-lib-suffix
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-lto-flags @var{flags}}
@c @findex --linker-lto-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-opt-separator @var{separator}}
@c @findex --linker-opt-separator
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-path-flag @var{flag}}
@c @findex --linker-path-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-rpath-flag @var{flag}}
@c @findex --linker-rpath-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-rpath-separator @var{separator}}
@c @findex --linker-rpath-separator
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-sanitizer-flags @var{flag}}
@c @findex --linker-sanitizer-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-static-flags @var{flags}}
@c @findex --linker-static-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-strip-flag @var{flag}}
@c @findex --linker-strip-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-thread-flags @var{flags}}
@c @findex --linker-thread-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--linker-trace-flags @var{flags}}
@c @findex --linker-trace-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-debug-flags @var{flags}}
@c @findex --shlib-linker-debug-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-install-name-flag @var{flag}}
@c @findex --shlib-linker-install-name-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-link-lib-flag @var{flag}}
@c @findex --shlib-linker-link-lib-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-link-lib-suffix @var{extension}}
@c @findex --shlib-linker-link-lib-suffix
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-rpath-flag @var{flags}}
@c @findex --shlib-linker-rpath-flag
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-rpath-separator @var{separator}}
@c @findex --shlib-linker-rpath-separator
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-thread-flags @var{flags}}
@c @findex --shlib-linker-thread-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-trace-flags @var{flags}}
@c @findex --shlib-linker-trace-flags
@c There is no help text available.

@c @sp 1
@c @item @code{--shlib-linker-use-install-name}
@c @findex --shlib-linker-use-install-name
@c There is no help text available.

@c @sp 1
@c @item @code{--hwloc-libs @var{XXX document me}}
@c @findex --hwloc-libs
@c There is no help text available.

@c @sp 1
@c @item @code{--hwloc-static-libs @var{XXX document me}}
@c @findex --hwloc-static-libs
@c There is no help text available.

@c @sp 1
@c @item @code{--math-lib @var{library}}
@c @findex --math-lib
@c There is no help text available.

@c @sp 1
@c @item @code{--readline-libs @var{XXX document me}}
@c @findex --readline-libs
@c There is no help text available.

@c @sp 1
@c @item @code{--shared-libs @var{XXX document me}}
@c @findex --shared-libs
@c There is no help text available.

@c @sp 1
@c @item @code{--thread-libs @var{library}}
@c @findex --thread-libs
@c There is no help text available.

@c @sp 1
@c @item @code{--trace-libs @var{library}}
@c @findex --trace-libs
@c There is no help text available.

@c @sp 1
@c @item @code{--install-method @var{XXX document me}}
@c @findex --install-method
@c There is no help text available.

@c @sp 1
@c @item @code{--no-use-symlinks}
@c @findex --use-symlinks
@c @findex --no-use-symlinks
@c There is no help text available.

@c @end table

@node           Options for developers only
@section        Options for developers only
@cindex         Options for developers only

@menu
* Operation selection options for developers only:: 
* Dumping out internal compiler data structures:: 
* Options intended for internal use by the compiler only:: 
@end menu

@node           Operation selection options for developers only
@subsection     Operation selection options for developers only
@cindex         Operation selection options for developers only

@table @asis

@c @sp 1
@c @item @code{--progress-output-suffix @var{.xyz}}
@c @findex --progress-output-suffix
@c When compiling a module, output messages about the progress of the
@c compilation to a file named @file{@var{module}.xyz}. This includes any
@c statistics about the performance of compiler passes, if enabled. The
@c default is for such output to go to standard error.

@c @sp 1
@c @item @code{--error-output-suffix @var{.xyz}}
@c @findex --error-output-suffix
@c When compiling a module, output any error, warning and/or informational
@c messages about the module to a file named @file{@var{module}.xyz}. The
@c default is for such output to go to standard error.

@c @sp 1
@c @item @code{--inference-output-suffix @var{.xyz}}
@c @findex --inference-output-suffix
@c When compiling a module, output the results of any type and/or mode
@c inference to a file named @file{@var{module}.xyz}. The default is for
@c such output to go to standard error.

@c @sp 1
@c @item @code{--debug-output-suffix @var{.xyz}}
@c @findex --debug-output-suffix
@c When compiling a module, direct output that is intended to help debug
@c the compiler to a file named @file{@var{module}.xyz}. The default is
@c for such output to go to standard error.

@c @sp 1
@c @item @code{--recompile-output-suffix @var{.xyz}}
@c @findex --recompile-output-suffix
@c This is intended to direct the output from the test cases in
@c tests/recompilation to a file.

@c @sp 1
@c @item @code{--mode-constraints}
@c @findex --mode-constraints
@c Run constraint based mode analysis. The default is to use the robdd
@c solution using the full (subtyping) constraints, and to dump its
@c results.

@c @sp 1
@c @item @code{--simple-mode-constraints}
@c @findex --simple-mode-constraints
@c Use only the simplified constraint system when running the robdd solver
@c constraints based mode analysis.

@c @sp 1
@c @item @code{--propagate-mode-constraints}
@c @itemx @code{--prop-mode-constraints}
@c @findex --propagate-mode-constraints
@c @findex --prop-mode-constraints
@c Use the new propagation solver for constraints based mode analysis.

@c @sp 1
@c @item @code{--compute-goal-modes}
@c @findex --compute-goal-modes
@c Compute goal modes.

@c @sp 1
@c @item @code{--smart-recompilation}
@c @findex --smart-recompilation
@c When compiling, write program dependency information to be used to
@c avoid unnecessary recompilations if the interface of an imported module
@c changes in a way which does not invalidate the compiled code.
@c @samp{--smart-recompilation} does not yet work with
@c @samp{--intermodule-optimization}.

@c @sp 1
@c @item @code{--pre-prof-transforms-simplify}
@c @findex --pre-prof-transforms-simplify
@c Force the pre-profiling simplification pass that is usually enabled
@c when building a profiling version of a program. This allows a developer
@c to enable this pass when using a non-profiling build. It can be used to
@c test that generated code introduced in earlier passes is well-formed
@c before it is potentially removed by the later dead procedure
@c elimination pass.

@c @sp 1
@c @item @code{--disable-mm-pneg}
@c @findex --disable-mm-pneg
@c There is no help text available.

@c @sp 1
@c @item @code{--disable-mm-cut}
@c @findex --disable-mm-cut
@c There is no help text available.

@c @sp 1
@c @item @code{--disable-trail-ops}
@c @findex --disable-trail-ops
@c This option can be used to analyze the performance effects of trailing.

@c @sp 1
@c @item @code{--type-check-constraints}
@c @findex --type-check-constraints
@c Use the constraint based type checker instead of the old one.

@c @sp 1
@c @item @code{--no-trad-passes}
@c @findex --trad-passes
@c @findex --no-trad-passes
@c The default @samp{--trad-passes} completes code generation of each
@c predicate before going on to the next predicate. The
@c @samp{--no-trad-passes} option tells the compiler to complete each
@c phase of code generation on all predicates before going on to the next
@c phase on all predicates.

@c @sp 1
@c @item @code{--parallel-liveness}
@c @findex --parallel-liveness
@c Use multiple threads when computing liveness. At the moment this option
@c implies @samp{--no-trad-passes}, and requires the compiler to be built
@c in a low-level parallel grade and running with multiple engines.

@c @sp 1
@c @item @code{--parallel-code-gen}
@c @findex --parallel-code-gen
@c Use multiple threads when generating code. At the moment this option
@c implies @samp{--no-trad-passes}, and requires the compiler to be built
@c in a low-level parallel grade and running with multiple engines.

@c @sp 1
@c @item @code{--no-should-pretest-equality}
@c @findex --should-pretest-equality
@c @findex --no-should-pretest-equality
@c Normally, the compiler adds to the starts of potentially expensive
@c unify and compare predicates a test for the two values being equal as
@c words. Specifying @samp{--no-should-pretest-equality} prevents this.

@c @sp 1
@c @item @code{--fact-table-max-array-size @var{N}}
@c @findex --fact-table-max-array-size
@c Specify the maximum number of elements in a single
@c @code{:- pragma fact_table} data array (default: 1024).

@c @sp 1
@c @item @code{--fact-table-hash-percent-full @var{percentage}}
@c @findex --fact-table-hash-percent-full
@c Specify how full @code{:- pragma fact_table} hash tables should be
@c allowed to get. Given as an integer percentage (valid range: 1 to 100,
@c default: 90).

@c @sp 1
@c @item @code{--no-prefer-switch}
@c @findex --prefer-switch
@c @findex --no-prefer-switch
@c Generate code using computed gotos rather than switches. This makes the
@c generated code less readable, but potentially slightly more efficient.
@c This option is effective only with @samp{--high-level-code}.

@c @sp 1
@c @item @code{--no-prefer-while-loop-over-jump-self}
@c @findex --prefer-while-loop-over-jump-self
@c @findex --no-prefer-while-loop-over-jump-self
@c Generate code for tail-recursive single procedures using an infinite
@c while loop, with tail calls being done by a continue. The alternative
@c is a label at the start of the procedure, with tail calls being done by
@c a jump to the label. This option is effective only with
@c @samp{--high-level-code}.

@c @sp 1
@c @item @code{--prefer-while-loop-over-jump-mutual}
@c @findex --prefer-while-loop-over-jump-mutual
@c Generate code for tail-recursive-SCCs using an infinite while loop
@c wrapped around a switch, with one switch arm for each procedure in the
@c TSCC, with tail calls being done by setting the value of the
@c switched-on variable and a continue. The alternative is a simple label
@c before the code of each procedure, with tail calls being done by a jump
@c to the label. This option is effective only with
@c @samp{--high-level-code}.

@c @sp 1
@c @item @code{--no-opt-no-return-calls}
@c @findex --opt-no-return-calls
@c @findex --no-opt-no-return-calls
@c Do not optimize the stack usage of calls that cannot return.

@c @sp 1
@c @item @code{--bug-intermod-2002-06-13}
@c @itemx @code{--bug-intermod-2006-09-28}
@c @itemx @code{--bug-foreign_import-2002-08-06}
@c @itemx @code{--install-opt-files-2002-08-30}
@c @itemx @code{--read-config-file-2003-03-01}
@c @itemx @code{--no-noncompact-ho-call-2004-01-15}
@c @itemx @code{--trace-io-builtins-2006-08-14}
@c @itemx @code{--compound-compare-builtins-2007-07-09}
@c @itemx @code{--no-det-warning-compound-compare-2007-07-17}
@c @itemx @code{--foreign-enum-switch-fix}
@c @itemx @code{--failing-disjunct-in-switch-dup-fix}
@c @itemx @code{--store-at-ref-impure-2008-09-11}
@c @itemx @code{--java-export-ref-out}
@c @itemx @code{--java-generics-2010-04-13}
@c @itemx @code{--strip-executable-2014-05-05}
@c @itemx @code{--trace-goal-only-locals-2017-07-05}
@c @itemx @code{--no-reserved-addrs}
@c @itemx @code{--builtin-lt-gt-2018-10-08}
@c @itemx @code{--fixed-contiguity-2018-10-19}
@c @itemx @code{--simplest-msg-2019-09-22}
@c @itemx @code{--unqual-foreign-enums-in-int-files-2019-10-04}
@c @itemx @code{--obsolete-proc-2019-10-23}
@c @itemx @code{--type-repn-int3-2020-03-22}
@c @itemx @code{--github-85--2020-03-24}
@c @itemx @code{--foreign-proc-typeinfo-2020-04-08}
@c @itemx @code{--ushift-2020-04-30}
@c @itemx @code{--unsigned_lt-2020-05-02}
@c @itemx @code{--format-uint-2020-05-23}
@c @itemx @code{--mmake-all-2020-05-25}
@c @itemx @code{--unsigned-lt-2020-05-25}
@c @itemx @code{--may-ignore-without-warning-2020-08-18}
@c @itemx @code{--prolog-is-2020-08-21}
@c @itemx @code{--partial-inst-copy-2021-01-04}
@c @itemx @code{--mantis-bug-529-2021-02-25}
@c @itemx @code{--subtype-opt-2022-02-19}
@c @itemx @code{--typespec-pragma-2022-07-20}
@c @itemx @code{--ushift-2022-12-06}
@c @itemx @code{--ushift-2022-12-07}
@c @itemx @code{--strtrie-2022-12-08}
@c @itemx @code{--term-pass2-2022-12-28}
@c @itemx @code{--format-2023-01-27}
@c @itemx @code{--singleton-2023-06-10}
@c @itemx @code{--warn-obsolete-transform-2023-07-03}
@c @itemx @code{--gen-dep-ints-2023-10-15}
@c @itemx @code{--tscp-2024-02-07}
@c @itemx @code{--format-2024-02-07}
@c @itemx @code{--dym-2024-02-08}
@c @itemx @code{--wne-2024-02-21}
@c @itemx @code{--escape-2024-04-28}
@c @itemx @code{--can-fail-function-obsolete-2024-08-10}
@c @itemx @code{--unused-statevar-warn-2025-05-16}
@c @itemx @code{--allow-non-contig-for-2025-06-01}
@c @itemx @code{--subtype-int2-2025-07-07}
@c @findex --bug-intermod-2002-06-13
@c @findex --bug-intermod-2006-09-28
@c @findex --bug-foreign_import-2002-08-06
@c @findex --install-opt-files-2002-08-30
@c @findex --read-config-file-2003-03-01
@c @findex --no-noncompact-ho-call-2004-01-15
@c @findex --trace-io-builtins-2006-08-14
@c @findex --compound-compare-builtins-2007-07-09
@c @findex --no-det-warning-compound-compare-2007-07-17
@c @findex --foreign-enum-switch-fix
@c @findex --failing-disjunct-in-switch-dup-fix
@c @findex --store-at-ref-impure-2008-09-11
@c @findex --java-export-ref-out
@c @findex --java-generics-2010-04-13
@c @findex --strip-executable-2014-05-05
@c @findex --trace-goal-only-locals-2017-07-05
@c @findex --no-reserved-addrs
@c @findex --builtin-lt-gt-2018-10-08
@c @findex --fixed-contiguity-2018-10-19
@c @findex --simplest-msg-2019-09-22
@c @findex --unqual-foreign-enums-in-int-files-2019-10-04
@c @findex --obsolete-proc-2019-10-23
@c @findex --type-repn-int3-2020-03-22
@c @findex --github-85--2020-03-24
@c @findex --foreign-proc-typeinfo-2020-04-08
@c @findex --ushift-2020-04-30
@c @findex --unsigned_lt-2020-05-02
@c @findex --format-uint-2020-05-23
@c @findex --mmake-all-2020-05-25
@c @findex --unsigned-lt-2020-05-25
@c @findex --may-ignore-without-warning-2020-08-18
@c @findex --prolog-is-2020-08-21
@c @findex --partial-inst-copy-2021-01-04
@c @findex --mantis-bug-529-2021-02-25
@c @findex --subtype-opt-2022-02-19
@c @findex --typespec-pragma-2022-07-20
@c @findex --ushift-2022-12-06
@c @findex --ushift-2022-12-07
@c @findex --strtrie-2022-12-08
@c @findex --term-pass2-2022-12-28
@c @findex --format-2023-01-27
@c @findex --singleton-2023-06-10
@c @findex --warn-obsolete-transform-2023-07-03
@c @findex --gen-dep-ints-2023-10-15
@c @findex --tscp-2024-02-07
@c @findex --format-2024-02-07
@c @findex --dym-2024-02-08
@c @findex --wne-2024-02-21
@c @findex --escape-2024-04-28
@c @findex --can-fail-function-obsolete-2024-08-10
@c @findex --unused-statevar-warn-2025-05-16
@c @findex --allow-non-contig-for-2025-06-01
@c @findex --subtype-int2-2025-07-07
@c Is the compiler sufficiently recent to contain the new feature or
@c bugfix referred to by each name?

@c @sp 1
@c @item @code{--experiment @var{experiment_name}}
@c @findex --experiment
@c There is no help text available.

@c @sp 1
@c @item @code{--experiment1}
@c @findex --experiment1
@c There is no help text available.

@c @sp 1
@c @item @code{--experiment2}
@c @findex --experiment2
@c There is no help text available.

@c @sp 1
@c @item @code{--experiment3}
@c @findex --experiment3
@c There is no help text available.

@c @sp 1
@c @item @code{--experiment4}
@c @findex --experiment4
@c There is no help text available.

@c @sp 1
@c @item @code{--experiment5}
@c @findex --experiment5
@c There is no help text available.

@c @sp 1
@c @item @code{--no-allow-ho-insts-as-modes}
@c @findex --allow-ho-insts-as-modes
@c @findex --no-allow-ho-insts-as-modes
@c Do not allow higher order insts to be used as modes.

@c @sp 1
@c @item @code{--ignore-par-conjunctions}
@c @findex --ignore-par-conjunctions
@c Replace parallel conjunctions with plain ones, this is useful for
@c benchmarking. Note that it does not affect implicit parallelism.

@sp 1
@item @code{--control-granularity}
@findex --control-granularity
Don't try to generate more parallelism than the machine can handle,
which may be specified at runtime or detected automatically.

@c @sp 1
@c @item @code{--distance-granularity @var{distance}}
@c @findex --distance-granularity
@c Control the granularity of parallel execution using the specified
@c distance value.

@c @sp 1
@c @item @code{--implicit-parallelism}
@c @findex --implicit-parallelism
@c Introduce parallel conjunctions where it could be worthwhile (implicit
@c parallelism) using information generated by mdprof_create_feedback. The
@c profiling feedback file can be specified using the
@c @samp{--feedback-file} option.

@c @sp 1
@c @item @code{--feedback-file @var{filename}}
@c @findex --feedback-file
@c Use the specified profiling feedback file to help make decisions about
@c where to introduce implicit parallelism.

@c @sp 1
@c @item @code{--par-loop-control}
@c @findex --par-loop-control
@c There is no help text available.

@c @sp 1
@c @item @code{--par-loop-control-preserve-tail-recursion}
@c @findex --par-loop-control-preserve-tail-recursion
@c There is no help text available.

@c @sp 1
@c UNNAMED OPTION optopt_enable_const_struct_poly
@c Disable the gathering of constant structures holding typeinfos and
@c typeclass_infos in global_data structures.

@end table

@c @node           Verbosity options for developers only
@c @subsection     Verbosity options for developers only
@c @cindex         Verbosity options for developers only

@c @table @asis

@c @sp 1
@c @item @code{--detailed-statistics}
@c @findex --detailed-statistics
@c Output more detailed messages about the compiler's time/space usage.

@c @sp 1
@c @item @code{--benchmark-modes}
@c @findex --benchmark-modes
@c Benchmark mode analysis, including its experimental version, if it is
@c enabled.

@c @sp 1
@c @item @code{--benchmark-modes-repeat @var{num_repeats}}
@c @findex --benchmark-modes-repeat
@c The number of times to execute mode analysis, if
@c @samp{--benchmark-modes} is enabled.

@c @sp 1
@c @item @code{--report-cmd-line-args}
@c @findex --report-cmd-line-args
@c Report the command line arguments.

@c @sp 1
@c @item @code{--report-cmd-line-args-in-doterr}
@c @findex --report-cmd-line-args-in-doterr
@c Report the command line arguments for compilations whose output mmake
@c normally redirects to a @file{.err} file.

@c @sp 1
@c @item @code{--inform-ignored-pragma-errors}
@c @findex --inform-ignored-pragma-errors
@c Print an informational message for each otherwise-ignored error that
@c reports an inability to find the procedure that a pragma refers to.

@c @sp 1
@c @item @code{--inform-generated-type-spec-pragmas}
@c @findex --inform-generated-type-spec-pragmas
@c Print an informational message for each type_spec pragma that the
@c compiler generates to implement a type_spec_constrained_pred pragma.

@c @sp 1
@c @item @code{--proc-size-statistics @var{filename}}
@c @findex --proc-size-statistics
@c Append information about the size of each procedure in the module in
@c terms of goals and variables to the end of the named file.

@c @sp 1
@c @item @code{--inst-statistics @var{filename}}
@c @findex --inst-statistics
@c Append a count of each kind of insts in the procedures in the module to
@c the end of the named file.

@c @sp 1
@c @item @code{--print-error-spec-id}
@c @findex --print-error-spec-id
@c After each error message is printed, print its id, which by convention
@c is the $pred of the code that constructs it.

@c @sp 1
@c @item @code{-T}
@c @itemx @code{--debug-types}
@c @findex -T
@c @findex --debug-types
@c Output detailed debugging traces of type checking. Effective only with
@c the right trace flags.

@c @sp 1
@c @item @code{--debug-types-pred-name @var{pred_or_func_name}}
@c @itemx --no-debug-types-pred-name
@c @findex --debug-types-pred-name
@c @findex --no-debug-types-pred-name
@c Output detailed debugging traces of type checking only for predicates
@c and functions named by one of these options.

@c @sp 1
@c @item @code{--debug-type-rep}
@c @findex --debug-type-rep
@c Output debugging traces of type representation choices.

@c @sp 1
@c @item @code{-N}
@c @itemx @code{--debug-modes}
@c @findex -N
@c @findex --debug-modes
@c Output debugging traces of the mode checking.

@c @sp 1
@c @item @code{--debug-modes-verbose}
@c @findex --debug-modes-verbose
@c Output detailed debugging traces of the mode checking.

@c @sp 1
@c @item @code{--debug-modes-minimal}
@c @findex --debug-modes-minimal
@c Output only minimal debugging traces of the mode checking.

@c @sp 1
@c @item @code{--debug-modes-statistics}
@c @findex --debug-modes-statistics
@c Output statistics after each step of mode checking.

@c @sp 1
@c @item @code{--no-debug-modes-delay-vars}
@c @findex --debug-modes-delay-vars
@c @findex --no-debug-modes-delay-vars
@c Output info about the variables involved in delayed goals.

@c @sp 1
@c @item @code{--no-debug-modes-goal-ids}
@c @findex --debug-modes-goal-ids
@c @findex --no-debug-modes-goal-ids
@c Output the id of the goal at all mode debug checkpoints.

@c @sp 1
@c @item @code{--debug-modes-pred-id @var{pred_id}}
@c @findex --debug-modes-pred-id
@c With @samp{--debug-modes}, restrict the debugging traces to the mode
@c checking of the predicate or function with the specified pred id.

@c @sp 1
@c @item @code{--debug-mode-constraints}
@c @findex --debug-mode-constraints
@c Output detailed debugging traces of the `--prop-mode-constraints'
@c option.

@c @sp 1
@c @item @code{--debug-determinism}
@c @itemx @code{--debug-det}
@c @findex --debug-determinism
@c @findex --debug-det
@c Output detailed debugging traces of determinism analysis.

@c @sp 1
@c @item @code{--debug-common-struct-preds @var{predids}}
@c @findex --debug-common-struct-preds
@c Limit common struct optimization to the preds with the given ids.

@c @sp 1
@c @item @code{--debug-closure}
@c @findex --debug-closure
@c Output detailed debugging traces of the closure analysis.

@c @sp 1
@c @item @code{--debug-termination}
@c @itemx @code{--debug-term}
@c @findex --debug-termination
@c @findex --debug-term
@c Output detailed debugging traces of the termination2 analysis.

@c @sp 1
@c @item @code{--debug-dead-proc-elim}
@c @findex --debug-dead-proc-elim
@c Output the needed-entity-map generated by dead procedure elimination.

@c @sp 1
@c @item @code{--debug-higher-order-specialization}
@c @findex --debug-higher-order-specialization
@c Output messages about the procedure specializations done by
@c higher_order.m.

@c @sp 1
@c @item @code{--debug-pd}
@c @findex --debug-pd
@c Output detailed debugging traces of the partial deduction and
@c deforestation process.

@c @sp 1
@c @item @code{--debug-indirect-reuse}
@c @findex --debug-indirect-reuse
@c Output detailed debugging traces of the indirect reuse pass of the
@c @samp{--structure-reuse} option.

@c @sp 1
@c @item @code{--debug-trail-usage}
@c @findex --debug-trail-usage
@c Output detailed debugging traces of the @samp{--analyse-trail-usage}
@c option.

@c @sp 1
@c @item @code{--debug-unneeded-code}
@c @findex --debug-unneeded-code
@c Print progress messages during the unneeded code elimination passes.

@c @sp 1
@c @item @code{--debug-unneeded-code-pred-name @var{predname}}
@c @itemx --no-debug-unneeded-code-pred-name
@c @findex --debug-unneeded-code-pred-name
@c @findex --no-debug-unneeded-code-pred-name
@c Print the definition of <predname> at the start of each pass of the
@c unneeded code elimination algorithm.

@c @sp 1
@c @item @code{--debug-mm-tabling-analysis}
@c @findex --debug-mm-tabling-analysis
@c There is no help text available.

@c @sp 1
@c @item @code{--debug-dep-par-conj @var{pred_id}}
@c @itemx --no-debug-dep-par-conj
@c @findex --debug-dep-par-conj
@c @findex --no-debug-dep-par-conj
@c Output detailed debugging traces during the dependent AND-parallelism
@c transformation of the predicate with the given predicate id. Effective
@c only with the right trace flags.

@c @sp 1
@c @item @code{--debug-liveness @var{pred_id}}
@c @findex --debug-liveness
@c Output detailed debugging traces of the liveness analysis of the
@c predicate with the given predicate id.

@c @sp 1
@c @item @code{--debug-stack-opt @var{pred-id}}
@c @findex --debug-stack-opt
@c Generate debug messages when performing stack slot optimization on the
@c predicate with the given id.

@c @sp 1
@c @item @code{--debug-code-gen-pred-id @var{pred_id}}
@c @findex --debug-code-gen-pred-id
@c Output detailed debugging traces of code generation for the predicate
@c or function with the given pred id. Effectively only with the right
@c trace flags.

@c @sp 1
@c @item @code{--debug-opt}
@c @findex --debug-opt
@c Output detailed debugging traces of the optimization process.

@c @sp 1
@c @item @code{--debug-opt-pred-id @var{pred_id}}
@c @itemx --no-debug-opt-pred-id
@c @findex --debug-opt-pred-id
@c @findex --no-debug-opt-pred-id
@c Output detailed debugging traces of the optimization process only for
@c the predicate/function with the specified pred id.

@c @sp 1
@c @item @code{--debug-opt-pred-name @var{name}}
@c @itemx --no-debug-opt-pred-name
@c @findex --debug-opt-pred-name
@c @findex --no-debug-opt-pred-name
@c Output detailed debugging traces of the optimization process only for
@c the predicate/function with the specified name.

@c @sp 1
@c @item @code{--debug-make}
@c @findex --debug-make
@c Output detailed debugging traces of the operation of the @samp{--make}
@c option.

@c @sp 1
@c @item @code{--debug-intermodule-analysis}
@c @findex --debug-intermodule-analysis
@c Output detailed debugging traces of the operation of the
@c @samp{--intermodule-analysis} option.

@c @end table

@c @node           Options that can help debug the compiler
@c @subsection     Options that can help debug the compiler
@c @cindex         Options that can help debug the compiler

@c @table @asis

@c @sp 1
@c @item @code{--table-debug}
@c @findex --table-debug
@c Enables the generation of code that helps to debug tabling primitives.

@c @sp 1
@c @item @code{--debug-class-init}
@c @findex --debug-class-init
@c In Java grades, generate code that causes a trace of class
@c initialization to be printed to the standard output when the
@c environment variable @env{MERCURY_DEBUG_CLASS_INIT} is defined.

@c @end table

@node           Dumping out internal compiler data structures
@subsection     Dumping out internal compiler data structures
@cindex         Dumping out internal compiler data structures

@table @asis

@sp 1
@item @code{-d @var{stage number or name}}
@itemx -d-
@itemx @code{--dump-hlds @var{stage number or name}}
@itemx --no-dump-hlds
@itemx @code{--hlds-dump @var{stage number or name}}
@itemx --no-hlds-dump
@findex -d
@findex -d-
@findex --dump-hlds
@findex --no-dump-hlds
@findex --hlds-dump
@findex --no-hlds-dump
Dump the HLDS (high level intermediate representation) after the
specified stage to @samp{module}.hlds_dump.@samp{num}-@samp{name}.
Stage numbers range from 1-599. Multiple dump options accumulate.

@c @sp 1
@c @item @code{--dump-hlds-pred-id @var{pred_id}}
@c @itemx --no-dump-hlds-pred-id
@c @findex --dump-hlds-pred-id
@c @findex --no-dump-hlds-pred-id
@c Dump the HLDS only of the predicate/function with the given pred id.

@sp 1
@item @code{--dump-hlds-pred-name @var{name}}
@itemx --no-dump-hlds-pred-name
@findex --dump-hlds-pred-name
@findex --no-dump-hlds-pred-name
Dump the HLDS only of the predicate/function with the given name.

@c @sp 1
@c @item @code{--dump-hlds-pred-name-order}
@c @findex --dump-hlds-pred-name-order
@c Dump the predicates in the HLDS ordered by name, not ordered by pred
@c id.

@c @sp 1
@c @item @code{--dump-hlds-spec-preds}
@c @findex --dump-hlds-spec-preds
@c With @samp{--dump-hlds}, dump the special (unify, compare, and index)
@c predicates not in pred-id order, but in alphabetical order by type
@c constructor.

@c @sp 1
@c @item @code{--dump-hlds-spec-preds-for @var{typename}}
@c @itemx --no-dump-hlds-spec-preds-for
@c @findex --dump-hlds-spec-preds-for
@c @findex --no-dump-hlds-spec-preds-for
@c Dump the special (unify, compare, and index) predicates only for the
@c types named by the (possibly multiple) occurrences of this option.

@c @sp 1
@c @item @code{-D @var{dump-alias}}
@c @itemx @code{--dump-hlds-alias @var{dump-alias}}
@c @findex -D
@c @findex --dump-hlds-alias
@c With @samp{--dump-hlds}, include extra detail in the dump. Each dump
@c alias is shorthand for a set of option letters. The list of aliases is
@c in handle_options.m.

@sp 1
@item @code{--dump-hlds-options @var{options}}
@findex --dump-hlds-options
With @samp{--dump-hlds}, include extra detail in the dump. Each type of
detail is included in the dump if its corresponding letter occurs in
the option argument (see the Mercury User's Guide for details).

@c @sp 1
@c @item @code{--dump-hlds-inst-limit @var{N}}
@c @findex --dump-hlds-inst-limit
@c Dump at most N insts in each inst table.

@c @sp 1
@c @item @code{--dump-hlds-inst-size-limit @var{N}}
@c @findex --dump-hlds-inst-size-limit
@c Dump insts in an inst table only if their size does not exceed N.

@c @sp 1
@c @item @code{--dump-hlds-file-suffix @var{suffix}}
@c @findex --dump-hlds-file-suffix
@c Append the given suffix to the names of the files created by the
@c @samp{--dump-hlds} option.

@sp 1
@item @code{--dump-same-hlds}
@findex --dump-same-hlds
Create a file for a HLDS stage even if the file notes only that this
stage is identical to the previously dumped HLDS stage.

@c @sp 1
@c @item @code{--dump-mlds @var{stage number or name}}
@c @itemx --no-dump-mlds
@c @itemx @code{--mlds-dump @var{stage number or name}}
@c @itemx --no-mlds-dump
@c @findex --dump-mlds
@c @findex --no-dump-mlds
@c @findex --mlds-dump
@c @findex --no-mlds-dump
@c Dump the MLDS (medium level intermediate representation) after the
@c specified stage, as C code, to
@c @samp{module}.c_dump.@samp{num}-@samp{name} and
@c @samp{module}.mih_dump.@samp{num}-@samp{name}. Stage numbers range from
@c 1-99. Multiple dump options accumulate. This option works only in MLDS
@c grades that target C.

@c @sp 1
@c @item @code{--dump-mlds-pred-name @var{pred or func name}}
@c @itemx --no-dump-mlds-pred-name
@c @findex --dump-mlds-pred-name
@c @findex --no-dump-mlds-pred-name
@c Dump the MLDS (medium level intermediate representation) of the
@c predicate or function with the specified name at the stages specified
@c by the @samp{--dump-mlds} option. The dump file will consist of the
@c predicates and functions named by all the occurrences of this option
@c (there may be more than one), and nothing else.

@c @sp 1
@c @item @code{--verbose-dump-mlds @var{stage number or name}}
@c @itemx --no-verbose-dump-mlds
@c @itemx @code{--verbose-mlds-dump @var{stage number or name}}
@c @itemx --no-verbose-mlds-dump
@c @findex --verbose-dump-mlds
@c @findex --no-verbose-dump-mlds
@c @findex --verbose-mlds-dump
@c @findex --no-verbose-mlds-dump
@c Dump the internal compiler representation of the MLDS, after the
@c specified stage, to @samp{module}.mlds_dump.@samp{num}-@samp{name}.
@c This option works in all MLDS grades.

@c @sp 1
@c @item @code{--dump-trace-counts @var{stage number or name}}
@c @itemx --no-dump-trace-counts
@c @findex --dump-trace-counts
@c @findex --no-dump-trace-counts
@c If the compiler was compiled with debugging enabled and is being run
@c with trace counting enabled, write out the trace counts file after the
@c specified stage to @samp{module}.trace_counts.@samp{num}-@samp{name}.
@c Stage numbers range from 1-599. Multiple dump options accumulate.

@c @sp 1
@c @item @code{--dump-options-file @var{output_file}}
@c @findex --dump-options-file
@c Dump the internal compiler representation of files named in
@c options-file options to output_file.

@end table

@node           Options intended for internal use by the compiler only
@subsection     Options intended for internal use by the compiler only
@cindex         Options intended for internal use by the compiler only

@table @asis

@c @sp 1
@c @item @code{--pre-implicit-parallelism-simplify}
@c @findex --pre-implicit-parallelism-simplify
@c Run the simplification pass before the implicit parallelism pass to
@c ensure that the HLDS more closely matches the feedback data.

@c @sp 1
@c @item @code{--no-type-layout}
@c @findex --type-layout
@c @findex --no-type-layout
@c Don't output type_ctor_layout structures or references to them. (The C
@c code must then be compiled with @code{-DNO_TYPE_LAYOUT}.)

@c @sp 1
@c @item @code{--det-copy-out}
@c @findex --det-copy-out
@c Specify whether to handle output arguments for det/semidet procedures
@c using return-by-value rather than pass-by-reference. This option is
@c effective only with @samp{--high-level-code}.

@c @sp 1
@c @item @code{--nondet-copy-out}
@c @findex --nondet-copy-out
@c Specify whether to handle output arguments for nondet procedures using
@c pass-by-value rather than pass-by-reference. This option is effective
@c only with @samp{--high-level-code}.

@c @sp 1
@c @item @code{--put-commit-in-own-func}
@c @findex --put-commit-in-own-func
@c Put each commit in its own C function. This option only affects the
@c MLDS back-ends. It is needed for the high-level C back-end, where
@c commits are implemented via @code{setjmp()/longjmp()}, since
@c @code{longjmp()} may clobber any non-volatile local vars in the
@c function that called @code{setjmp()}.

@c @sp 1
@c @item @code{--backend-foreign-languages @{c/c#/csharp/java@}}
@c @itemx --no-backend-foreign-languages
@c @findex --backend-foreign-languages
@c @findex --no-backend-foreign-languages
@c There is no help text available.

@c @sp 1
@c UNNAMED OPTION stack_trace
@c Generate the stack layout information required to do a stack trace.

@c @sp 1
@c @item @code{--basic-stack-layout}
@c @findex --basic-stack-layout
@c Generate the simple stack_layout structures required for stack traces.

@c @sp 1
@c @item @code{--agc-stack-layout}
@c @findex --agc-stack-layout
@c Generate the stack_layout structures required for accurate garbage
@c collection.

@c @sp 1
@c @item @code{--procid-stack-layout}
@c @findex --procid-stack-layout
@c Generate the stack_layout structures required for looking up procedure
@c identification information.

@c @sp 1
@c @item @code{--trace-stack-layout}
@c @findex --trace-stack-layout
@c Generate the stack_layout structures required for execution tracing.

@c @sp 1
@c @item @code{--body-typeinfo-liveness}
@c @findex --body-typeinfo-liveness
@c Ensure that whenever a variable whose type contains a type variable is
@c live, the type_info for that type variable is available.

@c @sp 1
@c @item @code{--can-compare-constants-as-ints}
@c @findex --can-compare-constants-as-ints
@c There is no help text available.

@c @sp 1
@c @item @code{--pretest-equality-cast-pointers}
@c @findex --pretest-equality-cast-pointers
@c There is no help text available.

@c @sp 1
@c @item @code{--delay-partial-instantiations}
@c @findex --delay-partial-instantiations
@c There is no help text available.

@c @sp 1
@c @item @code{--allow-defn-of-builtins}
@c @findex --allow-defn-of-builtins
@c Do not generate errors for definitions of builtin predicates. When a
@c new builtin is introduced, the installed compiler won't know about it,
@c and thus when it sees its declaration, it wants a definition, but when
@c the modified compiler is bootstrapped, it would normally generate an
@c error when it sees that very same definition in the library (usually in
@c builtin.m or private_builtin.m). When this option is set, it allows
@c such definitions. Once the modified compiler is installed on all
@c relevant machines, the option can be turned off again.

@c @sp 1
@c @item @code{--no-type-ctor-info}
@c @findex --type-ctor-info
@c @findex --no-type-ctor-info
@c Do not generate type_ctor_info structures. For measurement only; if you
@c turn this off, then you will not be able to link.

@c @sp 1
@c @item @code{--no-type-ctor-layout}
@c @findex --type-ctor-layout
@c @findex --no-type-ctor-layout
@c Do not generate type_ctor_layout structures. For measurement only; if
@c you turn this off, then you will not to be able to link.

@c @sp 1
@c @item @code{--no-type-ctor-functors}
@c @findex --type-ctor-functors
@c @findex --no-type-ctor-functors
@c Do not generate type_ctor_functors structures. For measurement only; if
@c you turn this off, then you will not to be able to link.

@c @sp 1
@c @item @code{--no-rtti-line-numbers}
@c @findex --rtti-line-numbers
@c @findex --no-rtti-line-numbers
@c Generate line number information in the RTTI when debugging is enabled.
@c For measurement only; if you turn this off, then the debugger may
@c dereference garbage pointers.

@c @sp 1
@c @item @code{--new-type-class-rtti}
@c @findex --new-type-class-rtti
@c Generate of new style static data structures for runtime information
@c about type classes. These are not yet used. When we add code to
@c generate the matching dynamic data structures and switch over to use
@c them, we will not need this option anymore.

@c @sp 1
@c NO_HELP OPTION use_mmsc_pneg
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION use_mmsc_cut
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-ite-fixed @var{num_words}}
@c @findex --size-region-ite-fixed
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-disj-fixed @var{num_words}}
@c @findex --size-region-disj-fixed
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-commit-fixed @var{num_words}}
@c @findex --size-region-commit-fixed
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-ite-protect @var{num_words}}
@c @findex --size-region-ite-protect
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-ite-snapshot @var{num_words}}
@c @findex --size-region-ite-snapshot
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-semi-disj-protect @var{num_words}}
@c @findex --size-region-semi-disj-protect
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-disj-snapshot @var{num_words}}
@c @findex --size-region-disj-snapshot
@c There is no help text available.

@c @sp 1
@c @item @code{--size-region-commit-entry @var{num_words}}
@c @findex --size-region-commit-entry
@c There is no help text available.

@c @sp 1
@c @item @code{--no-allow-multi-arm-switches}
@c @findex --allow-multi-arm-switches
@c @findex --no-allow-multi-arm-switches
@c Do not allow the compiler to generate switches in which one arm handles
@c more than one cons_id.

@c @sp 1
@c @item @code{--reclaim-heap-on-failure}
@c @findex --reclaim-heap-on-failure
@c @findex --no-reclaim-heap-on-failure
@c Combines the effect of the two options below.

@c @sp 1
@c @item @code{--no-reclaim-heap-on-semidet-failure}
@c @findex --reclaim-heap-on-semidet-failure
@c @findex --no-reclaim-heap-on-semidet-failure
@c Do not reclaim heap on backtracking in semidet code.

@c @sp 1
@c @item @code{--no-reclaim-heap-on-nondet-failure}
@c @findex --reclaim-heap-on-nondet-failure
@c @findex --no-reclaim-heap-on-nondet-failure
@c Do not reclaim heap on backtracking in nondet code.

@c @sp 1
@c NO_HELP OPTION max_specialized_do_call_closure
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION max_specialized_do_call_class_method
@c There is no help text available.

@c @sp 1
@c @item @code{--compare-specialization @var{N}}
@c @findex --compare-specialization
@c Generate quadratic instead of linear compare predicates for types with
@c up to N function symbols. Higher values of N lead to faster but also
@c bigger compare predicates.

@c @sp 1
@c NO_HELP OPTION chosen_stdlib_dir
@c There is no help text available.

@c @sp 1
@c UNNAMED OPTION default_globals
@c If set to 'yes', default_globals tells the main body of
@c handle_options.m that it is constructing the @emph{default} globals,
@c after the initial construction of the @emph{intended} globals failed.

@c @sp 1
@c @item @code{--local-module-id @var{XXX document me}}
@c @itemx --no-local-module-id
@c @findex --local-module-id
@c @findex --no-local-module-id
@c There is no help text available.

@c @sp 1
@c UNNAMED OPTION generate_item_version_numbers
@c This option is used to control output of version numbers in interface
@c files. It is implied by @samp{--smart-recompilation}, and cannot be set
@c explicitly by the user. Even if this option is set to ``yes'', version
@c numbers may have been disabled with
@c io_set_disable_generate_item_version_numbers. Before using the value of
@c this option, call io_get_disable_generate_item_version_numbers to see
@c whether this has been done.

@sp 1
@item @code{--generate-mmc-make-module-dependencies}
@itemx @code{--generate-mmc-deps}
@findex --generate-mmc-make-module-dependencies
@findex --generate-mmc-deps
Generate dependencies for use by @code{mmc --make} even when using
@code{mmake}. This is recommended when building a library for
installation.

@c @sp 1
@c NO_HELP OPTION optopt_use_static_ground_floats
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION optopt_use_static_ground_int64s
@c There is no help text available.

@c @sp 1
@c NO_HELP OPTION optopt_use_static_code_addresses
@c There is no help text available.

@end table

@node           Now-unused former options kept for compatibility
@section        Now-unused former options kept for compatibility
@cindex         Now-unused former options kept for compatibility

@table @asis

@sp 1
@item @code{--no-ansi-c}
@findex --ansi-c
@findex --no-ansi-c
This option is deprecated and does not have any effect.

@c @sp 1
@c @item @code{--cflags-for-ansi @var{flags}}
@c @findex --cflags-for-ansi
@c There is no help text available.

@c @sp 1
@c @item @code{--install-command-dir-option @var{flag}}
@c @findex --install-command-dir-option
@c There is no help text available.

@sp 1
@item @code{--everything-in-one-c-function}
@itemx @code{--everything-in-one-C-function}
@findex --everything-in-one-c-function
@findex --everything-in-one-C-function
This option is deprecated and does not have any effect.

@end table

@c INCLUDE_HELP_TEXT_END

@c ----------------------------------------------------------------------------

@node Environment
@chapter Environment variables
@cindex Environment variables
@cindex Variables, environment
@cindex Directories
@cindex Search path

The various components of the Mercury compilation environment
will use the following environment variables if they are set.
There should be little need to use most of these,
because the default values will generally work fine.

@menu
* Environment variables affecting the Mercury compiler::
* Environment variables affecting the Mercury debugger::
* Environment variables affecting the Mercury runtime system::
@end menu

@node Environment variables affecting the Mercury compiler
@section Environment variables affecting the Mercury compiler
@cindex Environment variables affecting the Mercury compiler

@table @code

@item MERCURY_COMPILER
@vindex MERCURY_COMPILER
Filename of the Mercury compiler.

@sp 1
@item MERCURY_MKINIT
@vindex MERCURY_MKINIT
Filename of the program to create the @file{*_init.c} file.

@sp 1
@item MERCURY_DEFAULT_GRADE
@vindex MERCURY_DEFAULT_GRADE
The default grade to use if no @samp{--grade} option is specified.

@sp 1
@item MERCURY_STDLIB_DIR
@vindex MERCURY_STDLIB_DIR
The directory containing the installed Mercury standard library.
@samp{--mercury-stdlib-dir} options passed to the @samp{mmc}, @samp{ml},
@samp{mgnuc} and @samp{c2init} scripts override the setting of
the @env{MERCURY_STDLIB_DIR} environment variable.

@sp 1
@item MERCURY_COLOR_SCHEME
@vindex MERCURY_COLOR_SCHEME
The specification of the map from color roles to color shades
that the Mercury compiler should use in diagnostics.
For the details of the syntax, semantics, and effects of such specifications,
please see @ref{Color schemes}.

@sp 1
@item MERCURY_ENABLE_COLOR
@vindex MERCURY_ENABLE_COLOR
This environment variable should contain either
@samp{always} or @samp{1}
to enable the use of color in diagnostics by the Mercury compiler,
or either @samp{never} or @samp{0}
to disable it.
Note however that this effect can be overruled by command line options;
for the details, please see @ref{Enabling the use of color}.

@sp 1
@item NO_COLOR
@vindex NO_COLOR
This environment variable being set to any nonempty string
will disable the use of color in diagnostics by the Mercury compiler.
Note however that this effect can be overruled by command line options
and by the @samp{MERCURY_ENABLE_COLOR} environment variable;
for the details, please see @ref{Enabling the use of color}.

@end table

@node Environment variables affecting the Mercury debugger
@section Environment variables affecting the Mercury debugger
@cindex Environment variables affecting the Mercury debugger

@table @code

@item MERCURY_DEBUGGER_INIT
@vindex MERCURY_DEBUGGER_INIT
Name of a file that contains startup commands for the Mercury debugger.
This file should contain documentation for the debugger command set,
and possibly a set of default aliases.

@end table

@node Environment variables affecting the Mercury runtime system
@section Environment variables affecting the Mercury runtime system
@cindex Environment variables affecting the Mercury runtime system

@table @code

@item MERCURY_OPTIONS
@vindex MERCURY_OPTIONS
A list of options for the Mercury runtime system,
which gets linked into every Mercury program.
The options given in this environment variable apply to every program;
the options given in an environment variable
whose name is of the form @env{MERCURY_OPTIONS_@var{progname}}
apply only to programs named @var{progname}.
Note that @var{progname} does @emph{not} include the @file{.exe} extension
on those systems (e.g. Windows) that use it.
Options may also be set for a particular executable at compile time
by passing @samp{--runtime-flags} options
to the invocations of @samp{ml} and @samp{c2init} which create that executable.
These options are processed first,
followed by those in @env{MERCURY_OPTIONS},
with the options in @env{MERCURY_OPTIONS_@var{progname}} being processed last.

The Mercury runtime system accepts the following options.

@sp 1
@table @code

@c @item -a
@c If given force a redo when the entry point procedure succeeds;
@c this is useful for benchmarking when this procedure is model_non.

@c @item -c
@c Check how much of the space reserved for local variables
@c by mercury_engine.c was actually used.

@item -C @var{size}
@findex -C (runtime option)
Tells the runtime system to optimize the locations of the starts of the various
data areas for a primary data cache of @var{size} kilobytes.
The optimization consists of arranging the starts of the areas to differ as
much as possible modulo this size.

@c @item -d @var{debugflag}
@c @findex -d (runtime option)
@c Sets a low-level debugging flag.
@c These flags are consulted only if
@c the runtime was compiled with the appropriate definitions;
@c most of them depend on MR_LOWLEVEL_DEBUG.
@c For the meanings of the debugflag parameters,
@c see process_options() in mercury_wrapper.c
@c and do a grep for the corresponding variable.

@sp 1
@item -D @var{debugger}
@findex -D (runtime option)
Enables execution tracing of the program,
via the internal debugger if @var{debugger} is @samp{i}
and via the external debugger if @var{debugger} is @samp{e}.
(The mdb script works by including @samp{-Di} in MERCURY_OPTIONS.)
The external debugger is not yet available.

@sp 1
@item -p
@findex -p (runtime option)
Disables profiling.
This only has an effect if the executable was built in a profiling grade.

@sp 1
@item -P @var{num}
@findex -P (runtime option)
Tells the runtime system to create @var{num} threads for executing Mercury code
if the program was built in a parallel low-level C grade.
The Mercury runtime attempts to automatically determine this value if support
is available from the operating system.
If it cannot or support is unavailable it defaults to @samp{1}.

@sp 1
@item --max-engines @var{num}
@findex --max-engines (runtime option)
Tells the runtime system to allow a maximum of @var{num} POSIX threads, each
with its own Mercury engine.
This only affects programs in low-level C parallel grades.

@sp 1
@item --max-contexts-per-thread @var{num}
@findex --max-contexts-per-thread (runtime option)
Tells the runtime system to create at most @var{num} contexts per
POSIX thread for parallel execution.
Each context created requires a set of stacks, setting this value too high
can consume excess memory.
This only has an effect if the executable was built in a low-level C parallel
grade.

@c @sp 1
@c @item --num-contexts-per-lc-per-thread @var{num}
@c @findex --num-contexts-per-lc-per-thread (runtime option)
@c Tells the runtime system to use @var{num} contexts per POSIX thread
@c to handle each loop controlled loop.
@c This only has an effect if the executable
@c was built in a low-level C parallel c grade.
@c
@c @sp 1
@c @item --runtime-granularity-wsdeque-length-factor @var{factor}
@c @findex --runtime-granularity-wsdeque-length-factor (runtime option)
@c Configures the runtime granularity control method not to create sparks if a
@c context's local spark wsdeque is longer than
@c @math{ @var{factor} * @var{num_engines}}.
@c @var{num_engines} is configured with the @samp{-P} runtime option.
@c
@c @sp 1
@c @item --profile-parallel-execution
@c @findex --profile-parallel-execution
@c Tells the runtime to collect and write out parallel execution profiling
@c information to a file named @file{parallel_execution_profile.txt}.
@c This only has an effect if the executable was built in a low-level C,
@c parallel, threadscope grade.
@c
@c @sp 1
@c @item --threadscope-use-tsc
@c @findex --threadscope-use-tsc
@c Requests that the runtime's threadscope support use the CPU's time stamp
@c counter (TSC) to measure time rather than gettimeofday().  The TSC may
@c not always be available so the runtime may still use gettimeofday() even
@c with this option.

@sp 1
@item --thread-pinning
@findex --thread-pinning (runtime option)
Request that the runtime system attempts to pin Mercury engines (POSIX threads)
to CPU cores/hardware threads.
This only has an effect if the executable was built in a parallel low-level C
grade.
This is disabled by default but may be enabled by default in the future.
@c In case this is enabled by default the following comment is relevant.
@c This is disabled by default
@c unless @samp{-P @var{num}} is not specified and the
@c runtime system is able to detect the number of processors enabled by the
@c operating system.

@c @item -r @var{num}
@c @findex -r (runtime option)
@c Repeats execution of the entry point procedure @var{num} times,
@c to enable accurate timing.

@c @item -t
@c @findex -t (runtime option)
@c Tells the runtime system to measure the time taken by
@c the (required number of repetitions of) the program,
@c and to print the result of this time measurement.

@sp 1
@item -T @var{time-method}
@findex -T (runtime option)
If the executable was compiled in a grade that includes time profiling,
this option specifies what time is counted in the profile.
@var{time-method} must have one of the following values:

@sp 1
@table @code
@item @samp{r}
Profile real (elapsed) time (using ITIMER_REAL).
@item @samp{p}
Profile user time plus system time (using ITIMER_PROF).
This is the default.
@item @samp{v}
Profile user time (using ITIMER_VIRTUAL).
@end table

@sp 1
Currently, only the @samp{-Tr} option works on Cygwin; on that
platform it is the default.
@c the above sentence is duplicated above

@c @item -x
@c @findex -x (runtime option)
@c Tells the Boehm collector not to perform any garbage collection.

@sp 1
@item --heap-size @var{size}
@findex --heap-size (runtime option)
Sets the size of the heap to @var{size} kilobytes.

@sp 1
@item --heap-size-kwords @var{size}
@findex --heap-size-kwords (runtime option)
Sets the size of the heap to @var{size} kilobytes multiplied by the word size
in bytes.

@sp 1
@item --detstack-size @var{size}
@findex --detstack-size (runtime option)
Sets the size of the det stack to @var{size} kilobytes.

@sp 1
@item --detstack-size-kwords @var{size}
@findex --detstack-size-kwords (runtime option)
Sets the size of the det stack to @var{size} kilobytes
multiplied by the word size in bytes.

@sp 1
@item --nondetstack-size @var{size}
@findex --nondetstack-size (runtime option)
Sets the size of the nondet stack to @var{size} kilobytes.

@sp 1
@item --nondetstack-size-kwords @var{size}
@findex --nondetstack-size-kwords (runtime option)
Sets the size of the nondet stack to @var{size} kilobytes multiplied by the
word size in bytes.

@sp 1
@item --small-detstack-size @var{size}
@findex --small-detstack-size (runtime option)
Sets the size of the det stack used for executing parallel conjunctions
to @var{size} kilobytes.
The regular det stack size must be equal or greater.

@sp 1
@item --small-detstack-size-kwords @var{size}
@findex --small-detstack-size-kwords (runtime option)
Sets the size of the det stack used for executing parallel conjunctions to
@var{size} kilobytes multiplied by the word size in bytes.
The regular det stack size must be equal or greater.

@sp 1
@item --small-nondetstack-size @var{size}
@findex --small-nondetstack-size (runtime option)
Sets the size of the nondet stack for executing parallel computations
to @var{size} kilobytes.
The regular nondet stack size must be equal or greater.

@sp 1
@item --small-nondetstack-size-kwords @var{size}
@findex --small-nondetstack-size-kwords (runtime option)
Sets the size of the nondet stack for executing parallel computations
to @var{size} kilobytes
multiplied by the word size in bytes.
The regular nondet stack size must be equal or greater.

@sp 1
@item --solutions-heap-size @var{size}
@findex --solutions-heap-size (runtime option)
Sets the size of the solutions heap to @var{size} kilobytes.

@sp 1
@item --solutions-heap-size-kwords @var{size}
@findex --solutions-heap-size-kwords (runtime option)
Sets the size of the solutions heap to @var{size} kilobytes
multiplied by the word size in bytes.

@c These two options are commented out as we support a fixed size tail ONLY
@c for developers.
@c
@c @sp 1
@c @item --trail-size @var{size}
@c @findex --trail-size (runtime option)
@c @cindex Trail size
@c Sets the size of the trail to @var{size} kilobytes.
@c This option is ignored in grades that use trail segments.

@c @sp 1
@c @item --trail-size-kwords @var{size}
@c @findex --trail-size-kwords (runtime option)
@c @cindex Trail size
@c Sets the size of the trail to @var{size} kilobytes
@c multiplied by the word size in bytes.
@c This option is ignored in grades that use trail segments.

@sp 1
@item --trail-segment-size @var{size}
@findex --trail-segment-size (runtime option)
@cindex Trail size
Sets the size of each trail segment to be @var{size} kilobytes.
This option is ignored in grades that do not use a trail.

@sp 1
@item --trail-segment-size-kwords @var{size}
@findex --trail-segment-size-kwords (runtime option)
@cindex Trail size
Set the size of each trail segment to be @var{size} kilobytes multiplied by the
words size in bytes.
This option is ignored in grades that do not use trail.

@sp 1
@item --genstack-size @var{size}
@findex --genstack-size (runtime option)
@cindex Generator stack size
Sets the size of the generator stack to @var{size} kilobytes.

@sp 1
@item --genstack-size-kwords @var{size}
@findex --genstack-size-kwords (runtime option)
@cindex Generator stack size
Sets the size of the generator stack to @var{size} kilobytes
multiplied by the word size in bytes.

@sp 1
@item --cutstack-size @var{size}
@findex --cutstack-size (runtime option)
@cindex Cut stack size
Sets the size of the cut stack to @var{size} kilobytes.

@sp 1
@item --cutstack-size-kwords @var{size}
@findex --cutstack-size-kwords (runtime option)
@cindex Cut stack size
Sets the size of the cut stack to @var{size} kilobytes
multiplied by the word size in bytes.

@sp 1
@item --pnegstack-size @var{size}
@findex --pnegstack-size (runtime option)
@cindex Pneg stack size
Sets the size of the pneg stack to @var{size} kilobytes.

@sp 1
@item --pnegstack-size-kwords @var{size}
@findex --pnegstack-size-kwords (runtime option)
@cindex Pneg stack size
Sets the size of the pneg stack to @var{size} kilobytes multiplied by the word
size in bytes.

@c @sp 1
@c @item --heap-redzone-size @var{size}
@c @findex --heap-redzone-size (runtime option)
@c Sets the size of the redzone on the heap to @var{size} kilobytes.

@c @sp 1
@c @item --heap-redzone-size-kwords @var{size}
@c @findex --heap-redzone-size-kwords (runtime option)
@c Sets the size of the redzone on the heap to @var{size} kilobytes
@c multiplied by the word size in bytes.

@c @sp 1
@c @item --detstack-redzone-size @var{size}
@c @findex --detstack-redzone-size (runtime option)
@c Sets the size of the redzone on the det stack to @var{size} kilobytes.

@c @sp 1
@c @item --detstack-redzone-size-kwords @var{size}
@c @findex --detstack-redzone-size-kwords (runtime option)
@c Sets the size of the redzone on the det stack to @var{size} kilobytes
@c multiplied by the word size in bytes.

@c @sp 1
@c @item --nondetstack-redzone-size @var{size}
@c @findex --nondetstack-redzone-size (runtime option)
@c Sets the size of the redzone on the nondet stack to @var{size} kilobytes.

@c @sp 1
@c @item --nondetstack-redzone-size-kwords @var{size}
@c @findex --nondetstack-redzone-size-kwords (runtime option)
@c Sets the size of the redzone on the nondet stack to @var{size} kilobytes
@c multiplied by the word size in bytes.

@c @sp 1
@c @item --trail-redzone-size @var{size}
@c @findex --trail-redzone-size (runtime option)
@c Sets the size of the redzone on the trail to @var{size} kilobytes.

@c @sp 1
@c @item --trail-redzone-size-kwords @var{size}
@c @findex --trail-redzone-size-kwords (runtime option)
@c Sets the size of the redzone on the trail to @var{size} kilobytes
@c multiplied by the word size in bytes.

@sp 1
@item -i @var{filename}
@itemx --mdb-in @var{filename}
@findex -i (runtime option)
@findex --mdb-in (runtime option)
Read debugger input from the file or device specified by @var{filename},
rather than from standard input.

@sp 1
@item -o @var{filename}
@itemx --mdb-out @var{filename}
Print debugger output to the file or device specified by @var{filename},
@findex -o (runtime option)
@findex --mdb-out (runtime option)
rather than to standard output.

@sp 1
@item -e @var{filename}
@itemx --mdb-err @var{filename}
@findex -e (runtime option)
@findex --mdb-err (runtime option)
Print debugger error messages
to the file or device specified by @var{filename},
rather than to standard error.

@sp 1
@item -m @var{filename}
@itemx --mdb-tty @var{filename}
@findex -m (runtime option)
@findex --mdb-tty (runtime option)
Redirect all three debugger I/O streams
--- input, output, and error messages ---
to the file or device specified by @var{filename}.

@c --mdb-in-window is for use only by the mdb script, so it is
@c not documented here.

@c The documentation of --mdb-benchmark-silent is commented out because
@c this option is intended only for implementors.

@c @sp 1
@c @item --mdb-benchmark-silent
@c @findex --mdb-benchmark-silent (runtime option)
@c Redirect all output, including error messages, to /dev/null.
@c This is useful for benchmarking.

@sp 1
@item --debug-threads
@findex --debug-threads (runtime option)
@cindex Debugging Threads
@cindex Threads, Debugging

Output information to the standard error stream about the locking and
unlocking occurring in each module which has been compiled with the C macro
symbol @samp{MR_DEBUG_THREADS} defined.

@sp 1
@item --tabling-statistics
@findex --tabling-statistics (runtime option)
Prints statistics about tabling when the program terminates.

@sp 1
@item --mem-usage-report @var{prefix}
@findex --mem-usage-report (runtime option)
Print a report about the memory usage of the program when the program
terminates.
The report is printed to a new file named @file{.mem_usage_report@var{N}}
for the lowest value of @var{N} (up to 99)
which doesn't overwrite an existing file.
Note that this capability is not supported on all operating systems.

@sp 1
@item --trace-count
@findex --trace-count (runtime option)
When the program terminates, generate a trace counts file listing all the
debugger events the program executed, if the program actually executed any
debugger events.
If @env{MERCURY_OPTIONS} includes the
@samp{--trace-count-output-file @var{filename}} option, then the trace counts
are put into the file @var{filename}.
If @env{MERCURY_OPTIONS} includes
the @samp{--trace-count-summary-file @var{basename}} option, then the trace
counts are put either in the file @var{basename} (if it does not exist), or in
@var{basename.N} for the lowest value of the integer @var{N} which doesn't
overwrite an existing file.
(There is a limit on the value of @var{N}; see the option
@samp{--trace-count-summary-max} below.)
If neither option is specified, then the output will be written to a file with
the prefix @samp{.mercury_trace_counts} and a unique suffix.
Specifying both options is an error.

@sp 1
@item --coverage-test
@findex --coverage-test (runtime option)
Act as the @samp{--trace-count} option, except include @emph{all} debugger
events in the output, even the ones that were not executed.

@sp 1
@item --trace-count-if-exec @var{prog}
@findex --trace-count-if-exec (runtime option)
Act as the @samp{--trace-count} option, but only if the executable is named
@var{prog} (excluding any @file{.exe} extension on Windows).
This is to allow the collection of trace count information from only one
Mercury program even if several Mercury programs are executed with the same
setting of @env{MERCURY_OPTIONS}.

@sp 1
@item --coverage-test-if-exec @var{prog}
@findex --coverage-test-if-exec (runtime option)
Act as the @samp{--coverage-test} option, but only if the executable is named
@var{prog} (excluding any @file{.exe} extension on Windows).
This is to allow the collection of coverage test information from only one
Mercury program even if several Mercury programs are executed with the same
setting of @env{MERCURY_OPTIONS}.

@sp 1
@item --trace-count-output-file @var{filename}
@findex --trace-count-output-file (runtime option)
Documented alongside the @samp{--trace-count} option.

@sp 1
@item --trace-count-summary-file @var{basename}
@findex --trace-count-summary-file (runtime option)
Documented alongside the @samp{--trace-count} option.

@sp 1
@item --trace-count-summary-max @var{N}
@findex --trace-count-summary-max (runtime option)
If @env{MERCURY_OPTIONS} includes both
the @samp{--trace-count option}
(or one of the other options that imply @samp{--trace-count})
and the @samp{--trace-count-summary-file @var{basename}} option,
then the generated program will put the generated trace counts
either in @var{basename} (if it does not exist),
or in @var{basename.N} for the lowest value of the integer @var{N}
which doesn't overwrite an existing file.
The @samp{--trace-count-summary-max} option specifies the maximum value of this
@var{N}.
When this maximum is reached,
the program will invoke the @samp{mtc_union} program
to summarize @var{basename}, @var{basename.1}, @dots{} @var{basename.N}
into a single file @var{basename}, and delete the rest.
By imposing a limit on the total number (and hence indirectly on the total
size) of these trace count files, this mechanism allows the gathering of trace
count information from a large number of program runs.
The default maximum value of @var{N} is 20.

@c @sp 1
@c @item --trace-count-summary-cmd=@var{cmd}
@c @findex --trace-count-summary-cmd=@var{cmd}
@c This option specifies the command to use instead of mtc_union
@c for computing trace counts summaries, as shown for the above option.
@c This documentation is commented out
@c because the option is for implementors only.
@c The intended use is to override the installed version of mtc_union
@c with the version in a specific workspace, which may be more recent.

@c @sp 1
@c @item --deep-procrep-file
@c @findex --deep-procrep-file
@c This option, which is meaningful only in deep profiling grades,
@c asks that every Deep.data file being generated should be accompanied by
@c a Deep.procrep file that contains a representation of the program that
@c generated it.
@c This documentation is commented out
@c because procedure representations are not yet used.

@c @sp 1
@c @item --deep-random-write=@var{N}
@c @findex --deep-random-write=@var{N}
@c This option, which is meaningful only in deep profiling grades,
@c asks that Deep.data files (and Deep.procrep files) should be generated
@c only if by processes whose process id is evenly divisible by @var{N}.
@c This documentation is commented out because it is only for use by the
@c bootcheck script (to reduce the time taken for a bootcheck while still
@c testing the code writing out deep profiling data).

@sp 1
@item --deep-std-name
@findex --deep-std-name
This option, which is meaningful only in deep profiling grades,
asks deep profiling data to be stored
in files named @code{Deep.data} and @code{Deep.procrep}.
The default is that the runtime system puts such data
into files whose names follow the pattern
@code{@var{progname}_on_@var{date}_at_@var{time}.data} and
@code{@var{progname}_on_@var{date}_at_@var{time}.procrep} respectively.

@sp 1
@item --boehm-gc-free-space-divisor @var{N}
@findex --boehm-gc-free-space-divisor (runtime option)
This option sets the value of the free space divisor in the Boehm garbage
collector to @var{N}.
It is meaningful only when using the Boehm garbage collector.
The default value is 3. Increasing its value will reduce
heap space but increase collection time.
See the Boehm GC documentation for details.

@sp 1
@item --boehm-gc-calc-time
@findex --boehm-gc-calc-time (runtime option)
This option enables code in the Boehm garbage collector to calculate
the time spent doing garbage collection so far.
Its only effect is to enable the @samp{report_stats} predicate
in the @samp{benchmarking} module of the standard library
to report this information.

@sp 1
@item --fp-rounding-mode @var{mode}
@findex --fp-rounding-mode (runtime option)
Set the rounding mode for floating point operations to @var{mode}.
Recognised modes are @samp{downward}, @samp{upward}, @samp{to_nearest}
and @samp{toward_zero}.  Exactly what modes are available and even
if it is possible to set the rounding mode is system dependent.

@end table

@end table

@c ----------------------------------------------------------------------------

@node Diagnostic output
@chapter Diagnostic output
@cindex Diagnostic output

Mercury's strong type-, mode-, and determinism systems
impose strict requirements on Mercury programs.
These systems allow the compiler to guarantee
that it will catch many of the most frequent kinds of errors
that programmers tend to make.
This improves not just program reliability,
but also programmer productivity,
since finding and fixing a bug is much easier
if the compiler hands you the location
of at least one part of the program involved in the error
on a silver platter.
However, it also means that a Mercury programmer
will typically have to see and act upon
more error and warning messages (diagnostics)
than programmers who write code in less strict languages.
This is why the compiler tries hard
to make each diagnostic as usable, informative and clear as it can.

@menu
* Verbose vs nonverbose messages::  Controlling whether explanations
                                    are printed.
* Ordering diagnostics::            Focusing on errors in one part of a module.
* Color schemes::                   Specifying what colors to use
                                    in diagnostics.
* Enabling the use of color::       Specifying whether to use colors
                                    in diagnostics.
@end menu

@node Verbose vs nonverbose messages
@section Verbose vs nonverbose messages
@cindex Verbosity
@cindex Verbose diagnostics

Making a diagnostic sufficiently informative for programmers new to Mercury
does in some cases require including a significant amount of explanation.
On the other hand, such explanations are not needed by programmers
who are already familiar with the issues involved,
and indeed for them, such explanations are usually nothing more than clutter.
This is why the Mercury compiler splits such error messages into two parts.
The first part just reports the facts specific to the error being reported.
The second part,
which is intended specifically to help programmers new to Mercury,
is a generic explanation of the background needed to understand the first part.
The first part is always printed,
while the second part is printed
only if the programmer asks for verbose error messages.
This can be done using the @samp{--verbose-error-messages} compiler option.
which can be abbreviated to just @samp{-E}.
If a compiler invocation prints any diagnostics that have a verbose component
that is not printed because the user has not asked for it,
the compiler will print the reminder about this fact:
@samp{For more information, recompile with `-E'.}

@node Ordering diagnostics
@section Ordering diagnostics
@cindex Ordering diagnostics

Normally, the compiler prints all the diagnostics for a module together,
in ascending order of context.
(With the exception of Mercury modules whose source files
use the @samp{source_file} pragma and/or the @samp{#@var{line}} directive,
this means that messages for lower numbered lines are printed
before messages for higher numbered lines.)

Sometimes, the output will @emph{look} unsorted
without actually @emph{being} unsorted.
This can happen because some diagnostics
report an inconsistency between two or more parts of the program.
Such diagnostics will contain one component for each such part,
and each component's text about that part
will have before it the context (filename and line number) of that part.
The sorting of diagnostics operates on
just the first context in each diagnostic;
any later contexts are ignored.

However, there are some situations in which
the compiler does indeed intentionally deviate from the above default.

One such situation occurs when
the programmer specifies the @samp{-v} option,
which asks for verbose compiler output.
In such cases, the compiler will print progress messages that specify
which phase of compilation the compiler is about to start,
and if that phase can find errors in the program,
it will print the diagnostics for the errors it finds
@emph{before} it goes on to the next phase.

The programmer can ask for the usual ordering of diagnostics
to be reversed by giving the @samp{--reverse-error-order} option.
This options makes things easier for programmers
when they want to work on the last errors in a file first.
This can be a good idea for example
if the module you are working on (e.g. by rearranging a data structure)
has its primitive operations towards the end of the module,
and you think the fixes needed to these primitives
will require changes to their signatures.
In such cases, fixing the lowest level primitives first
allows you to fix the originally reported errors for higher level operations
at the same time as you update their calls to the lower level primitives,
and reversing the order of the diagnostics
allows you to get to those errors for the tail end of the file
without having to wade through the errors for the code above.

The compiler also supports a more general mechanism
for allowing programmers to focus on fixing errors
in a particular part of the program first.
This mechanism is the @samp{--limit-error-contexts} compiler option.
This option has as its argument a comma-separated list of line number ranges.
It tells the compiler to print only diagnostics
that contain one or more contexts that fall into one of these ranges.
(A printed diagnostic
may contain some contexts that fall outside all these ranges,
as long as it has at least one context that falls inside.)
@c Actually it may have all its contexts fall outside these ranges,
@c as long as one either has a context that falls inside,
@c OR has no context at all.
@c However, I (zs) think that all the error_specs we generate
@c that contain more one component
@c *do* specify a context for every component,
@c so this distinction should not matter for users.
If a compiler invocation has this option specified
but all the diagnostics it would print in its absence
are held back by this option,
it will print a reminder about this fact.

@node Color schemes
@section Color schemes
@cindex Color schemes

The compiler tries to make diagnostics usable more quickly
by using color to direct people's attention
to the most relevant parts of diagnostics.

The compiler uses colors for the following five purposes.
We must explain these first,
before we can explain @emph{color schemes},
which are simple mappings from purposes (which we also call color @emph{roles})
to actual shades of color.
@table @asis
@item @samp{subject}
The compiler uses the @samp{subject} color
for the entity that the diagnostic is about.
Examples of such entities include
a specific variable, a specific type, or a specific predicate.
@item @samp{incorrect}
The compiler uses the @samp{incorrect} color
to emphasize either
@emph{the description} of what is wrong with the subject entity,
or @emph{the property} of the subject entity that is wrong.
@item @samp{correct}
The compiler uses the @samp{correct} color
to emphasize the expected property of the subject entity,
where that differs from its actual property.
For example, when a call passes an argument of the wrong type,
it will show the argument's actual type using the @samp{incorrect} color,
and the expected type using the @samp{correct} color.
It does this because the type is far more likely to be wrong in the call
than in the declaration of the called predicate or function.
(Of course, situations do sometimes occur
in which it is the type in the declaration that is wrong.)
@item @samp{inconsistent}
The compiler uses the @samp{inconsistent} color
when it knows that two parts of the code are inconsistent with each other,
but neither part is a priori more likely to be wrong than the other.
For example, when unifying two values of different types,
the compiler uses this color when printing the type of both values;
the compiler knows that in all likelyhood,
one type is correct and one is incorrect,
but it does not know which is which.
@item @samp{hint}
The compiler uses the @samp{hint} color when it reports observations
that may or may not explain the root of the problem it reports,
but which are worth looking into.
For example, when it reports that two actual arguments of a call
have types that do not match the types of the corresponding arguments
in the declaration of the callee,
it may give a hint that each of those actual arguments
do in fact each match the type of an argument in the callee,
just not the ones in the right positions,
implying that the actual problem may be
passing the right arguments in the wrong order.
@end table

Programmers can specify the colors
they want the compiler to use for each purpose
either by setting the environment variable @samp{MERCURY_COLOR_SCHEME}
to a string (let's call it @var{ColorScheme}),
or by specifying the compiler option @samp{--color-scheme @var{ColorScheme}}.
In both cases, @var{ColorScheme} can be either

@itemize
@item
the name of a color scheme built into the Mercury compiler, or
@item
the assignment of specific colors
for the roles that colors can play in its diagnostics.
@end itemize

The compiler currently has the following six builtin color schemes:
@itemize
@item @samp{darkmode}
@item @samp{darkmode256}
@item @samp{darkmode16}
@item @samp{lightmode}
@item @samp{lightmode256}
@item @samp{lightmode16}
@end itemize
The ``mode'' in each name is optional,
meaning that e.g. @samp{dark} names the same color scheme as @samp{darkmode}.

The schemes whose names contain ``dark''
are intended to be used on terminal screens with dark backgrounds
(including black backgrounds).
The schemes whose names contain ``light''
are intended to be used on terminal screens with light backgrounds
(including white backgrounds).

@itemize
@item
The schemes ending without numbers use 24-bit RGB colors,
which your terminal or terminal emulator @emph{probably} supports.
@item
The schemes ending in ``256'' use
the colors listed in the 8-bit color section under
@samp{https://en.wikipedia.org/wiki/ANSI_escape_code#Colors},
which your terminal or terminal emulator
is @emph{virtually certain} to support.
@item
The schemes ending in ``16'' use
the first 16 color slots listed in that 8-bit color table.
These 16 color slots differ from the other 240 colors in that table
in that most terminal emulators allow users
to select the actual colors that go into those slots.
This means that output that uses color schemes ending in ``16''
may look different on terminals with different color palette settings,
and will match the intended look only with the default color palette.
(The builtin color schemes ending in ``256''
avoid using these reassignable color slots.)
@end itemize

The other way to specify a color scheme
is to directly specify the colors you want the compiler to use
using a string such as
@samp{specified@@subject=87:correct=40:incorrect=203:inconsistent=171:hint=226}.
The rules for this form of color scheme specification are as follows.

@itemize
@item
The string must start with the string @samp{specified@@}.
@item
The rest of the string must not contain any white space,
but must consist of a colon-separated list
of one or more color assignments.
@item
Each color assignment must have the form @samp{@var{Role}=@var{Color}},
which assigns the given color to the given role.
@item
Each @var{Role} must be one of the five strings
@samp{subject},
@samp{correct},
@samp{incorrect},
@samp{inconsistent}, and
@samp{hint}.
@item
Each @var{Color} must have of the following two forms.
    @itemize
    @item
    The first form is a decimal integer in the range 0 to 255 (both inclusive).
    This selects a slot in the table in the 8-bit color section of
    @samp{https://en.wikipedia.org/wiki/ANSI_escape_code#Colors}.
    The caveat mentioned above about colors 0 to 15 apply here as well:
    in most terminal emulators, these slots are reassignable,
    so specifying one of these slots may @emph{or may not}
    get you to the color in that slot in that table.
    The other 240 slots are not usually reassignable.
    @item
    The second form is a seven-character string
    where the first character is @samp{#},
    and each of the following six characters is a hexadecimal digit.
    Each string @samp{#RRGGBB} specifies a 24-bit RGB color,
    with @samp{RR} specifying its red component,
    @samp{GG} specifying its green component, and
    @samp{BB} specifying its blue component.

    @c XXX We also support a third alternative, named colors,
    @c but these actually name color SLOTS only:
    @c The color can be specified either by name or by number.
    @c The name can be one of the first sixteen colors in that table, which are
    @c @samp{black}, @samp{red}, @samp{green}, @samp{yellow},
    @c @samp{blue}, @samp{magenta}, @samp{cyan}, @samp{white},
    @c @samp{bright-black}, @samp{bright-red},
    @c @samp{bright-green}, @samp{bright-yellow},
    @c @samp{bright-blue}, @samp{bright-magenta},
    @c @samp{bright-cyan}, and @samp{bright-white}.
    @c The hyphens in names can be replaced with spaces, but the
    @c resulting names will need to be quoted on the command line.

    @end itemize
@item
If the color scheme has no color assignment for a given role,
then the compiler will not use color for that role.
@item
If the color scheme has two or more color assignments for the same role,
only the last one counts; the others are ignored.
@end itemize

As mentioned above,
programmers can specify color schemes
using the environment variable @samp{MERCURY_COLOR_SCHEME}
and by using the @samp{--color-scheme} compiler option.
These can specify different schemes.
The rules the compiler uses to choose the color scheme that it will use
are as follows.

@enumerate
@item
If the command line contains a @samp{--color-scheme} option,
the compiler will use its color scheme.
(If the command line contains more than one @samp{--color-scheme} option,
the compiler will use the last one.)
@item
If the command line contains no @samp{--color-scheme} option,
but the environment variable @samp{MERCURY_COLOR_SCHEME} exists
and contains a nonempty string,
then the compiler will use its color scheme.
@item
If the command line contains no @samp{--color-scheme} option,
and the environment variable @samp{MERCURY_COLOR_SCHEME} does not exist
or contains an empty string,
but the files named in any @samp{--options-file} compiler options
(or, in the absence of such options, the @samp{Mercury.options} file),
include a @samp{--color-scheme} option
among the module-specific @samp{MCFLAGS} for the current module,
then the compiler will use its color scheme.
(If the options file(s) contain more than one @samp{--color-scheme} option,
the compiler will use the last one.)
@item
In the absence of a @samp{--color-scheme} option
on the command line, in the @samp{MERCURY_COLOR_SCHEME} environment variable
@emph{and} in the options files,
the compiler will use its default color scheme, which is @samp{light16}.
This scheme works reasonably well even on dark backgrounds,
even though (as its name indicates) it was designed for light backgrounds.
(This assumes that the color slots it uses hold
either their standard colors, or something reasonably close to them.)
@end enumerate

@node Enabling the use of color
@section Enabling the use of color
@cindex Enabling the use of color

The Mercury compiler uses two separate mechanisms
@itemize
@item
to specify what colors to use for each role,
@emph{if} the use of color in diagnostics is enabled, and
@item
to decide whether the use of color in diagnostics is enabled.
@end itemize

This arrangement allow programmers to turn off the use of color temporarily
without having to specify the color scheme again in full
when they want to turn it back on again.

As with color schemes,
programmers can control whether color is enabled in diagnostics
using either a compiler option, or by using environment variables.

The compiler option is a boolean option,
which, like other boolean options, has two forms:
a positive form @samp{--color-diagnostics}, which enables the use of color,
and a negative form @samp{--no-color-diagnostics}, which disables its use.

There are two environment variables
that the Mercury compiler consults in its decision:
@samp{MERCURY_ENABLE_COLOR}, and @samp{NO_COLOR}.
As their names show, the first is specific to Mercury,
while the second is not;
it is in fact a defacto standard for disabling color.
@samp{https://no-color.org}.

The rules the compiler uses to decide
whether the use of color in diagnostics is enabled
are as follows.

@enumerate
@item
If the command line contains a @samp{--color-diagnostics} option,
in either its positive or negative form,
then the compiler will obey it.
@item
If the command line contains no @samp{--color-diagnostics} option,
but the environment variable @samp{MERCURY_ENABLE_COLOR} exists
and contains either @samp{never} or @samp{always},
then the compiler will obey it.
The compiler also allows @samp{0} as a synonym for @samp{never},
and @samp{1} as a synonym for @samp{always}.
@item
If the command line contains no @samp{--color-diagnostics} option,
and the environment variable @samp{MERCURY_ENABLE_COLOR}
either does not exist, or contains a string other than the four listed above,
but the environment variable @samp{NO_COLOR} exists
and contains a nonempty string,
then the compiler will obey it by disabling the use of color.
@item
If the command line contains no @samp{--color-diagnostics} option
and neither environment variable has a value
that directs the compiler to obey it,
but the files named in any @samp{--options-file} compiler options,
(or, in the absence of such options, the @samp{Mercury.options} file),
include a @samp{--color-diagnostics} option,
in either its positive or negative form,
among the module-specific @samp{MCFLAGS} for the current module,
then the compiler will obey it.
@item
If the preconditions of all four of the above rules are false,
i.e. none of them decide the outcome,
then the compiler will fall back to its default.
The usual default decision is to enable the use of color,
though this can be overridden for a given installation of Mercury.
@end enumerate

@c ----------------------------------------------------------------------------

@node C compilers
@chapter Using a different C compiler
@cindex C compilers
@cindex Using a different C compiler
@cindex GNU C
@findex --cc

The Mercury compiler takes special advantage of certain extensions
provided by GNU C to generate much more efficient code.  We therefore
recommend that you use GNU C for compiling Mercury programs.
However, if for some reason you wish to use another compiler,
it is possible to do so.  Here is what you need to do.

@itemize @bullet
@item Create a new configuration for the Mercury system using the
@samp{mercury_config} script, specifying the different C compiler, e.g.@:
@samp{mercury_config --output-prefix=/usr/local/mercury-cc --with-cc=cc}.

@item Add the @samp{bin} directory of the new configuration to the beginning
of your PATH.

@item
You must use a grade beginning with @samp{none} or @samp{hlc}
(e.g.@: @samp{hlc.gc}).
You can specify the grade in one of three ways: by setting the
@env{MERCURY_DEFAULT_GRADE} environment variable, by adding a line
@vindex MERCURY_DEFAULT_GRADE
@samp{GRADE=@dots{}} to your @samp{Mmake} file, or by using the
@samp{--grade} option to @samp{mmc}.  (You will also need to install
those grades of the Mercury library, if you have not already done so.)

@item
If your compiler is particularly strict in
enforcing ANSI compliance, you may also need to compile the Mercury
code with @samp{--no-static-ground-terms}.

@end itemize

@c ----------------------------------------------------------------------------

@node Foreign language interface
@chapter Foreign language interface

The Mercury foreign language interfaces allows @samp{pragma foreign_proc} to
specify multiple implementations (in different foreign programming
languages) for a procedure.

If the compiler generates code for a procedure using a back-end for which
there are multiple applicable foreign languages, it will choose the
foreign language to use for each procedure according to a builtin ordering.

If the language specified in a @samp{foreign_proc} is not available for a
particular back-end, it will be ignored.

If there are no suitable @samp{foreign_proc} clauses for a particular
procedure but there are Mercury clauses, they will be used instead.

@table @asis

@item @samp{C}
This is the default foreign language on all back-ends which compile to C.
Only available on back-ends that compile to C.

@item @samp{C#}
This is the only foreign language for back-ends which compile to C#.

@item @samp{Java}
This is the only foreign language for back-ends which compile to Java.

@end table

@c ----------------------------------------------------------------------------

@node Stand-alone interfaces
@chapter Stand-alone interfaces

Programs written in a language other than Mercury
should not make calls to foreign exported Mercury procedures
unless the Mercury runtime has been initialised.
(In the case where the Mercury runtime has not been initialised,
the behaviour of these calls is undefined.)
Such programs must also ensure that
any module specific initialisation is performed
before calling foreign exported procedures in Mercury modules.
Likewise, module specific finalisation may need to be performed
after all calls to Mercury procedures have been made.

A stand-alone interface provides a mechanism by which
non-Mercury programs may initialise (and shut down)
the Mercury runtime plus a specified set of Mercury libraries.

A stand-alone interface is created by invoking the compiler
with the @samp{--generate-standalone-interface} option.
The set of Mercury libraries to be included in the stand-alone interface
is given via one of the usual mechanisms
for specifying what libraries to link against,
e.g. the @samp{--ml} and @samp{--mld} options. (@pxref{Libraries}).
The Mercury standard library is always included in this set.

In C grades,
the @samp{--generate-standalone-interface} option
causes the compiler to generate
an object file that should be linked into the executable.
This object file contains two functions:
@code{mercury_init()} and @code{mercury_terminate()}.
The compiler also generates a C header file
that contains the prototypes of these functions.
(This header file may be included in C++ programs.)
The roles of the two functions are described below.

@table @b
@item @bullet{} @code{mercury_init()}
Prototype:
@example
void mercury_init(int @var{argc}, char **@var{argv}, void *@var{stackbottom});
@end example

Initialise the Mercury runtime, standard library and any other Mercury
libraries that were specified when the stand-alone interface was generated.
@var{argc} and @var{argv} are the argument count and argument vector,
as would be passed to the function @code{main()} in a C program.
@var{stackbottom} is the address of the base of the stack.
In grades that use conservative garbage collection this is used to
tell the collector where to begin tracing.
This function must be called before any Mercury procedures
and must only be called once.
It is recommended that the value of @var{stackbottom} be set by passing
the address of a local variable in the @code{main()} function of a program,
for example:
@example
    int main(int argc, char **argv) @{
        void *dummy;
        mercury_init(argc, argv, &dummy);
        @dots{}
    @}
@end example
Note that the address of the stack base should be word aligned as
some garbage collectors rely upon this.
(This is why the type of the dummy variable in the above example is
@code{void *}.)
If the value of @var{stackbottom} is @code{NULL},
then the collector will attempt
to determine the address of the base of the stack itself.
Note that modifying the argument vector, @var{argv}, after the Mercury runtime
has been initialised will result in undefined behaviour since the runtime
maintains a reference into @var{argv}.

@sp 1
@item @bullet{} @code{mercury_terminate()}
Prototype:
@example
int mercury_terminate(void);
@end example

Shut down the Mercury runtime.
The value returned by this function is Mercury's exit status
(as set by the predicate @samp{io.set_exit_status/3}).
This function will also invoke any finalisers contained in the set
of libraries for which the stand-alone interface was generated.
@end table

The basename of the object and header file are provided as
the argument of @samp{--generate-standalone-interface} option.

@c XXX Mention that stand-alone interfaces work with debugging or
@c (deep) profiling?

Stand-alone interfaces are not required if the target language is Java
or C#.
For those target languages the Mercury runtime will be automatically
initialised when the classes or library assemblies containing code generated
by the Mercury compiler are loaded.

For an example of using a stand-alone interface see the
@samp{samples/c_interface/standalone_c} directory in the Mercury distribution.

@c ----------------------------------------------------------------------------

@page

@node Index
@unnumbered Index

@printindex cp

@c ----------------------------------------------------------------------------

@bye
