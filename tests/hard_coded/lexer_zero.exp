1: integer(base_10, i(0, []), signed, size_word)
2: integer(base_10, i(1, [12345678]), signed, size_word)
3: integer(base_10, i(1, [10]), signed, size_word)
4: integer(base_10, i(1, [97]), signed, size_word)
5: integer(base_10, i(1, [97]), signed, size_word)
5: name("bc")
7: integer(base_2, i(0, []), signed, size_word)
8: integer(base_2, i(1, [1]), signed, size_word)
9: integer(base_2, i(1, [3]), signed, size_word)
10: integer(base_2, i(1, [7]), signed, size_word)
14: integer(base_8, i(0, []), signed, size_word)
15: integer(base_8, i(1, [1]), signed, size_word)
16: integer(base_8, i(1, [342391]), signed, size_word)
18: integer(base_16, i(1, [1]), signed, size_word)
19: integer(base_16, i(1, [305419896]), signed, size_word)
20: integer(base_16, i(1, [162254319]), signed, size_word)
21: integer(base_16, i(1, [162254319]), signed, size_word)
25: float(0.123)
26: float(1.23e+44)
28: float(0.0)
29: float(0.0)
30: float(0.0)
31: float(0.0)
33: string("Decimal signed zeros")
34: integer(base_10, i(0, []), signed, size_word)
35: integer(base_10, i(0, []), signed, size_8_bit)
36: integer(base_10, i(0, []), signed, size_16_bit)
37: integer(base_10, i(0, []), signed, size_32_bit)
38: integer(base_10, i(0, []), signed, size_64_bit)
40: string("Decimal signed zeros (with underscores)")
41: integer(base_10, i(0, []), signed, size_word)
42: integer(base_10, i(0, []), signed, size_8_bit)
43: integer(base_10, i(0, []), signed, size_16_bit)
44: integer(base_10, i(0, []), signed, size_32_bit)
45: integer(base_10, i(0, []), signed, size_64_bit)
47: string("Decimal signed zeros (with leading zeros)")
48: integer(base_10, i(0, []), signed, size_word)
49: integer(base_10, i(0, []), signed, size_8_bit)
50: integer(base_10, i(0, []), signed, size_16_bit)
51: integer(base_10, i(0, []), signed, size_32_bit)
52: integer(base_10, i(0, []), signed, size_64_bit)
54: string("Decimal unsigned zeros")
55: integer(base_10, i(0, []), unsigned, size_word)
56: integer(base_10, i(0, []), unsigned, size_8_bit)
57: integer(base_10, i(0, []), unsigned, size_16_bit)
58: integer(base_10, i(0, []), unsigned, size_32_bit)
59: integer(base_10, i(0, []), unsigned, size_64_bit)
61: string("Decimal unsigned zeros (with underscores)")
62: integer(base_10, i(0, []), unsigned, size_word)
63: integer(base_10, i(0, []), unsigned, size_8_bit)
64: integer(base_10, i(0, []), unsigned, size_16_bit)
65: integer(base_10, i(0, []), unsigned, size_32_bit)
66: integer(base_10, i(0, []), unsigned, size_64_bit)
68: string("Decimal unsigned zeros (with leading zeros)")
69: integer(base_10, i(0, []), unsigned, size_word)
70: integer(base_10, i(0, []), unsigned, size_8_bit)
71: integer(base_10, i(0, []), unsigned, size_16_bit)
72: integer(base_10, i(0, []), unsigned, size_32_bit)
73: integer(base_10, i(0, []), unsigned, size_64_bit)
75: string("Binary signed zeros")
76: integer(base_2, i(0, []), signed, size_word)
77: integer(base_2, i(0, []), signed, size_word)
78: integer(base_2, i(0, []), signed, size_8_bit)
79: integer(base_2, i(0, []), signed, size_16_bit)
80: integer(base_2, i(0, []), signed, size_32_bit)
81: integer(base_2, i(0, []), signed, size_64_bit)
83: string("Binary signed zeros (with underscores)")
84: integer(base_2, i(0, []), signed, size_word)
85: integer(base_2, i(0, []), signed, size_word)
86: integer(base_2, i(0, []), signed, size_8_bit)
87: integer(base_2, i(0, []), signed, size_16_bit)
88: integer(base_2, i(0, []), signed, size_32_bit)
89: integer(base_2, i(0, []), signed, size_64_bit)
91: string("Binary signed zeros (with leading zeros)")
92: integer(base_2, i(0, []), signed, size_word)
93: integer(base_2, i(0, []), signed, size_word)
94: integer(base_2, i(0, []), signed, size_8_bit)
95: integer(base_2, i(0, []), signed, size_16_bit)
96: integer(base_2, i(0, []), signed, size_32_bit)
97: integer(base_2, i(0, []), signed, size_64_bit)
99: string("Binary unsigned zeros")
100: integer(base_2, i(0, []), unsigned, size_word)
101: integer(base_2, i(0, []), unsigned, size_8_bit)
102: integer(base_2, i(0, []), unsigned, size_16_bit)
103: integer(base_2, i(0, []), unsigned, size_32_bit)
104: integer(base_2, i(0, []), unsigned, size_64_bit)
106: string("Binary unsigned zeros (with underscores)")
107: integer(base_2, i(0, []), unsigned, size_word)
108: integer(base_2, i(0, []), unsigned, size_8_bit)
109: integer(base_2, i(0, []), unsigned, size_16_bit)
110: integer(base_2, i(0, []), unsigned, size_32_bit)
111: integer(base_2, i(0, []), unsigned, size_64_bit)
113: string("Binary unsigned zeros (with leading zeros)")
114: integer(base_2, i(0, []), unsigned, size_word)
115: integer(base_2, i(0, []), unsigned, size_8_bit)
116: integer(base_2, i(0, []), unsigned, size_16_bit)
117: integer(base_2, i(0, []), unsigned, size_32_bit)
118: integer(base_2, i(0, []), unsigned, size_64_bit)
120: string("Octal signed zeros")
121: integer(base_8, i(0, []), signed, size_word)
122: integer(base_8, i(0, []), signed, size_word)
123: integer(base_8, i(0, []), signed, size_8_bit)
124: integer(base_8, i(0, []), signed, size_16_bit)
125: integer(base_8, i(0, []), signed, size_32_bit)
126: integer(base_8, i(0, []), signed, size_64_bit)
128: string("Octal signed zeros (with underscores)")
129: integer(base_8, i(0, []), signed, size_word)
130: integer(base_8, i(0, []), signed, size_word)
131: integer(base_8, i(0, []), signed, size_8_bit)
132: integer(base_8, i(0, []), signed, size_16_bit)
133: integer(base_8, i(0, []), signed, size_32_bit)
134: integer(base_8, i(0, []), signed, size_64_bit)
136: string("Octal signed zeros (with leading zeros)")
137: integer(base_8, i(0, []), signed, size_word)
138: integer(base_8, i(0, []), signed, size_word)
139: integer(base_8, i(0, []), signed, size_8_bit)
140: integer(base_8, i(0, []), signed, size_16_bit)
141: integer(base_8, i(0, []), signed, size_32_bit)
142: integer(base_8, i(0, []), signed, size_64_bit)
144: string("Octal unsigned zeros")
145: integer(base_8, i(0, []), unsigned, size_word)
146: integer(base_8, i(0, []), unsigned, size_8_bit)
147: integer(base_8, i(0, []), unsigned, size_16_bit)
148: integer(base_8, i(0, []), unsigned, size_32_bit)
149: integer(base_8, i(0, []), unsigned, size_64_bit)
151: string("Octal unsigned zeros (with underscores)")
152: integer(base_8, i(0, []), unsigned, size_word)
153: integer(base_8, i(0, []), unsigned, size_8_bit)
154: integer(base_8, i(0, []), unsigned, size_16_bit)
155: integer(base_8, i(0, []), unsigned, size_32_bit)
156: integer(base_8, i(0, []), unsigned, size_64_bit)
158: string("Octal unsigned zeros (with leading zeros)")
159: integer(base_8, i(0, []), unsigned, size_word)
160: integer(base_8, i(0, []), unsigned, size_8_bit)
161: integer(base_8, i(0, []), unsigned, size_16_bit)
162: integer(base_8, i(0, []), unsigned, size_32_bit)
163: integer(base_8, i(0, []), unsigned, size_64_bit)
165: string("Hexadecimal signed zeros")
166: integer(base_16, i(0, []), signed, size_word)
167: integer(base_16, i(0, []), signed, size_word)
168: integer(base_16, i(0, []), signed, size_8_bit)
169: integer(base_16, i(0, []), signed, size_16_bit)
170: integer(base_16, i(0, []), signed, size_32_bit)
171: integer(base_16, i(0, []), signed, size_64_bit)
173: string("Hexadecimal signed zeros (with underscores)")
174: integer(base_16, i(0, []), signed, size_word)
175: integer(base_16, i(0, []), signed, size_word)
176: integer(base_16, i(0, []), signed, size_8_bit)
177: integer(base_16, i(0, []), signed, size_16_bit)
178: integer(base_16, i(0, []), signed, size_32_bit)
179: integer(base_16, i(0, []), signed, size_64_bit)
181: string("Hexadecimal signed zeros (with leading zeros)")
182: integer(base_16, i(0, []), signed, size_word)
183: integer(base_16, i(0, []), signed, size_word)
184: integer(base_16, i(0, []), signed, size_8_bit)
185: integer(base_16, i(0, []), signed, size_16_bit)
186: integer(base_16, i(0, []), signed, size_32_bit)
187: integer(base_16, i(0, []), signed, size_64_bit)
189: string("Hexadecimal unsigned zeros")
190: integer(base_16, i(0, []), unsigned, size_word)
191: integer(base_16, i(0, []), unsigned, size_8_bit)
192: integer(base_16, i(0, []), unsigned, size_16_bit)
193: integer(base_16, i(0, []), unsigned, size_32_bit)
194: integer(base_16, i(0, []), unsigned, size_64_bit)
196: string("Hexadecimal unsigned zeros (with underscores)")
197: integer(base_16, i(0, []), unsigned, size_word)
198: integer(base_16, i(0, []), unsigned, size_8_bit)
199: integer(base_16, i(0, []), unsigned, size_16_bit)
200: integer(base_16, i(0, []), unsigned, size_32_bit)
201: integer(base_16, i(0, []), unsigned, size_64_bit)
203: string("Hexadecimal unsigned zeros (with leading zeros)")
204: integer(base_16, i(0, []), unsigned, size_word)
205: integer(base_16, i(0, []), unsigned, size_8_bit)
206: integer(base_16, i(0, []), unsigned, size_16_bit)
207: integer(base_16, i(0, []), unsigned, size_32_bit)
208: integer(base_16, i(0, []), unsigned, size_64_bit)
210: string("Miscellaneous underscores")
211: integer(base_2, i(0, []), unsigned, size_8_bit)
212: integer(base_16, i(0, []), unsigned, size_16_bit)
213: integer(base_8, i(0, []), signed, size_32_bit)
214: integer(base_10, i(0, []), signed, size_64_bit)
215: integer(base_2, i(0, []), signed, size_word)
216: integer(base_2, i(0, []), unsigned, size_word)

1: integer(base_10, i(0, []), signed, size_word)
2: integer(base_10, i(1, [12345678]), signed, size_word)
3: integer(base_10, i(1, [10]), signed, size_word)
4: integer(base_10, i(1, [97]), signed, size_word)
5: integer(base_10, i(1, [97]), signed, size_word)
5: name("bc")
7: integer(base_2, i(0, []), signed, size_word)
8: integer(base_2, i(1, [1]), signed, size_word)
9: integer(base_2, i(1, [3]), signed, size_word)
10: integer(base_2, i(1, [7]), signed, size_word)
14: integer(base_8, i(0, []), signed, size_word)
15: integer(base_8, i(1, [1]), signed, size_word)
16: integer(base_8, i(1, [342391]), signed, size_word)
18: integer(base_16, i(1, [1]), signed, size_word)
19: integer(base_16, i(1, [305419896]), signed, size_word)
20: integer(base_16, i(1, [162254319]), signed, size_word)
21: integer(base_16, i(1, [162254319]), signed, size_word)
25: float(0.123)
26: float(1.23e+44)
28: float(0.0)
29: float(0.0)
30: float(0.0)
31: float(0.0)
33: string("Decimal signed zeros")
34: integer(base_10, i(0, []), signed, size_word)
35: integer(base_10, i(0, []), signed, size_8_bit)
36: integer(base_10, i(0, []), signed, size_16_bit)
37: integer(base_10, i(0, []), signed, size_32_bit)
38: integer(base_10, i(0, []), signed, size_64_bit)
40: string("Decimal signed zeros (with underscores)")
41: integer(base_10, i(0, []), signed, size_word)
42: integer(base_10, i(0, []), signed, size_8_bit)
43: integer(base_10, i(0, []), signed, size_16_bit)
44: integer(base_10, i(0, []), signed, size_32_bit)
45: integer(base_10, i(0, []), signed, size_64_bit)
47: string("Decimal signed zeros (with leading zeros)")
48: integer(base_10, i(0, []), signed, size_word)
49: integer(base_10, i(0, []), signed, size_8_bit)
50: integer(base_10, i(0, []), signed, size_16_bit)
51: integer(base_10, i(0, []), signed, size_32_bit)
52: integer(base_10, i(0, []), signed, size_64_bit)
54: string("Decimal unsigned zeros")
55: integer(base_10, i(0, []), unsigned, size_word)
56: integer(base_10, i(0, []), unsigned, size_8_bit)
57: integer(base_10, i(0, []), unsigned, size_16_bit)
58: integer(base_10, i(0, []), unsigned, size_32_bit)
59: integer(base_10, i(0, []), unsigned, size_64_bit)
61: string("Decimal unsigned zeros (with underscores)")
62: integer(base_10, i(0, []), unsigned, size_word)
63: integer(base_10, i(0, []), unsigned, size_8_bit)
64: integer(base_10, i(0, []), unsigned, size_16_bit)
65: integer(base_10, i(0, []), unsigned, size_32_bit)
66: integer(base_10, i(0, []), unsigned, size_64_bit)
68: string("Decimal unsigned zeros (with leading zeros)")
69: integer(base_10, i(0, []), unsigned, size_word)
70: integer(base_10, i(0, []), unsigned, size_8_bit)
71: integer(base_10, i(0, []), unsigned, size_16_bit)
72: integer(base_10, i(0, []), unsigned, size_32_bit)
73: integer(base_10, i(0, []), unsigned, size_64_bit)
75: string("Binary signed zeros")
76: integer(base_2, i(0, []), signed, size_word)
77: integer(base_2, i(0, []), signed, size_word)
78: integer(base_2, i(0, []), signed, size_8_bit)
79: integer(base_2, i(0, []), signed, size_16_bit)
80: integer(base_2, i(0, []), signed, size_32_bit)
81: integer(base_2, i(0, []), signed, size_64_bit)
83: string("Binary signed zeros (with underscores)")
84: integer(base_2, i(0, []), signed, size_word)
85: integer(base_2, i(0, []), signed, size_word)
86: integer(base_2, i(0, []), signed, size_8_bit)
87: integer(base_2, i(0, []), signed, size_16_bit)
88: integer(base_2, i(0, []), signed, size_32_bit)
89: integer(base_2, i(0, []), signed, size_64_bit)
91: string("Binary signed zeros (with leading zeros)")
92: integer(base_2, i(0, []), signed, size_word)
93: integer(base_2, i(0, []), signed, size_word)
94: integer(base_2, i(0, []), signed, size_8_bit)
95: integer(base_2, i(0, []), signed, size_16_bit)
96: integer(base_2, i(0, []), signed, size_32_bit)
97: integer(base_2, i(0, []), signed, size_64_bit)
99: string("Binary unsigned zeros")
100: integer(base_2, i(0, []), unsigned, size_word)
101: integer(base_2, i(0, []), unsigned, size_8_bit)
102: integer(base_2, i(0, []), unsigned, size_16_bit)
103: integer(base_2, i(0, []), unsigned, size_32_bit)
104: integer(base_2, i(0, []), unsigned, size_64_bit)
106: string("Binary unsigned zeros (with underscores)")
107: integer(base_2, i(0, []), unsigned, size_word)
108: integer(base_2, i(0, []), unsigned, size_8_bit)
109: integer(base_2, i(0, []), unsigned, size_16_bit)
110: integer(base_2, i(0, []), unsigned, size_32_bit)
111: integer(base_2, i(0, []), unsigned, size_64_bit)
113: string("Binary unsigned zeros (with leading zeros)")
114: integer(base_2, i(0, []), unsigned, size_word)
115: integer(base_2, i(0, []), unsigned, size_8_bit)
116: integer(base_2, i(0, []), unsigned, size_16_bit)
117: integer(base_2, i(0, []), unsigned, size_32_bit)
118: integer(base_2, i(0, []), unsigned, size_64_bit)
120: string("Octal signed zeros")
121: integer(base_8, i(0, []), signed, size_word)
122: integer(base_8, i(0, []), signed, size_word)
123: integer(base_8, i(0, []), signed, size_8_bit)
124: integer(base_8, i(0, []), signed, size_16_bit)
125: integer(base_8, i(0, []), signed, size_32_bit)
126: integer(base_8, i(0, []), signed, size_64_bit)
128: string("Octal signed zeros (with underscores)")
129: integer(base_8, i(0, []), signed, size_word)
130: integer(base_8, i(0, []), signed, size_word)
131: integer(base_8, i(0, []), signed, size_8_bit)
132: integer(base_8, i(0, []), signed, size_16_bit)
133: integer(base_8, i(0, []), signed, size_32_bit)
134: integer(base_8, i(0, []), signed, size_64_bit)
136: string("Octal signed zeros (with leading zeros)")
137: integer(base_8, i(0, []), signed, size_word)
138: integer(base_8, i(0, []), signed, size_word)
139: integer(base_8, i(0, []), signed, size_8_bit)
140: integer(base_8, i(0, []), signed, size_16_bit)
141: integer(base_8, i(0, []), signed, size_32_bit)
142: integer(base_8, i(0, []), signed, size_64_bit)
144: string("Octal unsigned zeros")
145: integer(base_8, i(0, []), unsigned, size_word)
146: integer(base_8, i(0, []), unsigned, size_8_bit)
147: integer(base_8, i(0, []), unsigned, size_16_bit)
148: integer(base_8, i(0, []), unsigned, size_32_bit)
149: integer(base_8, i(0, []), unsigned, size_64_bit)
151: string("Octal unsigned zeros (with underscores)")
152: integer(base_8, i(0, []), unsigned, size_word)
153: integer(base_8, i(0, []), unsigned, size_8_bit)
154: integer(base_8, i(0, []), unsigned, size_16_bit)
155: integer(base_8, i(0, []), unsigned, size_32_bit)
156: integer(base_8, i(0, []), unsigned, size_64_bit)
158: string("Octal unsigned zeros (with leading zeros)")
159: integer(base_8, i(0, []), unsigned, size_word)
160: integer(base_8, i(0, []), unsigned, size_8_bit)
161: integer(base_8, i(0, []), unsigned, size_16_bit)
162: integer(base_8, i(0, []), unsigned, size_32_bit)
163: integer(base_8, i(0, []), unsigned, size_64_bit)
165: string("Hexadecimal signed zeros")
166: integer(base_16, i(0, []), signed, size_word)
167: integer(base_16, i(0, []), signed, size_word)
168: integer(base_16, i(0, []), signed, size_8_bit)
169: integer(base_16, i(0, []), signed, size_16_bit)
170: integer(base_16, i(0, []), signed, size_32_bit)
171: integer(base_16, i(0, []), signed, size_64_bit)
173: string("Hexadecimal signed zeros (with underscores)")
174: integer(base_16, i(0, []), signed, size_word)
175: integer(base_16, i(0, []), signed, size_word)
176: integer(base_16, i(0, []), signed, size_8_bit)
177: integer(base_16, i(0, []), signed, size_16_bit)
178: integer(base_16, i(0, []), signed, size_32_bit)
179: integer(base_16, i(0, []), signed, size_64_bit)
181: string("Hexadecimal signed zeros (with leading zeros)")
182: integer(base_16, i(0, []), signed, size_word)
183: integer(base_16, i(0, []), signed, size_word)
184: integer(base_16, i(0, []), signed, size_8_bit)
185: integer(base_16, i(0, []), signed, size_16_bit)
186: integer(base_16, i(0, []), signed, size_32_bit)
187: integer(base_16, i(0, []), signed, size_64_bit)
189: string("Hexadecimal unsigned zeros")
190: integer(base_16, i(0, []), unsigned, size_word)
191: integer(base_16, i(0, []), unsigned, size_8_bit)
192: integer(base_16, i(0, []), unsigned, size_16_bit)
193: integer(base_16, i(0, []), unsigned, size_32_bit)
194: integer(base_16, i(0, []), unsigned, size_64_bit)
196: string("Hexadecimal unsigned zeros (with underscores)")
197: integer(base_16, i(0, []), unsigned, size_word)
198: integer(base_16, i(0, []), unsigned, size_8_bit)
199: integer(base_16, i(0, []), unsigned, size_16_bit)
200: integer(base_16, i(0, []), unsigned, size_32_bit)
201: integer(base_16, i(0, []), unsigned, size_64_bit)
203: string("Hexadecimal unsigned zeros (with leading zeros)")
204: integer(base_16, i(0, []), unsigned, size_word)
205: integer(base_16, i(0, []), unsigned, size_8_bit)
206: integer(base_16, i(0, []), unsigned, size_16_bit)
207: integer(base_16, i(0, []), unsigned, size_32_bit)
208: integer(base_16, i(0, []), unsigned, size_64_bit)
210: string("Miscellaneous underscores")
211: integer(base_2, i(0, []), unsigned, size_8_bit)
212: integer(base_16, i(0, []), unsigned, size_16_bit)
213: integer(base_8, i(0, []), signed, size_32_bit)
214: integer(base_10, i(0, []), signed, size_64_bit)
215: integer(base_2, i(0, []), signed, size_word)
216: integer(base_2, i(0, []), unsigned, size_word)
