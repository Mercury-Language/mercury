no_ho_inst.m:044: In clause for `run_loop(in, in, out, di, uo)':
no_ho_inst.m:044:   in argument 1 (i.e. the predicate term) of higher-order
no_ho_inst.m:044:   predicate call:
no_ho_inst.m:044:   mode error: context requires a [38;5;40mpredicate of arity four,[39;49m and
no_ho_inst.m:044:   the type of [38;5;87m`AppHandler'[39;49m does match that expectation.
no_ho_inst.m:044:   However, to check the correctness of the call, the compiler
no_ho_inst.m:044:   also needs to know the modes of the arguments and the
no_ho_inst.m:044:   determinism of the predicate that `AppHandler' represents.
no_ho_inst.m:044:   The insts of higher order values should contain this
no_ho_inst.m:044:   information, but [38;5;203m`ground',[39;49m which is the inst of
no_ho_inst.m:044:   `AppHandler' at this point, [38;5;203mdoes not.[39;49m
no_ho_inst.m:044: 
no_ho_inst.m:044:   The fix for this error is to add this information. For
no_ho_inst.m:044:   example, given a higher order type such as
no_ho_inst.m:044:     :- type callback_t == (pred(world, world, io, io)).
no_ho_inst.m:044:   you would define a corresponding inst, such as
no_ho_inst.m:044:     :- inst callback_i == (pred(in, out, di, uo) is det).
no_ho_inst.m:044:   This inst, which is usually called a higher order inst,
no_ho_inst.m:044:   specifies both the modes of the arguments and the
no_ho_inst.m:044:   determinism of a predicate. Search for `higher order inst'
no_ho_inst.m:044:   in the Mercury language reference manual's chapter for
no_ho_inst.m:044:   higher order programming for a corresponding example for
no_ho_inst.m:044:   functions.
no_ho_inst.m:044: 
no_ho_inst.m:044:   You can then tell the compiler that a value of type
no_ho_inst.m:044:   callback_t has inst callback_i by specifying either the
no_ho_inst.m:044:   mode `in(callback_i)' (when taking a value of type
no_ho_inst.m:044:   callback_t as input) or the mode `out(callback_i)' (when
no_ho_inst.m:044:   returning a value of type callback_t as output).
For more information, recompile with `-E'.
